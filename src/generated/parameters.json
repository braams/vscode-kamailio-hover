{
 "db_mysql": {
  "ping_interval": "### ping_interval (integer)\n\nTime interval in seconds to send ping messages to MySQL server in order\nto keep the connection open.\n\n*Default value is 300 (5 min).*\n\n    ...\n    modparam(\"db_mysql\", \"ping_interval\", 600)\n    ...\n\n",
  "server_timezone": "### server_timezone (integer)\n\nControl if kamailio converts a time to string using the local timezone\nor if MySQL will convert it using FROM_UNIXTIME. This option is useful\nif kamailio and the database are configured for different timezones.\n\n*Default value is 0 (use local conversion)*\n\n    ...\n    modparam(\"db_mysql\", \"server_timezone\", 1)\n    ...\n\n",
  "timeout_interval": "### timeout_interval (integer)\n\nTime interval (in seconds) after that a connection attempt, read or\nwrite request is aborted. The value counts three times, as several\nretries are done from the driver before it gives up.\n\nThe read timeout parameter is ignored on MySQL driver versions prior to\n\u201c5.1.12\u201d, \u201c5.0.25\u201d and \u201c4.1.22\u201d. The write timeout parameter is ignored\non versions prior to \u201c5.1.12\u201d and \u201c5.0.25\u201d, the \u201c4.1\u201d release don't\nsupport it at all.\n\n*Default value is 2 (6 sec).*\n\n    ...\n    modparam(\"db_mysql\", \"timeout_interval\", 2)\n    ...\n\n",
  "auto_reconnect": "### auto_reconnect (integer)\n\nConfigure whether the module should automatically reconnect to MySQL\nserver if the connection was lost.\n\n*Default value is 1 (1 - on / 0 - off).*\n\n    ...\n    modparam(\"db_mysql\", \"auto_reconnect\", 0)\n    ...\n\n",
  "insert_delayed": "### insert_delayed (integer)\n\nIf set to 1, all INSERT SQL queries will be sent to MySQL server as\nINSERT DELAYED.\n\n*Default value is 0 (1 - on / 0 - off).*\n\n    ...\n    modparam(\"db_mysql\", \"insert_delayed\", 1)\n    ...\n\n",
  "update_affected_found": "### update_affected_found (integer)\n\nIf set to 1, all UPDATE SQL queries will return the number of matched\nrows instead of the number of \"updated\" rows.\n\n*Default value is 0 (1 - on / 0 - off).*\n\n    ...\n    modparam(\"db_mysql\", \"update_affected_found\", 1)\n    ...\n\n",
  "opt_ssl_mode": "### opt_ssl_mode (integer)\n\nControl how the connection to MySQL server is done in regards to\nSSL/TLS. If set to 1, SSL/TLS mode is disabled.\n\nThe 'include/mysql.h' starting with MySQL 5.7.11 defines the values for\nthis option as enum: 'mysql_ssl_mode { SSL_MODE_DISABLED=1,\nSSL_MODE_PREFERRED, SSL_MODE_REQUIRED, SSL_MODE_VERIFY_CA,\nSSL_MODE_VERIFY_IDENTITY}'.\n\nNote: if the value of this parameter is 1, it enforces\nSSL_MODE_DISABLED, any other value is passed to the mysql_options(), not\nchecking if it is defined.\n\nNote: this option is supported only by libmysqlclient, not by\nlibmariadbclient.\n\n*Default value is 0 (0 - off).*\n\n    ...\n    modparam(\"db_mysql\", \"opt_ssl_mode\", 1)\n    ...\n\n"
 },
 "sl": {
  "default_code": "### default_code (int)\n\nDefault reply status code.\n\nDefault value is 500.\n\n    ...\n    modparam(\"sl\", \"default_code\", 505)\n    ...\n\n",
  "default_reason": "### default_reason (str)\n\nDefault reply reason phrase.\n\nDefault value is 'Internal Server Error'.\n\n    ...\n    modparam(\"sl\", \"default_reason\", \"Server Error\")\n    ...\n\n",
  "bind_tm": "### bind_tm (int)\n\nControls if SL module should attempt to bind to TM module in order to\nsend stateful reply when the transaction is created.\n\nDefault value is 1 (enabled).\n\n    ...\n    modparam(\"sl\", \"bind_tm\", 0)  # feature disabled\n    ...\n\n",
  "rich_redirect": "### rich_redirect (int)\n\nWhen sending a 3xx class reply, include additional branch info to the\ncontacts such as path vector and branch flags.\n\n- *0* - no extra info is added (default)\n\n- *1* - include branch flags as contact header parameter\n\n- *2* - include path as contact uri Route header\n\nValues may be combined (added).\n\n    ...\n    modparam(\"sl\", \"rich_redirect\", 3)\n    ...\n                \n\n",
  "event_callback_fl_ack": "### event_callback_fl_ack (str)\n\nThe name of the KEMI callback function to be executed instead of\nevent_route\\[sl:filtered-ack\\]. This function receives a string\nparameter.\n\nDefault value: not set.\n\n    ...\n    modparam(\"sl\", \"event_callback_fl_ack\", \"ksr_event_sl_filtered_ack\")\n    ...\n\n",
  "event_callback_lres_sent": "### event_callback_lres_sent (str)\n\nThe name of the KEMI callback function to be executed instead of\nevent_route\\[sl:local-response\\]. This function receives a string\nparameter.\n\nDefault value: not set.\n\n    ...\n    modparam(\"sl\", \"event_callback_lres_sent\", \"ksr_event_sl_local_response\")\n    ...\n\n"
 },
 "benchmark": {
  "enable": "### enable (int)\n\nEven when the module is loaded, benchmarking is not enabled per default.\nThis variable may have three different values:\n\n- -1 - Globally disable benchmarking\n\n- 0 - Enable per-timer enabling. Single timers are inactive by default\n  and can be activated through the RPC interface as soon as that feature\n  is implemented.\n\n- 1 - Globally enable benchmarking\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"benchmark\", \"enable\", 1)\n    ...\n\n",
  "granularity": "### granularity (int)\n\nLogging normally is not done for every reference to the log_timer()\nfunction, but only every n'th call. n is defined through this variable.\nA sensible granularity seems to be 100.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"benchmark\", \"granularity\", 500)\n    ...\n\n",
  "loglevel": "### loglevel (int)\n\nSet the log level for the benchmark logs. These levels should be used:\n\n- -5 - L_ALERT\n\n- -4 - L_BUG\n\n- -3 - L_CRIT\n\n- -2 - L_CRIT (no prefix)\n\n- -1 - L_ERR\n\n- 0 - L_WARN\n\n- 1 - L_NOTICE\n\n- 2 - L_INFO\n\n- 3 - L_DBG\n\n*Default value is \u201c3\u201d (L_INFO).*\n\n    ...\n    modparam(\"benchmark\", \"loglevel\", 4)\n    ...\n\nThis will set the logging level to L_DBG.\n\n",
  "register": "### register (str)\n\nRegister a timer id at startup. Required when using the start/log\nfunctions via Kemi framework. This parameter can be set many times to\nregister several timer ids.\n\n*Default value is \u201cNONE\u201d.*\n\n    ...\n    modparam(\"benchmark\", \"register\", \"test\")\n    modparam(\"benchmark\", \"register\", \"auth\")\n    ...\n\n"
 },
 "jwt": {
  "key_mode": "### key_mode (int)\n\nMode to use the private and public keys. If set to 0, they are read\nalways from the disk. If set to 1, they are cached in memory with the\nfirst use (no reload support yet).\n\n*Default value is 0.*\n\n    ...\n    modparam(\"jwt\", \"key_mode\", 1)\n    ...\n\n"
 },
 "h350": {},
 "statistics": {
  "variable": "### variable (string)\n\nName of a new statistic variable. The name may be followed by additional\nflag which describe the variable behavior:\n\n- *no_reset* : variable cannot be reset.\n\n<!-- -->\n\n    modparam(\"statistics\", \"variable\", \"register_counter\")\n    modparam(\"statistics\", \"variable\", \"active_calls/no_reset\")\n\n"
 },
 "pike": {
  "sampling_time_unit": "### sampling_time_unit (integer)\n\nTime period in seconds used for sampling (or the sampling accuracy). The\nsmaller the better, but slower. If you want to detect peeks, use a small\none. To limit the access (like total number of requests on a long period\nof time) to a proxy resource (a gateway for example), use a bigger value\nof this parameter.\n\nIMPORTANT: a too small value may lead to performance penalties due to\ntimer process overloading.\n\n*Default value is \u201c2\u201d.*\n\n    ...\n    modparam(\"pike\", \"sampling_time_unit\", 10)\n    ...\n\n",
  "reqs_density_per_unit": "### reqs_density_per_unit (integer)\n\nHow many requests should be allowed per `sampling_time_unit` before\nblocking all the incoming request from that IP. Practically, the\nblocking limit is between ( let's have x=reqs_density_per_unit) x and\n3\\*x for IPv4 addresses and between x and 8\\*x for IPv6 addresses.\n\n*Default value is 30.*\n\n    ...\n    modparam(\"pike\", \"reqs_density_per_unit\", 30)\n    ...\n\n",
  "remove_latency": "### remove_latency (integer)\n\nSpecifies for how long the IP address will be kept in memory after the\nlast request from that IP address. It's a sort of timeout value, in\nseconds. Note that it is not the duration to keep the IP in state\n'blocked'. An IP is unblocked next occurrence of 'sampling_time_unit'\nthat does not exceed 'reqs_density_per_unit'. Keeping an IP in memory\nresults in faster reaching of blocked state -- see the notes about the\nlimits of getting to state 'blocked'.\n\n*Default value is 120.*\n\n    ...\n    modparam(\"pike\", \"remove_latency\", 130)\n    ...\n\n",
  "pike_log_level": "### pike_log_level (integer)\n\nSyslog log level to be used by module to auto report the blocking (only\nfirst time) and unblocking of IPs detected as source of floods.\n\n*Default value is 1 (L_WARN).*\n\n    ...\n    modparam(\"pike\", \"pike_log_level\", -1)\n    ...\n\n"
 },
 "db2_ops": {
  "db_url": "### db_url (string)\n\nDefault database URL.\n\nThe format is:\n\n                db_url = database\n                \n\n        ...\n        modparam(\"db_ops\", \"db_url\", \"mysql://ser:123@127.0.0.1:12345/ser\");\n        ...\n                    \n\n",
  "declare_query": "### declare_query (string)\n\nDeclare query_id for `@db.query_id` (see select syntax) or for reference\nfrom `db_query(query_id)`. Queries are pre-compiled therefore volatile\nstuff must be passed via parameters (AVP or so).\n\nThe format is:\n\n                declare_query = declare_query_param\n                \n\n        ...\n        modparam(\"db_ops\", \"declare_query\", \"sel1=select/location/received/uid///%$f.uid\");\n        ...\n                    \n\n",
  "declare_handle": "### declare_handle (string)\n\nDeclare handle for fetching.\n\nThe format is:\n\n                declare_handle = declare_handle_param\n                \n\n        ...\n        modparam(\"db_ops\", \"declare_handle\", \"my_handle\");\n        ...\n                    \n\n"
 },
 "db_text": {
  "db_mode": "### db_mode (integer)\n\nSet caching mode (0) or non-caching mode (1). In caching mode, data is\nloaded at startup. In non-caching mode, the module checks every time a\ntable is requested whether the corresponding file on disk has changed,\nand if yes, will re-load the table from file.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"db_text\", \"db_mode\", 1)\n    ...\n\n",
  "db_delim": "### db_delim (string)\n\nSet the delimiter inside the db_text file.\n\n*Default value is \u201c:\u201d.*\n\n    ...\n    modparam(\"db_text\", \"db_delim\", \"|\")\n    ...\n\n",
  "default_connection": "### default_connection (string)\n\nconnection for use with rpc query command.\n\n*Default value is \u201cnone\u201d (off).*\n\n                        ...\n                        modparam(\"db_text\", \"default_connection\", \"text:///var/db/kamailio/dbtext\")\n                        ...\n                    \n\n",
  "emptystring": "### emptystring (integer)\n\ndb_text by default handles an empty string as a NULL value. Some\nmodules, like the dialplan module, does not accept NULL strings. If you\nenable emptystring an empty string will not be NULL, but an empty\nstring.\n\n*Default value is \u201c0\u201d (off).*\n\n    ...\n    modparam(\"db_text\", \"emptystring\", 1)\n    ...\n\n",
  "file_buffer_size": "### file_buffer_size (integer)\n\nsize of the buffer used to read the text file. Some presence tables have\ncolumns with large content.\n\n*Default value is \u201c16384\u201d.*\n\n    ...\n    modparam(\"db_text\", \"file_buffer_size\", 8192)\n    ...\n\n",
  "max_result_rows": "### max_result_rows (integer)\n\nnumber of rows to read from the text file.\n\n*Default value is \u201c100000\u201d.*\n\n    ...\n    modparam(\"db_text\", \"max_result_rows\", 1000000)\n    ...\n\n"
 },
 "kemix": {},
 "cfg_db": {
  "db_url": "### db_url (string)\n\nDefault database URL.\n\nThe format is:\n\n            db_url = database\n            \n\n    loadmodule(\"mysql.so\");\n    loadmodule(\"cfg_db.so\");\n    ...\n    modparam(\"cfg_db\", \"db_url\", \"mysql://SER:123@127.0.0.1:12345/SER\");\n    ...\n                \n\n",
  "transl_tbl": "### transl_tbl (string) := \"cfg_transl\"\n\nName of table used for pointing group_name+name into configuration\ntable. If empty/null field values are found then default values will be\nused. The default values are declared in record having *group_name*\ncalled *\\<default\\>*. The C-code \"absolutely\" default values (\"cfg_var\",\n\"group_name\", \"name\", \"value\"). The other keyword is asterisk *\\** which\nmatches all parameters and will be used if parameter is not explicitly\nmentioned.\n\n",
  "custom_tbl": "### custom_tbl (string) := \"cfg_custom\"\n\nName of table used for extra param declaration (group_name, name, type,\nmin/max value, description).\n\n"
 },
 "rls": {
  "db_url": "### db_url(str)\n\nThe database url.\n\n*Default value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"rls\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "rlpres_db_url": "### rlpres_db_url(str)\n\nThe rlpres (rls_presentity table) database url. This parameter only\nneeds to be specified if the rls_watchers table and rls_presentity\ntables are in different databases. rls_presentity is used to cache the\nbodies of back-end NOTIFY requests until an RLS NOTIFY can be sent. On a\nmulti-server system having a single cache for all active servers can\ncause issues if both servers try to send RLS NOTIFY requests at the same\ntime. This parameter enables each server to have its own (possibly\nlocal) rls_presentity table.\n\n*Default value is a mirror of the \u201cdb_url\u201d setting.*\n\n    ...\n    modparam(\"rls\", \"rlpres_db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "xcap_db_url": "### xcap_db_url(str)\n\nThe xcap database url. This parameter only needs to be specified if the\nrls db and integrated xcap server db have different urls.\n\n*Default value is a mirror of the \u201cdb_url\u201d setting.*\n\n    ...\n    modparam(\"rls\", \"xcap_db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "db_mode": "### db_mode(int)\n\nThe module supports 2 modes of operation, high speed memory based\nstorage (mode 0), and database only (mode 2) where all data is stored in\na database, allowing scalability at the expense of speed. Mode 1 is\nreserved.\n\n*Default value is \u201c0\u201d*\n\n    ...\n    modparam(\"rls\", \"db_mode\", 2)\n    ...\n\n",
  "xcap_table": "### xcap_table(str)\n\nThe name of the xcap table in which the integrated server or the\nxcap_client module writes. If integrated_xcap_server parameter not set,\nthe name of the table must be the same as the one set for the\nxcap_client module.\n\n*Default value is \u201cxcap\u201d.*\n\n    ...\n    modparam(\"rls\", \"xcap_table\", \"xcaps\");\n    ...\n\n",
  "rlsubs_table": "### rlsubs_table(str)\n\nThe name of the db table where resource lists subscription information\nis stored.\n\n*Default value is \u201crls_watchers\u201d.*\n\n    ...\n    modparam(\"rls\", \"rlsubs_table\", \"rls_subscriptions\")\n    ...\n\n",
  "rlpres_table": "### rlpres_table(str)\n\nThe name of the db table where notified event specific information is\nstored.\n\n*Default value is \u201crls_presentity\u201d.*\n\n    ...\n    modparam(\"rls\", \"rlpres_table\", \"rls_notify\")\n    ...\n\n",
  "clean_period": "### clean_period (int)\n\nThe period at which to check for expired information. 0 means do not\ncheck.\n\n*Default value is \u201c100\u201d.*\n\n    ...\n    modparam(\"rls\", \"clean_period\", 100)\n    ...\n\n",
  "rlpres_clean_period": "### rlpres_clean_period (int)\n\nThe period at which to check for expired rls_presentity information. -1\nmeans do not use (clean_period) is used instead. 0 means do not check.\nThis option can be used when you want to check rls_presentity and\nrls_watchers on different timeouts. This is useful when they are in\ndifferent databases.\n\n*Default value is \u201c-1\u201d.*\n\n    ...\n    modparam(\"rls\", \"rlpres_clean_period\", 100)\n    ...\n\n",
  "waitn_time": "### waitn_time (int)\n\nThe maximum time period that RLS NOTIFY requests will be buffered for.\nThe server will attempt to send NOTIFY requests with the updated\npresence state of the subscribed list or watcher information within this\nmany seconds of a change occurring.\n\n*Default value is \u201c5\u201d.*\n\n    ...\n    modparam(\"rls\", \"waitn_time\", 10)\n    ...\n\n",
  "notifier_poll_rate": "### notifier_poll_rate (int)\n\nThe number of times per second that the notifier processes should check\nfor work. Approximately 1/(waitn_time \\* notifier_poll_rate \\*\nnotifier_processes) of the pending updates will be sent each time a\nnotifier process runs.\n\nSeparate notifier processes are only run when db_mode is 2 (DB only\nmode).\n\n*Default value is \u201c10\u201d.*\n\n    ...\n    modparam(\"rls\", \"notifier_poll_rate\", 20)\n    ...\n\n",
  "notifier_processes": "### notifier_processes (int)\n\nThe number of notifier processes that should be started.\n\nSeparate notifier processes are only run when db_mode is 2 (DB only\nmode).\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"rls\", \"notifier_processes\", 2)\n    ...\n\n",
  "max_expires": "### max_expires (int)\n\nThe maximum accepted expires for a subscription to a list.\n\n*Default value is \u201c7200\u201d.*\n\n    ...\n    modparam(\"rls\", \"max_expires\", 10800)\n    ...\n            \n\n",
  "expires_offset": "### expires_offset (int)\n\nThis parameter only has an effect when the db_mode is DB_ONLY (mode 2).\nWhen expired subscribers are checked for deletion from the database,\nthose that have a value in the expires column which is less than\ncurrent_time - expires_offset are matched. Hence when an offset of zero\nis used, all those that expire prior the current time will be deleted.\nIf an offset of 't' is used, only those that expired more than t seconds\nago are deleted from the database. Negative offsets are treated as\nthough an offset of zero was specified.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"rls\", \"expires_offset\", 0)\n    ...\n            \n\n",
  "hash_size": "### hash_size (int)\n\nThe dimension of the hash table used to store subscription to a list.\nThis parameter will be used as the power of 2 when computing table size.\n\n*Default value is \u201c9 (512)\u201d.*\n\n    ...\n    modparam(\"rls\", \"hash_size\", 11)\n    ...\n            \n\n",
  "xcap_root": "### xcap_root (str)\n\nThe address of the xcap server.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"rls\", \"xcap_root\", \"http://192.168.2.132/xcap-root:800\")\n    ...\n            \n\n",
  "integrated_xcap_server": "### integrated_xcap_server (int)\n\nThis parameter should be set if only integrated xcap servers are used to\nstore resource lists.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"rls\", \"integrated_xcap_server\", 1)\n    ...\n            \n\n",
  "to_presence_code": "### to_presence_code (int)\n\nThe code to be returned by rls_handle_subscribe function if the\nprocessed Subscribe is not a resource list Subscribe. This code can be\nused in an architecture with presence and rls servers collocated on the\nsame machine, to call handle_subscribe on the message causing this code.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"rls\", \"to_presence_code\", 10)\n    ...\n            \n\n",
  "rls_event": "### rls_event (str)\n\nThe default event that RLS handles is presence. If some other events\nshould also be handled by RLS they should be added using this parameter.\nIt can be set more than once.\n\n*Default value is \u201c\"presence\"\u201d.*\n\n    ...\n    modparam(\"rls\", \"rls_event\", \"dialog;sla\")\n    ...\n            \n\n",
  "outbound_proxy": "### outbound_proxy (str)\n\nThe SIP address where to send RLS subscriptions (outbound proxy address\nas SIP URI).\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"rls\", \"outbound_proxy\", \"sip:presence.kamailio.org\")\n    ...\n            \n\n",
  "server_address": "### server_address (str)\n\nThe address of the server that will be used as a contact in sent\nSubscribe requests and 200 OK replies for Subscribe requests for RLS. It\nis a mandatory parameter.\n\n    ...\n    modparam(\"rls\", \"server_address\", \"sip:rls@ip.address.ofyour.proxy:5060\")\n    ...\n            \n\n",
  "max_notify_body_length": "### max_notify_body_length (int)\n\nThe maximum size that the body of a NOTIFY message may be. If set to 0\n(the default), no size limit is applied. Note that this refers only to\nthe body, not the complete NOTIFY message.\n\n    ...\n    modparam(\"rls\", \"max_notify_body_length\", 32000)\n    ...\n            \n\n",
  "reload_db_subs": "### reload_db_subs (integer)\n\nReload subscriptions on module initialization (requires db_mode 0\n(memory only mode)).\n\n*Default value is 0 (do not load rows from db).*\n\n    ...\n    modparam(\"rls\", \"reload_db_subs\", 1)\n    ...\n\n",
  "fetch_rows": "### fetch_rows (integer)\n\nNumber of rows to be loaded in one step from database.\n\n*Default value is 500.*\n\n    ...\n    modparam(\"rls\", \"fetch_rows\", 1000)\n    ...\n\n",
  "disable_remote_presence": "### disable_remote_presence (integer)\n\nWhen set to a non-zero value RLS will not perform back-end SUBSCRIBEs to\nnon-local presentities. When people have large contact lists RLS will\nmake lots of back-end subscriptions for each local subscriber. This can\nbe a lot of traffic, and if the contact lists contain non-local (as in\nnot on this Kamailio server or cluster) contacts this can result in a\nlot of Internet traffic. Setting this option to a non-zero value\nprevents RLS from performing back-end SUBSCRIBEs for remote\npresentities.\n\n*Default value is 0*\n\n    ...\n    modparam(\"rls\", \"disable_remote_presence\", 1)\n    ...\n\n",
  "max_backend_subs": "### max_backend_subs (integer)\n\nWhen set to a non-zero value RLS will limit the number of back-end\nSUBSCRIBEs for each RLS SUBSCRIBE to this value. Leaving this at the\ndefault of zero means no limit. When people have large contact lists RLS\nwill make lots of back-end subscriptions. This can easily overload a\nsystem. This option allows you to limit the number of back-end\nSUBSCRIBEs to help prevent overload.\n\n*Default value is 0*\n\n    ...\n    modparam(\"rls\", \"max_backend_subs\", 30)\n    ...\n\n"
 },
 "db_flatstore": {
  "flush": "### flush (integer)\n\nEnable or disable flushing after each write.\n\nDefault value is 1.\n\n",
  "encode_delimiter": "### encode_delimiter (integer)\n\nEnable or disable encoding of the escaped character using \"\"%\" HEX HEX\"\nmechanism for escaping from RFC 2396\n\nDefault value is 1. Default delimiter '\\|' is replaced with %7C if found\nin any string\n"
 },
 "pv": {
  "shvset": "### shvset (string)\n\nSet the initial value of a shared variable (\\$shv(name)). The parameter\ncan be set many times.\n\nThe value of the parameter has the format: \\_name\\_ '=' \\_type\\_ ':'\n\\_value\\_\n\n- \\_name\\_: shared variable name\n\n- \\_type\\_: type of the value\n\n  - \u201ci\u201d: integer value\n\n  - \u201cs\u201d: string value\n\n- \\_value\\_: value to be set\n\nNote: this is special useful for usage with KEMI scripts, the \\$shv(...)\nvariables must be defined during Kamailio initialization in order to\nbecome available in all worker processes.\n\nDefault value is \u201cNULL\u201d.\n\n    ...\n    modparam(\"pv\", \"shvset\", \"debug=i:1\")\n    modparam(\"pv\", \"shvset\", \"pstngw=s:sip:10.10.10.10\")\n    ...\n\n",
  "varset": "### varset (string)\n\nSet the value of a script variable (\\$var(name)). The parameter can be\nset many times.\n\nThe value of the parameter has the format: \\_name\\_ '=' \\_type\\_ ':'\n\\_value\\_\n\n- \\_name\\_: shared variable name\n\n- \\_type\\_: type of the value\n\n  - \u201ci\u201d: integer value\n\n  - \u201cs\u201d: string value\n\n- \\_value\\_: value to be set\n\nDefault value is \u201cNULL\u201d.\n\n    ...\n    modparam(\"pv\", \"varset\", \"init=i:1\")\n    modparam(\"pv\", \"varset\", \"gw=s:sip:11.11.11.11;transport=tcp\")\n    ...\n\n",
  "avp_aliases": "### avp_aliases (string)\n\nDefine aliases for PV AVP names.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"pv\",\"avp_aliases\",\"email=s:email_addr;tmp=i:100\")\n    ...\n                    \n\n"
 },
 "jansson": {},
 "imc": {
  "db_url": "### db_url (str)\n\nThe database url.\n\n*The default value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"imc\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "db_mode": "### db_mode(integer)\n\nThe module supports 2 modes of operation, high speed memory based\nstorage (mode 0), and database only (mode 2) where all data is stored in\na database, allowing scalability at the expense of speed. Mode 1 is\nreserved.\n\n*Default value is \u201c0\u201d*\n\n    ...\n    modparam(\"imc\", \"db_mode\", 2)\n    ...\n\n",
  "rooms_table": "### rooms_table (str)\n\nThe name of the table storing IMC rooms.\n\n*The default value is \"imc_rooms\".*\n\n    ...\n    modparam(\"imc\", \"rooms_table\", \"rooms\")\n    ...\n\n",
  "members_table": "### members_table (str)\n\nThe name of the table storing IMC members.\n\n*The default value is \"imc_members\".*\n\n    ...\n    modparam(\"imc\", \"members_table\", \"members\")\n    ...\n\n",
  "hash_size": "### hash_size (integer)\n\nThe power of 2 to get the size of the hash table used for storing\nmembers and rooms.\n\n*The default value is 4 (resulting in hash size 16).*\n\n    ...\n    modparam(\"imc\", \"hash_size\", 8)\n    ...\n\n",
  "imc_cmd_start_char": "### imc_cmd_start_char (str)\n\nThe character which indicates that the body of the message is a command.\n\n*The default value is \"#\".*\n\n    ...\n    modparam(\"imc\", \"imc_cmd_start_char\", \"#\")\n    ...\n\n",
  "outbound_proxy": "### outbound_proxy (str)\n\nThe SIP address used as next hop when sending the message. Very useful\nwhen using Kamailio with a domain name not in DNS, or when using a\nseparate Kamailio instance for imc processing. If not set, the message\nwill be sent to the address in destination URI.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"imc\", \"outbound_proxy\", \"sip:kamailio.org;transport=tcp\")\n    ...\n\n",
  "extra_hdrs": "### extra_hdrs (str)\n\nExtra headers (each ending with \\r\\n) to be added in messages sent out\nfrom imc server.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"imc\", \"extra_hdrs\", \"P-Flags: 3\\r\\n\")\n    ...\n\n",
  "create_on_join": "### create_on_join (integer)\n\nIf set to 1 and user requests to join a non-existing room, the room will\nbe automatically created. If set to 0, joining a non-existing room\nreturns an error.\n\n*The default value is 1.*\n\n    ...\n    modparam(\"imc\", \"create_on_join\", 0)\n    ...\n\n",
  "check_on_create": "### check_on_create (integer)\n\nIf set to 1, the chat server will report an error if the user attempts\nto create a room that already exists.\n\n*The default value is 0.*\n\n    ...\n    modparam(\"imc\", \"check_on_create\", 1)\n    ...\n\n"
 },
 "phonenum": {
  "smode": "### smode (int)\n\nPhone number search mode (not in use yet).\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"phonenum\", \"smode\", 0)\n    ...\n\n",
  "resid": "### resid (str)\n\nPreregister result container id during initialization, enabling the use\nof the module in KEMI scripts. In native Kamailio.cfg file, registration\nis done when parsing config and finding variables.\n\n*Default value is \u201c\u201d (empty).*\n\n    ...\n    modparam(\"phonenum\", \"resid\", \"src\")\n    ...\n    if(phonenum_match(\"1-484-555-8888\", \"src\")) {\n       ...\n    }\n    ...\n\n"
 },
 "cdp": {
  "workerq_latency_threshold": "### workerq_latency_threshold (int)\n\nThe time in ms above which a log error is written to log file for\nputting tasks into task queue.\n\n*Default value is \u201c100\u201d.*\n\n    ...\n    modparam(\"cdp\", \"workerq_latency_threshold\", 250)\n    ...\n        \n\n",
  "workerq_length_threshold_percentage": "### workerq_length_threshold_percentage (int)\n\nThe threshold of the length of the worker queue as a percentage of the\nmaximum queue size - when exceeded a warning is written to the log file.\n0 means disabled\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"cdp\", \"workerq_length_threshold_percentage\", 25)\n    ...\n        \n\n"
 },
 "sqlops": {
  "sqlcon": "### sqlcon (str)\n\nThe definition of a DB connection. The value of the parameter must have\nthe following format:\n\n- \"connection_name=\\>database_url\"\n\nThis parameter may be set multiple times to get many DB connections in\nthe same configuration file.\n\n- *connection_name* - string specifying the name of a database\n  connection. This string is used by the \u201csql_query()\u201d function to refer\n  to the DB connection.\n\n- *database_url* - Standardized Kamailio database URL used to connect to\n  database.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"sqlops\",\"sqlcon\",\"cb=>mysql://kamailio:kamailiorw@localhost/kamailio\")\n    modparam(\"sqlops\",\"sqlcon\",\"ca=>dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "sqlres": "### sqlres (str)\n\nThe definition of a database result ID. The value of the parameter can\nbe any string. Results IDs are also added at fixup time when sql_query()\nparameters are parsed, so there is no need to declare them via module\nparameter unless you want to use them from within other modules and be\navailable in all application processes.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"sqlops\", \"sqlres\", \"ra\")\n    ...\n\n",
  "tr_buf_size": "### tr_buf_size (int)\n\nThe size of the transformations for SQL operations.\n\n*Default value is 2048.*\n\n    ...\n    modparam(\"sqlops\", \"tr_buf_size\", 4096)\n    ...\n\n",
  "connect_mode": "### connect_mode (int)\n\nControl if the module must stop loading when connecting to database\nserver fails during start up. Values: 0 - stop loading; 1 - continue\neven if connecting to database server fails.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"sqlops\", \"connect_mode\", 1)\n    ...\n\n",
  "results_maxsize": "### results_maxsize (int)\n\nSet the upper limit of how many result containers are going to be\ndefined.\n\nNote that a result container can be used for different SQL queries, it\nis not required to have result container per SQL query. Use different\ncontainers when the result records are needed at the same time (e.g.,\ncompare a field from one result with a field from another result).\n\n*Default value is 32.*\n\n    ...\n    modparam(\"sqlops\", \"results_maxsize\", 64)\n    ...\n\n"
 },
 "uid_avp_db": {
  "db_url": "### db_url (string)\n\nThe URL of the database to be used.\n\nDefault value is \"mysql://ser:heslo@localhost/ser\".\n\n",
  "user_attrs_table": "### user_attrs_table (string)\n\nName of the table with user attributes.\n\nDefault value is \"user_attrs\".\n\n",
  "uri_attrs_table": "### uri_attrs_table (string)\n\nName of the table with uri attributes.\n\nDefault value is \"uri_attrs\".\n\n",
  "uid_column": "### uid_column (string)\n\nName of the column that stores UID in the user attributes table.\n\nDefault value is \"uid\".\n\n",
  "username_column": "### username_column (string)\n\nName of the column containing the username of the subscriber in uri\nattributes table.\n\nDefault value is \"username\".\n\n",
  "did_column": "### did_column (string)\n\nName of the column in uri attributes table containing the ID of domain\nthat the subscriber belongs to.\n\nDefault value is \"did\".\n\n",
  "name_column": "### name_column (string)\n\nThe name of the column containing attribute names.\n\nDefault value is \"name\".\n\n",
  "value_column": "### value_column (string)\n\nThe name of the column containing attribute values.\n\nDefault value is \"value\".\n\n",
  "type_column": "### type_column (string)\n\nThe name of the column containing attribute value type.\n\nDefault value is \"type\".\n\n",
  "flags_column": "### flags_column (string)\n\nThe name of the column containing attribute flags.\n\nDefault value is \"flags\".\n\n",
  "scheme_column": "### scheme_column (string)\n\nThe name of the column containing subscriber's scheme in uri attributes.\n\nDefault value is \"scheme\".\n\n",
  "attr_group": "### attr_group (string)\n\n'Extra attribute' group definition. It can be repeated to define more\nattribute groups.\n\nThe group definition contains one or more assignments in the form\nkey=value. Possible keys are:\n\nid  \nAttribute group identifier. Must be set.\n\ntable  \nTable name used for storing attributes from this attribute group. Must\nbe set.\n\nflag  \nAttribute flag name used to mark attributes in this group. Must be set.\n\nkey_column  \nColumn name holding key. Default value is \u201cid\u201d.\n\nname_column  \nColumn name used for storing attribute name. Default value is \u201cname\u201d.\n\nvalue_column  \nColumn name used for storing attribute value. Default value is \u201cvalue\u201d.\n\ntype_column  \nColumn name used for storing attribute type. Default value is \u201ctype\u201d.\n\nflags_column  \nColumn name used for storing attribute flags. Default value is \u201cflags\u201d.\n\nNone defined by default.\n\n    modparam(\"avp_db\", \"attr_group\", \"id=dlg,flag=dialog_flag,table=dlg_attrs,key_column=dlg_id\");\n\nTable used for these attributes:\n\n    mysql> describe dlg_attrs;\n    +--------+------------------+------+-----+---------+-------+\n    | Field  | Type             | Null | Key | Default | Extra |\n    +--------+------------------+------+-----+---------+-------+\n    | dlg_id | varchar(256)     | NO   | MUL |         |       |\n    | name   | varchar(32)      | NO   |     |         |       |\n    | value  | varchar(255)     | YES  |     | NULL    |       |\n    | type   | int(11)          | NO   |     | 0       |       |\n    | flags  | int(10) unsigned | NO   |     | 0       |       |\n    +--------+------------------+------+-----+---------+-------+\n    5 rows in set (0.00 sec)\n        \n\nSetting flags from code (all attrs beginning with \u201cdlg\\_\u201d):\n\n    avpflags dialog_flag;\n    ...\n    route {\n        ...\n        setavpflag(\"$f./^dlg_/\", \"dialog_flag\");\n        ...\n    }\n\n",
  "auto_unlock_extra_attrs": "### auto_unlock_extra_attrs (string)\n\nDetermines the action when any of the 'extra attributes' lock is\ndetected when routing script execution was finished. When the value of\nthis parameter is zero (default) BUG level message is logged, but the\nlock is kept, so another process trying to obtain the lock might get\nstuck. If the value is nonzero, DEBUG level message is sent to the log\nand all the locks are released.\n\nDefault value is 0.\n\n"
 },
 "sdpops": {},
 "crypto": {
  "salt": "### salt (str)\n\nA keyword to generate salt for encryption. It must be at least 8 chars\nlong. If set to empty, no salt is used for encryption.\n\nThe salt is a binary array that is appended to the encryption password\nfor better protection against dictionary attacks. Same salt and password\nneed to be used when encrypting and decrypting.\n\n*Default value is \"...\" (see code).*\n\n    ...\n    modparam(\"crypto\", \"salt\", \"l0Bh2M8a\")\n    ...\n\n",
  "register_callid": "### register_callid (int)\n\nSet it to 1 in order to register a callback to core for generation of\ncallid values for requests generated by Kamailio tm module.\n\nThis callid generator uses libssl random and hashing functions for\ngenerating RFC 4122 version 4 UUID with high quality entropy. It is\nuseful when wanting to have new callids that cannot be predicted from\nprevious values.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"crypto\", \"register_callid\", 1)\n    ...\n\n",
  "register_evcb": "### register_evcb (int)\n\nSet it to 1 in order to register the event route callbacks, in case AES\nencryption/decryption of SIP traffic is wanted. The\nevent_route\\[crypto:netio\\] or corresponding KEMI callback are executed.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"crypto\", \"register_evcb\", 1)\n    ...\n\n",
  "kevcb_netio": "### kevcb_netio (str)\n\nName of the KEMI callback function for netio events. It receives a\nstring parameter with event route name.\n\n*Default value is not set.*\n\n    ...\n    modparam(\"crypto\", \"kevcb_netio\", \"ksr_crypto_netio\")\n    ...\n    function ksr_crypto_netio(evname)\n      ...\n    end\n    ...\n\n",
  "netio_key": "### netio_key (str)\n\nThe shared secret used to encrypt/decrypt network traffic.\n\n*Default value is not set.*\n\n    ...\n    modparam(\"crypto\", \"netio_key\", \"strong-password-here\")\n    ...\n\n",
  "key_derivation": "### key_derivation (str)\n\nSpecify if the module should use an internal derivation function to\ngenerate the initialization vector for encryption operations. This is\nthe default mode. If set to 0 the initialization vector will be\ngenerated randomly or read from the configuration file.\n\nThe source of the initialization vector is configured with the\n*init_vector* parameter.\n\n*Default value is 1 - generate the initialization vector internally*\n\n    ...\n    modparam(\"crypto\", \"key_derivation\", 0)\n    ...\n\n",
  "init_vector": "### init_vector (str)\n\nThe initialization vector used for the cryptographic operations. This\nneeds to be a Base64 encoded value with 16 bytes lengths.\n\nIf this parameter is not set and the *key_derivation* parameter is also\nset to 0, the module will create a random initialization vector for\ndecryption operations. For encryption operations the initialization\nvector will be read from the first 16 bytes of the cipher text.\n\n*Default value is not set.*\n\n    ...\n    modparam(\"crypto\", \"init_vector\", \"MTIzNDU2Nzg5MTIzNDU2Nw==\")\n    ...\n\n"
 },
 "ndb_mongodb": {
  "server": "### server (str)\n\nSpecify the details to connect to MongoDB server. It takes a list of\nattribute=value separated by semicolon, the attributes can be name and\nuri. Name is a generic identifier to be used with module functions. The\nuri parameter must be a valid MongoDB database connection string.\n\nYou can set this parameter many times, in case you want to connect to\nmany MongoDB servers, just give different attributes and use the\nspecific server name when querying the MongoDB instance.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"ndb_mongodb\", \"server\", \"name=mgs1;uri='mongodb://localhost/kamailio'\")\n    modparam(\"ndb_mongodb\", \"server\", \"name=mgs2;uri='mongodb://127.0.0.2/kamailio'\")\n    ...\n\n"
 },
 "uac_redirect": {
  "default_filter": "### default_filter (string)\n\nThe default behavior in filtering contacts. It may be \u201caccept\u201d or\n\u201cdeny\u201d.\n\n*The default value is \u201caccept\u201d.*\n\n    ...\n    modparam(\"uac_redirect\",\"default_filter\",\"deny\")\n    ...\n                    \n\n",
  "deny_filter": "### deny_filter (string)\n\nThe regular expression for default deny filtering. It makes sense to be\ndefined only if the `default_filter` parameter is set to \u201caccept\u201d. All\ncontacts matching the `deny_filter` will be rejected; the rest of them\nwill be accepted for redirection.\n\nThe parameter may be defined only one - multiple definition will\noverwrite the previous definitions. If more regular expression need to\nbe defined, use the `set_deny_filter()` scripting function.\n\n*This parameter is optional, it's default value being NULL.*\n\n    ...\n    modparam(\"uac_redirect\",\"deny_filter\",\".*@siphub\\.net\")\n    ...\n                    \n\n",
  "accept_filter": "### accept_filter (string)\n\nThe regular expression for default accept filtering. It makes sense to\nbe defined only if the `default_filter` parameter is set to \u201cdeny\u201d. All\ncontacts matching the `accept_filter` will be accepted; the rest of them\nwill be rejected for redirection.\n\nThe parameter may be defined only one - multiple definition will\noverwrite the previous definitions. If more regular expression need to\nbe defined, use the `set_accept_filter()` scripting function.\n\n*This parameter is optional, it's default value being NULL.*\n\n    ...\n    modparam(\"uac_redirect\",\"accept_filter\",\".*@siphub\\.net\")\n    ...\n                    \n\n",
  "acc_function": "### acc_function (string)\n\nSpecifies the accounting function to be used. Just by defining this\nparameter, the accounting is not done automatically, it has to be\nrequested via parameters of `set_accept_filter()` or other scripting\nfunction.\n\nSet it to empty string in order to disable binding to acc module.\n\nIts values may be:\n\n- *acc_log_request*\n\n- *acc_db_request*\n\n- *acc_request*\n\n*The default value is \u201cacc_log_request\u201d.*\n\n    ...\n    modparam(\"uac_redirect\",\"acc_function\",\"acc_db_request\")\n    ...\n                    \n\n",
  "acc_db_table": "### acc_db_table (string)\n\nSpecifies the accounting table to be used if DB accounting was chosen\n(`acc_function` was set to \u201cacc_db_request\u201d or \u201cacc_request\u201d).\n\n*The default value is \u201cacc\u201d.*\n\n    ...\n    modparam(\"uac_redirect\",\"acc_db_table\",\"acc_redirect\")\n    ...\n                    \n\n",
  "bflags": "### bflags (int)\n\nThis parameter defines the branch-flags to be set for new, added branch.\n\n*This parameter is optional, it's default value being 0.*\n\n    ...\n    modparam(\"uac_redirect\",\"bflags\", 1)\n    ...\n\n    branch_route[1] {\n        if (isbflagset(1)) {\n            log(1, \"This branch comes from a 302 Forward Request.\\n\");\n        } else {\n            log(1, \"This is a regular branch.\\n\");\n        }\n    }\n                    \n\n",
  "flags_hdr_mode": "### flags_hdr_mode (int)\n\nSpecifies if and how a Contact's flags header parameter must be used. If\nset, and a flags header parameter is set, its value will be set as\nbranch flags for that contact.\n\nIts values may be:\n\n- *0* - ignore flags header parameter, just use bflags module parameter\n\n- *1* - use flags header parameter if present, ignore bflags module\n  parameter\n\n- *2* - use flags header parameter if present and merge (binary or) it\n  with the bflags module parameter\n\n*The default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"uac_redirect\",\"flags_hdr_mode\",2)\n    ...\n                    \n\n",
  "q_value": "### q_value (int)\n\nSpecifies the q-value to assign to contacts without one. Because\nKamailio doesn't support float parameter types, the value in the\nparameter is divided by 1000 and stored as float. For example, if you\nwant q value to be 0.38, use value 380 here.\n\n*The default value is 10 (0.01).*\n\n    ...\n    modparam(\"uac_redirect\",\"q_value\",0)\n    ...\n                    \n\n"
 },
 "call_control": {},
 "log_custom": {},
 "uid_gflags": {
  "initial": "### initial (integer)\n\nThe initial value of global flags. Each bit in the integer represents\none flag.\n\nDefault value is 0.\n\n"
 },
 "websocket": {
  "keepalive_mechanism": "### keepalive_mechanism (integer)\n\nThe keep-alive mechanism to use for WebSocket connections.\n\n<div class=\"note\">\n\nIf *nathelper* is only being used for WebSocket connections then\n*nathelper NAT pinging* is not required. If *nathelper* is used for\nWebSocket connections and TCP/TLS aliasing/NAT-traversal then WebSocket\nkeep-alives are not required.\n\n</div>\n\n- 0 - no WebSocket keep-alives\n\n- 1 - Ping WebSocket keep-alives\n\n- 2 - Pong WebSocket keep-alives\n\n*Default value is 1.*\n\n    ...\n    modparam(\"websocket\", \"keepalive_mechanism\", 0)\n    ...\n\n",
  "keepalive_timeout": "### keepalive_timeout (integer)\n\nThe time (in seconds) after which to send a keep-alive on idle WebSocket\nconnections.\n\n*Default value is 180.*\n\n    ...\n    modparam(\"websocket\", \"keepalive_timeout\", 30)\n    ...\n\n",
  "keepalive_processes": "### keepalive_processes (integer)\n\nThe number of processes to start to perform WebSocket connection\nkeep-alives.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"websocket\", \"keepalive_processes\", 2)\n    ...\n\n",
  "keepalive_interval": "### keepalive_interval (integer)\n\nThe number of seconds between each keep-alive process run\n\n*Default value is 1.*\n\n    ...\n    modparam(\"websocket\", \"keepalive_interval\", 2)\n    ...\n\n",
  "ping_application_data": "### ping_application_data (string)\n\nThe application data to use in keep-alive Ping and Pong frames.\n\n*Default value is Kamailio Server: header content*\n\n    ...\n    modparam(\"websocket\", \"ping_application_data\", \"WebSockets rock\")\n    ...\n\n",
  "sub_protocols": "### sub_protocols (integer)\n\nA bitmap that allows you to control the sub-protocols supported by the\nWebSocket server.\n\n- *1* - sip (RFC 7118)\n\n- *2* - msrp (RFC 7977) - the msrp module must be loaded before the\n  websocket module\n\n*Default value is 1 when msrp module is not loaded, 3 when msrp module\nis loaded.*\n\n    ...\n    modparam(\"websocket\", \"sub_protocols\", 2)\n    ...\n\n",
  "cors_mode": "### cors_mode (integer)\n\nThis parameter lets you set the \"Cross-origin resource sharing\"\nbehaviour of the WebSocket server.\n\n- *0* - Do not add an \"Access-Control-Allow-Origin:\" header to the\n  response accepting the WebSocket handshake.\n\n- *1* - Add an \"Access-Control-Allow-Origin: \\*\" header to the response\n  accepting the WebSocket handshake.\n\n- *2* - Add an \"Access-Control-Allow-Origin:\" header containing the same\n  body as the \"Origin:\" header from the request to the response\n  accepting the WebSocket handshake. If there is no \"Origin:\" header in\n  the request no header will be added to the response.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"websocket\", \"cors_mode\", 2)\n    ...\n\n",
  "verbose_list": "### verbose_list (int)\n\nAllows to enable/disable the printing of debug messages when getting the\nlist of websocket connections. If enabled, it prints debug messages\nevery second for ping operations.\n\n*Default value is 0 (disabled).*\n\n    ...\n    modparam(\"websocket\", \"verbose_list\", 1)\n    ...\n\n",
  "event_callback": "### event_callback (str)\n\nThe name of the function in the kemi configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[...\\] blocks specific for websocket module.\n\nThe function has one string parameter, the value is the name of the\nevent_route block, respectively \"websocket:closed\".\n\n*Default value is 'empty' (no function is executed for events).*\n\n    ...\n    modparam(\"websocket\", \"event_callback\", \"ksr_websocket_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_websocket_event(evname)\n        KSR.info(\"===== websocket module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n    ...\n\n",
  "timer_interval": "### timer_interval (integer)\n\nThe number of seconds between each timer process run\n\n*Default value is 1.*\n\n    ...\n    modparam(\"websocket\", \"timer_interval\", 5)\n    ...\n\n",
  "rm_delay_interval": "### rm_delay_interval (integer)\n\nThe number of seconds to wait before destroying the websocket connection\nonce put in remove state.\n\n*Default value is 5.*\n\n    ...\n    modparam(\"websocket\", \"rm_delay_interval\", 2)\n    ...\n\n"
 },
 "http_client": {
  "httpredirect": "### httpredirect (int)\n\nIf set to 1, enabled, http_client will follow HTTP 302 Redirects. If set\nto 0, http_client will not follow redirects. Default is 1, enabled.\n\nThe latest redirect URL will be stored in the *\\$curlredirect*\npseudovariable.\n\n    ...\n    modparam(\"http_client\", \"httpredirect\", 0)\n    ...\n                    \n\n",
  "httpproxy": "### httpproxy (string)\n\nURL for a HTTP proxy to use as a default proxy for all connections.\n\nThis setting is also available on a per connection basis in the\nhttp_client configuration file.\n\n    ...\n    modparam(\"http_client\", \"httpproxy\", \"https://superproxy.example.com\")\n    ...\n                    \n\n",
  "httpproxyport": "### httpproxyport (string)\n\nPort number for a HTTP proxy to use as a default proxy port for all\nconnections.\n\nThis setting is also available on a per connection basis in the\nhttp_client configuration file.\n\n    ...\n    modparam(\"http_client\", \"httpproxyport\", 8042)\n    ...\n                    \n\n",
  "useragent": "### useragent (string)\n\nUseragent to use in the HTTP protocol for requests. Defaults to the\nKamailio SIP useragent string - including software version and platform.\n\n    ...\n    modparam(\"http_client\", \"useragent\", \"Secret HTTP REST grabber 0.42\")\n    ...\n                    \n\n",
  "maxdatasize": "### maxdatasize (int)\n\nDefines the maximum size in bytes for a response. Note that this is\nallocated from pkg memory (process memory) dynamically.\n\n*Default value is zero, i.e., the limit on the datasize is disabled.*\n\n    ...\n    modparam(\"http_client\", \"maxdatasize\", 2000)\n    ...\n                    \n\n",
  "connection_timeout": "### connection_timeout (int)\n\nDefines in seconds how long Kamailio waits for response from servers.\n\n*Default value is zero, i.e., the timeout function is disabled.*\n\n    ...\n    modparam(\"http_client\", \"connection_timeout\", 2)\n    ...\n                    \n\n",
  "client_cert": "### client_cert (string)\n\nFile name for a TLS client certificate. The certificate needs to be\nencoded in PEM format.\n\n*Default value is empty string, i.e. no client certificate used. Note\nthat if you specify a client cert, you also need to specify the\n`client_key`.*\n\n    ...\n    modparam(\"http_client\", \"client_cert\", \"/var/certs/sollentuna.example.com.cert\")\n    ...\n                    \n\n",
  "client_key": "### client_key (string)\n\nFile name for a TLS client key. The key needs to be encoded in PEM\nformat.\n\n*Default value is empty string, i.e. no client certificate or key is\nused. Note that if you specify a client key, you also need to specify\nthe `client_cert`.*\n\n    ...\n    modparam(\"http_client\", \"client_key\", \"/var/certs/sollentuna.example.com.key\")\n    ...\n                    \n\n",
  "cacert": "### cacert (string)\n\nFile name for the trusted TLS CA cert used to verify servers. The\ncertificates need to be encoded in PEM format.\n\n*Default value is empty string, i.e. no CA certificate is used to verify\nthe host. If `tlsverifyhost` is on, all TLS connections will fail\nwithout any CA certificate to validate with.*\n\n    ...\n    modparam(\"http_client\", \"cacert\", \"/var/certs/ca/edvina-sip-ca.pem\")\n    ...\n                    \n\n",
  "cipher_suites": "### cipher_suites (string)\n\nList of allowed cipher suites. See\nhttp://curl.haxx.se/libcurl/c/CURLOPT_SSL_CIPHER_LIST.html for details\nof the cipher list curl option.\n\n*Default value is empty string, i.e. the default list of ciphers in\nlibcurl will be used.*\n\n    ...\n    modparam(\"http_client\", \"cipher_suites\", \"ecdhe_ecdsa_aes_128_gcm_sha_256,rsa_aes_128_gcm_sha_256\")\n    ...\n                    \n\n",
  "verify_peer": "### verify_peer (int)\n\nIf set to 0, TLS verification of the server certificate is disabled.\nThis means that the connection will get encrypted, but there's no\nauthentication. There's no proof that the transmission of data is to the\nhost that is meant to receive data.\n\nIf set to 1, default setting, and one or more CA certificates is\nconfigured, the server TLS certificate will be validated. If validation\nfails, the connection fails.\n\nSee the curl documentation for more details.\nhttp://curl.haxx.se/libcurl/c/CURLOPT_SSL_VERIFYPEER.html\n\n    ...\n    modparam(\"http_client\", \"verify_peer\", 1)\n    ...\n                    \n\n",
  "verify_host": "### verify_host (int)\n\nIf set to 0, domain verification of the server certificate is disabled.\nThis means that the connection will get encrypted but there is no check\nthat data will be sent to the host that is meant to receive it. Disable\nwith caution.\n\nIf set to 2, default setting, the hostname in the URL will be verified\nagainst the Common Name or Subject Alt Name in the certificate. If\nvalidation fails, the connection fails.\n\nSee the curl documentation for more details.\nhttp://curl.haxx.se/libcurl/c/CURLOPT_SSL_VERIFYHOST.html\n\n    ...\n    modparam(\"http_client\", \"verify_host\", 2)\n    ...\n                    \n\n",
  "tlsversion": "### tlsversion (int)\n\nSets the preferred TLS/SSL version.\n\nValid values are:\n\n- 0 - Use libcurl default\n\n- 1 - \"TLSv1\"\n\n- 2 - \"SSLv2\"\n\n- 3 - \"SSLv3\"\n\n- 4 - \"TLSv1.0\"\n\n- 5 - \"TLSv1.1\"\n\n- 6 - \"TLSv1.2\"\n\nSSL versions are now disabled by default. See the curl documentation for\nmore details. http://curl.haxx.se/libcurl/c/CURLOPT_SSLVERSION.html\n\n    ...\n    modparam(\"http_client\", \"tlsversion\", 6)\n    ...\n                    \n\n",
  "authmethod": "### authmethod (int)\n\nSets the preferred authentication mode for HTTP/HTTPS requests. The\nvalue is a bitmap and multiple methods can be used. Note that in this\ncase, the CURL library will make an extra request to discover\nserver-supported authentication methods. You may want to use a specific\nvalue.\n\nValid values are:\n\n- 1 - BASIC authentication\n\n- 2 - HTTP Digest authentication\n\n- 4 - GSS-Negotiate authentication\n\n- 8 - NTLM authentication\n\n- 16 - HTTP Digest with IE flavour\n\nDefault value is 3 - BASIC and Digest authentication.\n\nThis is also configurable per connection in the http_client\nconfiguration file.\n\n    ...\n    # Use the best of BASIC and Digest authentication.\n    modparam(\"http_client\", \"authmethod\", 3)\n    ...\n                    \n\n",
  "keep_connections": "### keep_connections (int)\n\nIf an HTTP server is accessed multiple times keeping the connection open\nfor reuse saves a significant amount of time, especially if TLS is used.\nIf this function is enabled, the Curl library will try to reuse existing\nopen connections. The HTTP server will have to support this feature and\nkeep connections open for it to work properly.\n\nValid values are:\n\n- 0 - Close connections after request (default)\n\n- 1 - Reuse connections\n\nThis is also configurable per connection in the http_client\nconfiguration file.\n\n    ...\n    modparam(\"http_client\", \"keep_connections\", 1)\n    ...\n                    \n\n",
  "query_result": "### query_result (int)\n\nControl what is returned by the http_client_query(...) in the result\nvariable.\n\nValid values are:\n\n- 0 - Return the entire HTTP result body\n\n- 1 - Return the first line from HTTP result body\n\nDefault value: 1 (return first line).\n\n    ...\n    modparam(\"http_client\", \"query_result\", 0)\n    ...\n                    \n\n",
  "query_maxdatasize": "### query_maxdatasize (int)\n\nControl the size in bytes of the data to be returned by the\nhttp_client_query(...) in the result variable.\n\nDefault value: 0 (disabled, unlimited size).\n\n    ...\n    modparam(\"http_client\", \"query_maxdatasize\", 2048)\n    ...\n                    \n\n",
  "httpcon": "### httpcon (string)\n\nDefines a connection and credentials for the connection for use in a\nconnection-oriented function call in this module.\n\n*Syntax:*\n\\<connection-name\\>=\\>\\<schema\\>://\\[\\<username\\>:\\<password\\>@\\]\\<hostname/address\\>\\[;param=value\\]\n\nThe address in the URL is the base for the URL in the `http_connect()`\ncall. The address given in the function call will be appended to the\nbase URL in the connection definition.\n\nThe HTTP connection will be defined using default values in modparam's\nabove the definition of the httpcon in the configuration file. Also note\nthat connections can be defined in a separate text file if you have many\nparameters per connection, or want to use a per-connection setting that\ncan be set in that file but not in the httpcon modparam, like\nauthmethod.\n\n*By default, no connections are defined.*\n\nParameters\n\n- *useragent* Useragent used for HTTP requests. Overrides useragent\n  modparam.\n\n- *verify_peer* Set to 1 to enable or 0 to disable server certificate\n  verification. Overrides verify_peer modparam.\n\n- *verify_host* Set to 2 to enable or 0 to disable server hostname\n  verification. Overrides verify_host modparam.\n\n- *client_cert* Client certificate used for this connection. Overrides\n  the default client_cert modparam.\n\n- *client_key* Client key used for this connection. Overrides the\n  default client_key modparam.\n\n- *cipher_suites* Client certificate used for this connection. Overrides\n  the default cipher_suite modparam.\n\n- *timeout* Timeout used for this connection. Overrides the default\n  connection_timeout for the module.\n\n- *tlsversion* TLS version used for this connection. Overrides the\n  default tlsversion for the module.\n\n- *maxdatasize* The maximum datasize for a response. Overrides the\n  maxdatasize modparam setting.\n\n- *httpredirect* Set to 1 for following HTTP 302 redirect. 0 to disable.\n  Overrides the default httpredirect modparam.\n\n- *failover* The name of another *httpcon* connection to use with the\n  same arguments in case a connection with this http_con fails. Failure\n  is either a connection failure or a response code of 500 or above.\n\n<!-- -->\n\n    ...\n    modparam(\"http_client\", \"httpcon\", \"apione=>http://atlanta.example.com\")\n    modparam(\"http_client\", \"httpcon\", \"apitwo=>http://atlanta.example.com/api/12\")\n    modparam(\"http_client\", \"httpcon\", \"apithree=>http://annabella:mysecret@atlanta.example.com/api/12\")\n    modparam(\"http_client\", \"httpcon\", \"apifour=>http://stockholm.example.com/api/getstuff;timeout=12;failover=apione\")\n    ...\n                    \n\n",
  "config_file": "### config_file (string)\n\nThe file name of a configuration file containing definitions of http\nconnections. This is an alternative to the \"httpcon\" module parameter -\nespecially when the number of options per line gets too big.\n\nIf the file or directory name starts with a '.' the path will be\nrelative to the working directory (*at runtime*). If it starts with a\n'/' it will be an absolute path and if it starts with anything else the\npath will be relative to the main config file directory (e.g.: for\nkamailio -f /etc/kamailio/kamailio.cfg it will be relative to\n/etc/kamailio/).\n\nThe following parameters can be set in the config file, for each\nconnection. If a parameter is not specified, the default values set by\nthe modparams will be used.\n\n- url\n\n- username\n\n- password\n\n- authmethod\n\n- keep_connections\n\n- useragent\n\n- verify_peer\n\n- verify_host\n\n- client_cert\n\n- client_key\n\n- cipher_suites\n\n- tlsversion - Valid values are:\n\n  - \"DEFAULT\"\n\n  - \"TLSv1\"\n\n  - \"SSLv22\n\n  - \"SSLv3\"\n\n  - \"TLSv1.0\"\n\n  - \"TLSv1.1\"\n\n  - \"TLSv1.2\"\n\n- timeout\n\n- maxdatasize\n\n- http_follow_redirect\n\n- httpproxy\n\n- httpproxyport\n\n- failover\n\nSee the \"httpcon\" module parameter for explanation of these settings.\n\nBy default no config file is specified.\n\nAll the parameters that take filenames as values will be resolved using\nthe same rules as for the tls config filename itself: starting with a\n'.' means relative to the working directory, a '/' means an absolute\npath and anything else a path relative to the directory of the current\nKamailio main config file.\n\nTo set a string value to null, in order to override default settings,\nyou can specify a value of \"\" - two quotation marks. In order to disable\na http proxy setting you can set the port to zero.\n\n    ...\n    modparam(\"http_client\", \"config_file\", \"httpconnections.cfg)\n    ...\n                    \n\n    [authapiserver]\n    url = https://api.runbo.example.com/v4.2/auth\n    timeout = 1\n    maxdatasize = 4\n    tlsversion = TLSv1.2\n    verify_peer = yes\n    client_key = default_key.pem\n    client_cert = default_cert.pem\n    http_follow_redirect = no\n\n        \n\n",
  "netinterface": "### netinterface (string)\n\nSet local network interface to be used for HTTP queries. It can be\ninterface name or IP address. For more details see:\nhttps://curl.haxx.se/libcurl/c/CURLOPT_INTERFACE.html .\n\n*Default value not set.*\n\n    ...\n    modparam(\"http_client\", \"netinterface\", \"eth0\")\n    ...\n                    \n\n"
 },
 "rtpproxy": {
  "rtpproxy_sock": "### rtpproxy_sock (string)\n\nUsed to define the list of RTPProxy instances to connect to. These can\nbe UNIX sockets or IPv4/IPv6 UDP sockets. Each modparam entry will\ninsert sockets into a single set. If no set ID is given, the default set\nID '0' will be used. To define multiple sets add the set number at the\nbeginning of each parameter followed by '=='. Sockets can be weighted by\nadding '=#' to a socket where \\# is an integer. A socket with a weight\nof 2 will be chosen twice as often as one with a weight of 1.\n\n*Default value is \u201cNONE\u201d (disabled).*\n\n    ...\n    # single rtproxy\n    modparam(\"rtpproxy\", \"rtpproxy_sock\", \"udp:localhost:12221\")\n\n    # multiple rtproxies for LB\n    modparam(\"rtpproxy\", \"rtpproxy_sock\",\n        \"udp:localhost:12221 udp:localhost:12222\")\n\n    # multiple sets of multiple rtproxies\n    modparam(\"rtpproxy\", \"rtpproxy_sock\",\n        \"1 == udp:localhost:12221 udp:localhost:12222\")\n    modparam(\"rtpproxy\", \"rtpproxy_sock\",\n        \"2 == udp:localhost:12225\")\n    ...\n\n",
  "rtpproxy_disable_tout": "### rtpproxy_disable_tout (integer)\n\nOnce RTPProxy was found unreachable and marked as disabled, the rtpproxy\nmodule will not attempt to establish communication to RTPProxy for\nrtpproxy_disable_tout seconds.\n\n*Default value is \u201c60\u201d.*\n\n    ...\n    modparam(\"rtpproxy\", \"rtpproxy_disable_tout\", 20)\n    ...\n\n",
  "rtpproxy_tout": "### rtpproxy_tout (integer)\n\nTimeout value in waiting for reply from RTPProxy.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"rtpproxy\", \"rtpproxy_tout\", 2)\n    ...\n\n",
  "rtpproxy_retr": "### rtpproxy_retr (integer)\n\nHow many times the module should retry to send and receive after timeout\nwas generated.\n\n*Default value is \u201c5\u201d.*\n\n    ...\n    modparam(\"rtpproxy\", \"rtpproxy_retr\", 2)\n    ...\n\n",
  "nortpproxy_str": "### nortpproxy_str (string)\n\nThis parameter sets the SDP attribute used by rtpproxy to mark the\nmessage's SDP attachment with information that it have already been\nchanged.\n\nIf empty string, no marker will be added or checked.\n\n<div class=\"note\">\n\nThe string must be a complete SDP line, including the EOH (\\r\\n).\n\n</div>\n\n*Default value is \u201ca=nortpproxy:yes\\r\\n\u201d.*\n\n    ...\n    modparam(\"rtpproxy\", \"nortpproxy_str\", \"a=sdpmangled:yes\\r\\n\")\n    ...\n\n",
  "timeout_socket": "### timeout_socket (string)\n\nThe parameter sets the RTP timeout socket, which is transmitted to the\nRTP-Proxy. It will be used by the RTP proxy to signal back that a media\nstream timed out.\n\nIf it is an empty string, no timeout socket will be transmitted to the\nRTP-Proxy.\n\n*Default value is \u201c\u201d (nothing).*\n\n    ...\n    modparam(\"rtpproxy\", \"timeout_socket\", \"xmlrpc:http://127.0.0.1:8000/RPC2\")\n    ...\n\n",
  "ice_candidate_priority_avp": "### ice_candidate_priority_avp (string)\n\nIf specified and if value of the avp value is not 0, `rtpproxy_manage`\nfunction adds ICE relay candidate attributes to sdp stream(s) containing\nICE candidate attributes.\n\nIf value of the avp is 1, added candidates have high priority. If value\nof the avp is 2 (default), added candidates have low priority.\n\n*There is no default value meaning that no ICE relay candidates are\nadded in any circumstance.*\n\n    ...\n    modparam(\"rtpproxy\", \"ice_candidate_priority_avp\", \"$avp(ice_priority)\")\n    ...\n\n",
  "extra_id_pv": "### extra_id_pv (string)\n\nThe parameter sets the PV definition to use when the \u201cb\u201d parameter is\nused on unforce_rtp_proxy(), rtpproxy_offer(), rtpproxy_answer() or\nrtpproxy_manage() command.\n\nDefault is empty, the \u201cb\u201d parameter may not be used then.\n\n    ...\n    modparam(\"rtpproxy\", \"extra_id_pv\", \"$avp(extra_id)\")\n    ...\n\n",
  "db_url": "### db_url (string)\n\nThe database URL to load rtp_proxy sets from. If this parameter is set,\nthe module will attempt to load the rtpproxy sets from the specified\ndatabase and will ignore any 'rtpproxy_sock' modparams.\n\nDefault is empty, a database will not be used.\n\n    ...\n    modparam(\"rtpproxy\", \"db_url\", \"mysql://user:passwb@localhost/database\")\n    ...\n\n",
  "table_name": "### table_name (string)\n\nThe name of the table containing the rtpproxy sets.\n\nDefault value is \u201crtpproxy\u201d.\n\n    ...\n    modparam(\"rtpproxy\", \"table_name\", \"my_rtpp_sets\")\n    ...\n\n",
  "rtp_inst_pvar": "### rtp_inst_pvar (string)\n\nA pseudo variable to store the chosen RTPProxy address. If this\nparameter is set, the instance URL will be stored in the given variable.\n\nBy default, this parameter is not set.\n\n    ...\n    modparam(\"rtpproxy\", \"rtp_inst_pvar\", \"$avp(RTP_INSTANCE)\")\n    ...\n\n    modparam(\"rtpproxy\", \"rtpproxy_sock\",\n        \"udp:localhost:12221 udp:localhost:12222\")\n    modparam(\"rtpproxy\", \"rtp_inst_pvar\", \"$var(RTP_INSTANCE)\")\n    ...\n    rtpproxy_manage(\"eiro\");\n    xlog(\"L_INFO\", \"Chose rtpp instance $var(RTP_INSTANCE)\\n\");\n    # This will display 'udp:localhost:12222'\n    ...\n\n"
 },
 "tls_wolfssl": {},
 "usrloc": {
  "nat_bflag": "### nat_bflag (int)\n\nThe index of the branch flag to be used as NAT marker (if the contact is\nor not natted). This is a branch flag and it will be imported and used\nby all other modules depending of usrloc module.\n\n*Default value is \u201cnot set\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"nat_bflag\", 3)\n    ...\n\n",
  "user_column": "### user_column (string)\n\nName of database column containing usernames.\n\n*Default value is \u201cusername\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"user_column\", \"username\")\n    ...\n\n",
  "domain_column": "### domain_column (string)\n\nName of database column containing domains.\n\n*Default value is \u201cdomain\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"domain_column\", \"domain\")\n    ...\n\n",
  "contact_column": "### contact_column (string)\n\nName of database column containing contacts.\n\n*Default value is \u201ccontact\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"contact_column\", \"contact\")\n    ...\n\n",
  "expires_column": "### expires_column (string)\n\nName of database column containing expires value.\n\n*Default value is \u201cexpires\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"expires_column\", \"expires\")\n    ...\n\n",
  "q_column": "### q_column (string)\n\nName of database column containing q values.\n\n*Default value is \u201cq\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"q_column\", \"q\")\n    ...\n\n",
  "callid_column": "### callid_column (string)\n\nName of database column containing Call-ID values.\n\n*Default value is \u201ccallid\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"callid_column\", \"callid\")\n    ...\n\n",
  "cseq_column": "### cseq_column (string)\n\nName of database column containing Cseq.\n\n*Default value is \u201ccseq\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"cseq_column\", \"cseq\")\n    ...\n\n",
  "methods_column": "### methods_column (string)\n\nName of database column containing supported methods.\n\n*Default value is \u201cmethods\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"methods_column\", \"methods\")\n    ...\n\n",
  "flags_column": "### flags_column (string)\n\nName of database column to save the internal flags of the record.\n\n*Default value is \u201cflags\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"flags_column\", \"flags\")\n    ...\n\n",
  "cflags_column": "### cflags_column (string)\n\nName of database column to save the branch/contact flags of the record.\n\n*Default value is \u201ccflags\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"cflags_column\", \"cflags\")\n    ...\n\n",
  "user_agent_column": "### user_agent_column (string)\n\nName of database column containing user-agent values.\n\n*Default value is \u201cuser_agent\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"user_agent_column\", \"user_agent\")\n    ...\n\n",
  "received_column": "### received_column (string)\n\nName of database column containing the source IP, port, and protocol\nfrom the REGISTER message.\n\n*Default value is \u201creceived\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"received_column\", \"received\")\n    ...\n\n",
  "socket_column": "### socket_column (string)\n\nName of database column containing the received socket information\n(IP:port) for the REGISTER message.\n\n*Default value is \u201csocket\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"socket_column\", \"socket\")\n    ...\n\n",
  "path_column": "### path_column (string)\n\nName of database column containing the Path header.\n\n*Default value is \u201cpath\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"path_column\", \"path\")\n    ...\n\n",
  "ruid_column": "### ruid_column (string)\n\nName of database column containing the Kamailio record unique id.\n\n*Default value is \u201cruid\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"ruid_column\", \"myruid\")\n    ...\n\n",
  "instance_column": "### instance_column (string)\n\nName of database column containing the SIP instance ID (GRUU - RFC5627).\nThis is a unique device identifier - UUID.\n\n*Default value is \u201cinstance\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"instance_column\", \"myinstance\")\n    ...\n\n",
  "reg_id_column": "### reg_id_column (string)\n\nName of database table column containing the value for reg-id.\n\n*Default value is \u201creg_id\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"reg_id_column\", \"r_id\")\n    ...\n\n",
  "server_id_column": "### server_id_column (string)\n\nName of database table column containing the value for server id.\n\n*Default value is \u201cserver_id\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"server_id_column\", \"srv_id\")\n    ...\n\n",
  "connection_id_column": "### connection_id_column (string)\n\nName of database table column containing the value for connection id.\n\n*Default value is \u201cconnection_id\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"connection_id_column\", \"con_id\")\n    ...\n\n",
  "keepalive_column": "### keepalive_column (string)\n\nName of database table column containing the value for keepalive status.\n\n*Default value is \u201ckeepalive\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"keepalive_column\", \"kalive\")\n    ...\n\n",
  "partition_column": "### partition_column (string)\n\nName of database table column containing the value for partition id.\n\n*Default value is \u201cpartition\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"partition_column\", \"part\")\n    ...\n\n",
  "use_domain": "### use_domain (int)\n\nIf the domain part of the user should be also saved and used for\nidentifying the user (along with the username part). Useful in multi\ndomain scenarios. Non 0 value means true.\n\n*Default value is \u201c0 (false)\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"use_domain\", 1)\n    ...\n\n",
  "desc_time_order": "### desc_time_order (int)\n\nIf the user's contacts should be kept timestamp ordered; otherwise the\ncontact will be ordered based on q value. Non 0 value means true.\n\n*Default value is \u201c0 (false)\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"desc_time_order\", 1)\n    ...\n\n",
  "timer_interval": "### timer_interval (int)\n\nNumber of seconds between two timer runs. The module uses a timer to\ndelete expired contacts, synchronize with database, send keepalives and\nother tasks, that need to be run periodically.\n\n*Default value is 60.*\n\n    ...\n    modparam(\"usrloc\", \"timer_interval\", 120)\n    ...\n\n",
  "db_url": "### db_url (string)\n\nURL of the database that should be used.\n\n*Default value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "db_mode": "### db_mode (int)\n\nThe usrloc module can utilize a database for persistent contact storage.\nIf a database is used, the location database (contacts) will survive\nmachine restarts or software crashes. The disadvantage is that accessing\na database can be very time consuming. Therefore, usrloc module\nimplements four database accessing modes:\n\n- 0 - This disables database completely. Only memory will be used.\n  Contacts will not survive restart. Use this value if you need a really\n  fast usrloc and contact persistence is not necessary or is provided by\n  other means.\n\n- 1 - Write-Through scheme. All changes to usrloc are immediately\n  reflected in database too. This is very slow, but very reliable. Use\n  this scheme if speed is not your priority but need to make sure that\n  no registered contacts will be lost during crash or reboot.\n\n- 2 - Write-Back scheme. This is a combination of previous two schemes.\n  All changes are made to memory and database synchronization is done in\n  the timer. The timer deletes all expired contacts and flushes all\n  modified or new contacts to database. Use this scheme if you encounter\n  high-load peaks and want them to process as fast as possible. The mode\n  will not help at all if the load is high all the time. Also, latency\n  of this mode is much lower than latency of mode 1, but slightly higher\n  than latency of mode 0.\n\n- 3 - DB-Only scheme. No memory cache is kept, all operations being\n  directly performed with the database. The timer deletes all expired\n  contacts from database - cleans after clients that didn't un-register\n  or re-register. The mode is useful if you configure more servers\n  sharing the same DB without any replication at SIP level. The mode may\n  be slower due the high number of DB operation. For example NAT pinging\n  is a killer since during each ping cycle all natted contact are loaded\n  from the DB; The lack of memory caching also disable the statistics\n  exports.\n\n- 4 - This uses database to load records at startup but uses only memory\n  during the runtime. Records are not written back at all, not even at\n  shutdown. Useful for scenarios when registrations are replicated to a\n  node that does the storage in a database during runtime.\n\n<div class=\"warning\">\n\nIn case of crash or restart contacts that are in memory only and haven't\nbeen flushed yet will get lost. If you want minimize the risk, use\nshorter timer interval.\n\n</div>\n\n*Default value is 0.*\n\n    ...\n    modparam(\"usrloc\", \"db_mode\", 2)\n    ...\n\n",
  "db_load": "### db_load (int)\n\nDetermine if the usrloc module should load contacts from the database\nstorage during module initialization. A value of 0 disables the loading\nfrom the database, this parameter is ignored if db_mode 4 is set.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"usrloc\", \"db_load\", 0)\n    ...\n            \n\n",
  "db_insert_update": "### db_insert_update (int)\n\nDetermine if the usrloc module should do an update when a duplicate key\nis found while inserting A value of 1 will activate update on duplicate\nkey\n\n*Default value is 0.*\n\n    ...\n    modparam(\"usrloc\", \"db_insert_update\", 1)\n    ...\n            \n\n",
  "matching_mode": "### matching_mode (int)\n\nWhat contact matching algorithm to be used. Refer to section\n[???](#contact-matching-algs) for the description of the algorithms.\n\nThe parameter may take the following values:\n\n- *0* - CONTACT ONLY based matching algorithm.\n\n- *1* - CONTACT and CALLID based matching algorithm.\n\n- *2* - CONTACT and PATH based matching algorithm. This mode is like\n  mode *0* but allows for duplicate contacts from differing paths. If no\n  path is available, it defaults to mode 0.\n\n- *3* - CALLID only based matching algorithm. This mode will discard any\n  duplicate registration coming through different paths.\n\n*Default value is *0 (CONTACT_ONLY)*.*\n\n    ...\n    modparam(\"usrloc\", \"matching_mode\", 1)\n    ...\n\n",
  "cseq_delay": "### cseq_delay (int)\n\nDelay (in seconds) for accepting as retransmissions register requests\nwith same Call-ID and Cseq. The delay is calculated starting from the\nreceiving time of the first register with that Call-ID and Cseq.\n\nRetransmissions within this delay interval will be accepted and replied\nas the original request, but no update will be done in location. If the\ndelay is exceeded, error is reported.\n\nA value of 0 disable the retransmission detection.\n\n*Default value is \u201c20 seconds\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"cseq_delay\", 5)\n    ...\n\n",
  "fetch_rows": "### fetch_rows (int)\n\nThe number of the rows to be fetched at once from database when loading\nthe location records. This value can be used to tune the load time at\nstartup. For 1MB of private memory (default) it should be below 4000.\nThe database driver must support fetch_result() capability.\n\n*Default value is \u201c2000\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"fetch_rows\", 3000)\n    ...\n\n",
  "hash_size": "### hash_size (int)\n\nThe number of entries of the hash table used by usrloc to store the\nlocation records is 2^hash_size. For hash_size=4, the number of slots of\nthe hash table is 16.\n\n*Default value is \u201c10\u201d (1024 slots).*\n\n    ...\n    modparam(\"usrloc\", \"hash_size\", 12)\n    ...\n\n",
  "preload": "### preload (string)\n\nPreload location table given as value. A location table is loaded based\non fixup of registrar functions, therefore you need to use this\nparameter only to load tables that are not used by registrar module\ndirectly in configuration file.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"preload\", \"location\")\n    ...\n\n",
  "db_update_as_insert": "### db_update_as_insert (int)\n\nSet this parameter if you want to do INSERT DB operations instead of\nUPDATE DB operations. It is recommended to set this parameter if you use\nCassandra as a DB backend.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"db_update_as_insert\", 1)\n    ...\n\n",
  "db_check_update": "### db_check_update (int)\n\nSet this parameter to 1 if you want to do DB INSERT if the number of\naffected rows by contact DB UPDATE operation is 0. The database module\ndriver has to implement affected_rows() DB API function, otherwise this\nparameter is ignored - e.g., MySQL and Postgres DB connectors offer\naffected_rows().\n\n*Default value is \u201c0\u201d (no DB INSERT).*\n\n    ...\n    modparam(\"usrloc\", \"db_check_update\", 1)\n    ...\n\n",
  "timer_procs": "### timer_procs (int)\n\nNumber of timer processes to be started by module. Timer processes take\ncare of checking expired records and synchronization with database. If\nset to 0, no dedicated timer is started, the one from core will be used.\n\nIf the number of timer processes is greater than 1, the workload of\nsynchronization and record expiration is split up among the multiple\nprocesses. (Each process is assigned a range of slots from the internal\nhash table, and is responsible for cleanup and storage on those slots.)\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"timer_procs\", 4)\n    ...\n\n",
  "xavp_contact": "### xavp_contact (string)\n\nThe name of XAVP storing the attributes per contact. They are saved in\nlocation record and restored at lookup. The tm module parameter\n`xavp_contact` must also be set to the same value to use the\n`t_load_contacts` and `t_next_contacts` functions.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"tm|usrloc\", \"xavp_contact\", \"ulattrs\")\n    ...\n\n",
  "db_ops_ruid": "### db_ops_ruid (int)\n\nIf set to 1, database queries for update or delete are done using ruid\nvalue. If it is set to 0, the old style using aor, contact and call-id\nis done.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"db_ops_ruid\", 0)\n    ...\n\n",
  "handle_lost_tcp": "### handle_lost_tcp (int)\n\nIf set to 1, Kamailio will remove location records made via\nTCP/TLS/WS/WSS transports when it looses corresponding tcp connections.\nDoes not currently work in DB-Only scheme.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"handle_lost_tcp\", 1)\n    ...\n\n",
  "close_expired_tcp": "### close_expired_tcp (int)\n\nIf set to 1, Kamailio will close the TCP connection when a contact has\nexpired, if the corresponding transport is TCP/TLS/WS/WSS.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"close_expired_tcp\", 1)\n    ...\n\n",
  "expires_type": "### expires_type (int)\n\nIf set to 1, Kamailio expects to deal with BIGINT type on database\ncolumns for expires and last modified values. It allows to handle better\nthe daylight time adjustments. If set to 0, those columns are expected\nto be on default type 'DATETIME'. When it is 1, the database columns\ntypes have to be changed manually to 'BIGINT'.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"expires_type\", 1)\n    ...\n\n",
  "db_raw_fetch_type": "### db_raw_fetch_type (int)\n\nThis affect DB-only mode and controls what kind of raw query is used to\nfetch the contacts from database for specific needs (e.g., sending NAT\nkeepalives). If it is set to 0, then the common SQL query is used\n(working for MySQL, PostgreSQL, ...). If it is set to 1, the query\nrequired by Oracle is used.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"db_raw_fetch_type\", 1)\n    ...\n\n",
  "db_insert_null": "### db_insert_null (int)\n\nIf set to 1, the insert operation to database will add null values in\nthe statement. It has to be set to 1 for the database systems that do\nnot have table definitions that create automatically the null fields\n(e.g., db_mongodb) for each stored record.\n\nWhen set to 0, the fields that default to null are not added to the DB\ninsert statement if they don't have a different value, making the query\nsmaller.\n\n*Default value is \u201c0\u201d (don't add null fields in insert statement).*\n\n    ...\n    modparam(\"usrloc\", \"db_insert_null\", 1)\n    ...\n\n",
  "skip_remote_socket": "### skip_remote_socket (int)\n\nIf set to 1, Kamailio will skip location record when loading from\ndatabase, if socket value of the record does not in kamailio listening\nsocket list.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"skip_remote_socket\", 1)\n    ...\n\n",
  "db_timer_clean": "### db_timer_clean (int)\n\nEnable (1) or disable (0) cleaning of expired db records on timer basis\nfor db_mode WRITE-BACK and WRITE-THROUGH. It uses the secondary timer\nprocess.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"db_timer_clean\", 1)\n    ...\n\n",
  "rm_expired_delay": "### rm_expired_delay (int)\n\nSpecify the number of seconds to delay the removal of expired records.\nFor now it works for DB_ONLY mode (db_mode=3).\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"rm_expired_delay\", 30)\n    ...\n\n",
  "server_id_filter": "### server_id_filter (int)\n\nEnable (1) or disable (0) filter records by server_id on load and during\ncleaning of expired db records. It could be useful when you want to use\nthe same location table for several kamailio instances which are\nconfigured to work in db_mode=1 or db_mode=2 (cache modes). Otherwise\none instance of proxy cleans records made by another proxy and that\nbreaks its cache.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"usrloc\", \"server_id_filter\", 1)\n    ...\n\n",
  "version_table": "### version_table (int)\n\nIf set to 0, the module will skip checking the version for location\ntable.\n\nDefault value is \u201c1 (check for table version)\u201d.\n\n    ...\n    modparam(\"usrloc\", \"version_table\", 0)\n    ...\n            \n\n",
  "ka_mode": "### ka_mode (int)\n\nKeepalive mode - control the internal keepalive mechanism. With this\nfeature enabled, the module sends periodically (based on timer interval)\nSIP requests to location contacts and measures the round trip in\nmicroseconds (the round trip value can be seen in the response of the\nRPC command 'ul.dump').\n\nIts value is a set of flags:\n\n- 0 - if the value is zero, no keepalive is sent\n\n- 1 (bit 1 set) - if set to 1, the keepalive is enabled for all contacts\n\n- 2 (bit 2 set) - the keepalive is sent only for natted contacts\n  (nat_bflag set)\n\n- 4 (bit 3 set) - the keepalive is sent only for UDP contacts\n\nFor example, if set to 6, then keepalive is sent only natted UDP\ncontacts.\n\nNote: the internal keepalive of usrloc module conflicts in some way with\nthe keepalive done by nathelper module. It is recommended to enable only\none.\n\nNote: the internal keepalive is for the moment implemented only for\ncontact records stored in memory.\n\nNote: it is recommended to set 'timer_procs' parameter in order to have\ndedicated timer processes for usrloc module and off-load the keepalive\nsending process from the core timers.\n\nNote: Keepalives will be sent to the IP and port using the transport\ndefined in the \u201creceived\u201d column. If not set, then keepalives will be\nsent to the AOR using UDP as a default transport. If available, the TCP\nconnection will be re-used for WS, TCP and TLS.\n\nDefault value is \u201c0 (keepalive disabled)\u201d.\n\n    ...\n    modparam(\"usrloc\", \"ka_mode\", 1)\n    ...\n            \n\n",
  "ka_method": "### ka_method (str)\n\nThe SIP method type for keepalive requests.\n\nDefault value is \u201cOPTIONS\u201d.\n\n    ...\n    modparam(\"usrloc\", \"ka_method\", \"NOTIFY\")\n    ...\n            \n\n",
  "ka_from": "### ka_from (str)\n\nThe SIP URI to be set in the From header of the keepalive requests.\n\nDefault value is \u201csip:server@kamailio.org\u201d.\n\n    ...\n    modparam(\"usrloc\", \"ka_from\", \"sip:server@mydomain.com\")\n    ...\n            \n\n",
  "ka_domain": "### ka_domain (str)\n\nThe domain to be set in To header URI if the multi-domain is not\nenabled. If multi-domain is enabled, then the domain from the location\nrecord is used and this parameter is ignored.\n\nDefault value is \u201ckamailio.org\u201d.\n\n    ...\n    modparam(\"usrloc\", \"ka_domain\", \"mydomain.com\")\n    ...\n            \n\n",
  "ka_filter": "### ka_filter (int)\n\nSet filters for keepalive processing.\n\nIts value is a set of flags:\n\n- 0 - if the value is zero, no filter is enabled for keepalives\n\n- 1 (bit 1 set) - keepalives sent only to records matching the server_id\n  global parameter.\n\nDefault value is \u201c0\u201d (no filter).\n\n    ...\n    modparam(\"usrloc\", \"ka_filter\", 1)\n    ...\n            \n\n",
  "ka_timeout": "### ka_timeout (int)\n\nThe parameter sets the interval in seconds after which a contact is\nremoved from location table if it does not reply to SIP keepalives\n(usually OPTIONS ping requests).\n\nThe features is available only for contacts that are stored in memory\n(not working for db only mode of the usrloc module).\n\nKeepalives are sent stateless, not using TM module. The value of this\nparameter has to be few times higher than timer interval.\n\n*Default value is \u201c0\u201d (feature disabled).*\n\n    ...\n    modparam(\"usrloc\", \"ka_timeout\", 120)\n    ...\n\n",
  "ka_loglevel": "### ka_loglevel (int)\n\nThe level to print the log message when the keepalive response is\nreceived. It should be a value between -5 (L_ALERT) and 3 (L_DBG).\n\nDefault value is \u201c255\u201d (disabled).\n\n    ...\n    modparam(\"usrloc\", \"ka_loglevel\", 1)\n    ...\n            \n\n",
  "ka_logmsg": "### ka_logmsg (str)\n\nThe formatted log specification to be added to the message printed when\nthe keepalive is received and roundtrip time is computed. The log\nmessage starts with \"keepalive roundtrip: %u.%06u sec - ruid \\[%.\\*s\\]\",\nthen concatenates the value of this parameter and the end of line.\n\nThe value of this parameter can contain script variables that are\nevaluated with the SIP response.\n\nDefault value is \u201c to-uri: \\[\\$tu\\] remote-addr: \\[\\$sas\\]\u201d.\n\n    ...\n    modparam(\"usrloc\", \"ka_logmsg\", \" to-uri: [$tu] remote-addr: [$sas]\")\n    ...\n            \n\n",
  "load_rank": "### load_rank (int)\n\nAllows to set the rank of the child SIP worker to load the location\nrecords.\n\nDefault value is \u201c1\u201d (PROC_SIPINIT).\n\n    ...\n    modparam(\"usrloc\", \"load_rank\", 1)\n    ...\n            \n\n",
  "db_clean_tcp": "### db_clean_tcp (int)\n\nIf set to 1, when Kamailio starts it removes the contacts with transport\nTCP, TLS or WSS, no longer loading them. Useful when end points do not\nlisten for incoming connections on contact address, which is quite\ncommon (end point use only tcp client connections). On restart,\nconnections are lost, therefore the corresponding contact records become\nuseless.\n\nDefault value is \u201c0\u201d (do not clean tcp contacts).\n\n    ...\n    modparam(\"usrloc\", \"db_clean_tcp\", 1)\n    ...\n            \n\n"
 },
 "db_cluster": {
  "connection": "### connection (str)\n\nSpecify the connection to a real database system. The format is\n'conid=\\>DBURL' - providing a connection id and the database URL used by\nthe database driver used.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"db_cluster\", \"connection\",\n                 \"con1=>mysql://kamailio:kamailiorw@localhost/kamailio1\")\n    modparam(\"db_cluster\", \"connection\",\n                 \"con2=>mysql://kamailio:kamailiorw@localhost/kamailio2\")\n    ...\n\n",
  "cluster": "### cluster (str)\n\nSpecify the cluster definition. The format is\n'clsid=\\>conid1=def1;conid2=def2' - providing a cluster id and the list\nof database connections to be used. For each connection you have to\nprovide a usage definition. The usage definition is a 4-char long\nstring, specifying priority and command mode for read and write\noperations to be performed on that connection.\n\nThe priority is a digit between 0 and 9, where a higher value means\nhigher priority. Priority 0 means that the connection is not going to be\nused in that cluster.\n\nCommand mode is a character among s, r and p. s is for doing serial\noperations (try first and if fails, try next); r is for doing round\nrobin operations; p - is for doing parallel operations (this is valid\nonly for write operations).\n\nThe first two characters is priority and mode for read, followed by two\ncharacters for priority and mode for write operations. \"p\" is only used\nfor write operations.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"db_cluster\", \"cluster\", \"cls1=>con1=9s8p;con2=9s8p\")\n    ...\n\n",
  "inactive_interval": "### inactive_interval (int)\n\nHow long (seconds) a connection is considered inactive after a DB\noperations failed on it.\n\n*Default value is 300 (5 min).*\n\n    ...\n    modparam(\"db_cluster\", \"inactive_interval\", 180)\n    ...\n\n",
  "max_query_length": "### max_query_length (int)\n\nHow long (seconds) a failed db operation needs to last before\ndeactivating the connection for inactive_interval seconds. This prevents\ndisabling of connections that reply fast with error codes, thus being\nactive (e.g., due to primary key insert errors). In such cases, the\ndatabase server is active.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"db_cluster\", \"max_query_length\", 5)\n    ...\n\n"
 },
 "topos_redis": {
  "serverid": "### serverid (str)\n\nThe name of the REDIS server to be used as provided to the 'name'\nattribute of 'server' parameter for NDB_REDIS module.\n\nThe 'storage' parameter for TOPOS module must be set to 'redis'.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    # ----- ndb_redis params -----\n    modparam(\"ndb_redis\", \"server\", \"name=srv8;addr=127.0.0.1;port=6379;db=8\")\n\n    # ----- topos params -----\n    modparam(\"topos\", \"storage\", \"redis\")\n\n    # ----- topos_redis params -----\n    modparam(\"topos_redis\", \"serverid\", \"srv8\")\n    ...\n"
 },
 "siprepo": {},
 "auth_db": {
  "db_url": "### db_url (string)\n\nThis is URL of the database to be used. Value of the parameter depends\non the database module used. For example for mysql and postgres modules\nthis is something like mysql://username:password@host:port/database. For\ndbtext module (which stores data in plaintext files) it is directory in\nwhich the database resides.\n\n*Default value is \u201cmysql://kamailioro:kamailioro@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"auth_db\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "user_column": "### user_column (string)\n\nThis is the name of the column holding usernames. Default value is fine\nfor most people. Use the parameter if you really need to change it.\n\nDefault value is \u201cusername\u201d.\n\n    ...\n    modparam(\"auth_db\", \"user_column\", \"user\")\n    ...\n\n",
  "domain_column": "### domain_column (string)\n\nThis is the name of the column holding domains of users. Default value\nis fine for most people. Use the parameter if you really need to change\nit.\n\nDefault value is \u201cdomain\u201d.\n\n    ...\n    modparam(\"auth_db\", \"domain_column\", \"domain\")\n    ...\n\n",
  "password_column": "### password_column (string)\n\nThis is the name of the column holding passwords. Passwords can be\neither stored as plain text or pre-calculated HA1 strings. HA1 strings\nare MD5 hashes of username, password, and realm. HA1 strings are more\nsafe because the server doesn't need to know plaintext passwords and\nthey cannot be obtained from HA1 strings.\n\nDefault value is \u201cha1\u201d.\n\n    ...\n    modparam(\"auth_db\", \"password_column\", \"password\")\n    ...\n\n",
  "password_column_2": "### password_column_2 (string)\n\nAs described in the previous section this parameter contains name of\ncolumn holding pre-calculated HA1 string that were calculated including\nthe domain in the username. This parameter is used only when\n`calculate_ha1` is set to 0 and user agent send a credentials containing\nthe domain in the username.\n\nDefault value of the parameter is ha1b.\n\n    ...\n    modparam(\"auth_db\", \"password_column_2\", \"ha1_2\")\n    ...\n\n",
  "calculate_ha1": "### calculate_ha1 (integer)\n\nThis parameter tells the server whether it should use a pre-calculated\nHA1 string or plaintext passwords for authentication.\n\nIf the parameter is set to 0 and the username parameter of credentials\ncontains also \u201c@domain\u201d (some user agents append the domain to the\nusername parameter), then the server will use the HA1 values from the\ncolumn specified in the \u201cpassword_column_2\u201d parameter. If the username\nparameter doesn't contain a domain, the server will use the HA1 values\nfrom the column given in the \u201cpassword_column\u201dparameter.\n\nIf the parameter is set to 1 then the HA1 value will be calculated from\nthe column specified in the \u201cpassword_column\u201d parameter.\n\nThe \u201cpassword_column_2\u201dcolumn contain also HA1 strings but they should\nbe calculated including the domain in the username parameter (as opposed\nto password_column which (when containing HA1 strings) should always\ncontains HA1 strings calculated without domain in username.\n\nThis ensures that the authentication will always work when using\npre-calculated HA1 strings, not depending on the presence of the domain\nin username.\n\nDefault value of this parameter is 0.\n\n    ...\n    modparam(\"auth_db\", \"calculate_ha1\", 1)\n    ...\n\n",
  "use_domain": "### use_domain (integer)\n\nIf true (not 0), domain will be also used when looking up in the\nsubscriber table. If you have a multi-domain setup, it is strongly\nrecommended to turn on this parameter to avoid username overlapping\nbetween domains.\n\nIMPORTANT: before turning on this parameter, be sure that the `domain`\ncolumn in `subscriber` table is properly populated.\n\nDefault value is \u201c0 (false)\u201d.\n\n    ...\n    modparam(\"auth_db\", \"use_domain\", 1)\n    ...\n            \n\n",
  "load_credentials": "### load_credentials (string)\n\nThis parameter specifies of credentials to be fetch from database when\nthe authentication is performed. The loaded credentials will be stored\nin AVPs. If the AVP name is not specifically given, it will be used a\nNAME AVP with the same name as the column name.\n\nParameter syntax:\n\n- *load_credentials = credential (';' credential)\\**\n\n- *credential = (avp_specification '=' column_name) \\| (column_name)*\n\n- *avp_specification = '\\$avp(' + 'i:'ID \\| 's:'NAME \\| alias + ')'*\n\nDefault value of this parameter is \u201cNULL\u201d (no credentials loaded).\n\n    ...\n    # load rpid column into $avp(i:123) and email_address column\n    # into $avp(s:email_address)\n    modparam(\"auth_db\", \"load_credentials\", \"$avp(i:123)=rpid;email_address\")\n    ...\n\n",
  "version_table": "### version_table (integer)\n\nIf set to 0, the module will skip checking the version for subscriber\ntable.\n\nDefault value is \u201c1 (check for table version)\u201d.\n\n    ...\n    modparam(\"auth_db\", \"version_table\", 0)\n    ...\n            \n\n",
  "force_generate_avps": "### force_generate_avps (integer)\n\nIf set to different than 0, the module will fetch user DB attributes\neven if authentication failed.\n\nDefault value is \u201c0\u201d (don't fetch user DB attributes if authentication\nfailed).\n\n    ...\n    modparam(\"auth_db\", \"force_generate_avps\", 1)\n    ...\n            \n\n"
 },
 "dnssec": {
  "general_query_flags": "### general_query_flags (integer)\n\nSet this parameter to an integer value containing of an ORed result of\none or more of the following values (constant present only for\ndocumentation process, as they are mostly mapped to libval flags).\nSetting this parameter will cause the libval defaults to be completely\noverwritten\n\nQUERY_DONT_VALIDATE == 1\\<\\<0 causes the validator to disable validation\nfor this query.\n\nQUERY_IGNORE_SKEW == 1\\<\\<1 causes the validator to disable checking\nsignature inception and expiration times on RRSIGs.\n\nQUERY_AC_DETAIL == 1\\<\\<2 causes the validator to copy the\nauthentication chain details into the val_rc_answer member within the\nreturned val_result_chain structure.\n\nQUERY_NO_DLV == 1\\<\\<3 causes the validator to disable DLV processing\nfor this query. This is only available if the libval(3) library has been\ncompiled with DLV support.\n\nQUERY_NO_EDNS0_FALLBACK = 1\\<\\<4 In querying various name servers,\nlibsres will also attempt multiple EDNS0 sizes, ending with a query that\nhas EDNS0 disabled (i.e. no CD bit set). This option causes libval to\ndisable EDNS0 fallback for the query.\n\nQUERY_RECURSE == 1\\<\\<5 forces libval to recursively answer the query by\niteratively querying various name servers in the delegation hierarchy,\ninstead of requesting this information from any caching name server that\nmay be configured in dnsval.conf\n\nSKIP_RESOLVER == 1\\<\\<6 forces libval to only look at its cache while\ntrying to resolve a name.\n\nSKIP_CACHE == 1\\<\\<7 forces libval to ignore cached data while trying to\nresolve a name.\n\n*Default value is 0(no changes)*\n\n     ...\n     modparam(\"dnssec\", \"general_query_flags\", 1) # QUERY_DONT_VALIDATE disable validation\n     modparam(\"dnssec\", \"general_query_flags\", 10) # QUERY_IGNORE_SKEW | QUERY_NO_DLV\n     ...\n     \n"
 },
 "uid_uri_db": {
  "db_url": "### db_url (string)\n\nURL of the database to be used.\n\nDefault value is \"mysql://serro:47serro11@localhost/ser\".\n\n    ...\n    modparam(\"module\", \"db_url\", \"mysql://username:password@localhost/ser\")\n    ...\n            \n\n",
  "uri_table": "### uri_table (string)\n\nTable containing list of allowed URIs for each user.\n\nDefault value is \"uri\".\n\n    ...\n    modparam(\"module\", \"uri_table\", \"uri\")\n    ...\n            \n\n",
  "username_column": "### username_column (string)\n\nColumn holding usernames in the URI table.\n\nDefault value is \"username\".\n\n    ...\n    modparam(\"module\", \"username_column\", \"username\")\n    ...\n            \n\n",
  "uri_domain_column": "### uri_domain_column (string)\n\nColumn holding domain in the URI table.\n\nDefault value is \"domain\".\n\n    ...\n    modparam(\"module\", \"uri_domain_column\", \"domain\")\n    ...\n            \n\n",
  "uri_uriuser_column": "### uri_uriuser_column (string)\n\nColumn holding URI username in the URI table.\n\nDefault value is \"uri_user\".\n\n    ...\n    modparam(\"module\", \"uri_uriuser_column\", \"uri_user\")\n    ...\n            \n\n",
  "subscriber_table": "### subscriber_table (string)\n\nName of the subscriber table.\n\nDefault value is \"subscriber\".\n\n    ...\n    modparam(\"module\", \"subscriber_table\", \"subscriber\")\n    ...\n            \n\n",
  "subscriber_user_column": "### subscriber_user_column (string)\n\nColumn holding username in subscriber table.\n\nDefault value is \"username\".\n\n    ...\n    modparam(\"module\", \"subscriber_user_column\", \"username\")\n    ...\n            \n\n",
  "subscriber_domain_column": "### subscriber_domain_column (string)\n\nColumn holding domains in the subscriber table.\n\nDefault value is \"domain\".\n\n    ...\n    modparam(\"module\", \"subscriber_domain_column\", \"domain\")\n    ...\n            \n\n"
 },
 "sipcapture": {
  "db_url": "### db_url (str)\n\nDatabase URL.\n\n*Default value is \"\".*\n\n    ...\n    modparam(\"sipcapture\", \"db_url\", \"mysql://user:passwd@host/dbname\")\n    ...\n\n",
  "table_name": "### table_name (str)\n\nName of the table's name used to store the SIP messages. Can contain\nmultiple tables, separated by \"\\|\".\n\n*Default value is \"sip_capture\". Only for Homer 3. For Homer 5, please\nuse an argument for the sip_capture function.*\n\n    ...\n    modparam(\"sipcapture\", \"table_name\", \"homer_capture\")\n    ...\n    modparam(\"sipcapture\", \"table_name\", \"homer_capture1|homer_capture2\");\n    ...\n\n",
  "mt_mode": "### mt_mode (str)\n\nName of the mode used for storing data in multiple tables. Modes can be\n\"rand\" (random), \"round_robin\" (use a round_robin algorithm) or \"hash\"\n(use hashing to determine the table to store). These modes are only\ntriggered if there is more than one table specified in table_name\nparameter, separated by \"\\|\".\n\n*Default value is \"rand\".*\n\n    ...\n    modparam(\"sipcapture\", \"mt_mode\", \"hash\")\n    ...\n\n",
  "hash_source": "### hash_source (str)\n\nThe field of the SIP message used for hashing, when mt_mode is set to\n\"hash\". The value can be \"call_id\", \"to_user\" or \"from_user\".\n\n*Default value is \"call_id\".*\n\n    ...\n    modparam(\"sipcapture\", \"hash_source\", \"to_user\")\n    ...\n\n",
  "db_insert_mode": "### db_insert_mode (integer)\n\nIf set to 1, use INSERT DELAYED to store sip message into capture table\nwhen the DB driver has support for it. If no INSERT DELAYED support is\noffered by DB driver, then standard INSERT is used.\n\nIf set to 2, use ASYNC INSERT to store sip message into capture table\nwhen the DB driver has support for it. If no ASYNC INSERT support is\noffered by DB driver, then standard INSERT is used.\n\nDefault value is 0 (no INSERT DELAYED).\n\n    modparam(\"sipcapture\", \"db_insert_mode\", 1)\n\n",
  "capture_on": "### capture_on (integer)\n\nParameter to enable/disable capture globally (on(1)/off(0))\n\n*Default value is \"0\".*\n\n    ...\n    modparam(\"sipcapture\", \"capture_on\", 1)\n    ...\n\n",
  "capture_mode": "### capture_mode (str)\n\nThis parameter can be used for defining a capture mode which can be used\nin the sip_capture calls as a parameter. A capture mode has a name and\nsome parameters. It must be defined in the format:\nname=\\>param1=val1;param2=val2;... The parameters are db_url,\ntable_name, mt_mode and hash_source (optional). Multiple capture modes\ncan be defined by using this parameter multiple times. After this, the\ncapture modes can be used like: sip_capture (\"\", \"CAPTURE_MODE\");\n\n    modparam(\"sipcapture\", \"capture_mode\", \"mode1=>db_url=mysql://user:passwd@host/dbname1;table_name=homer_capture1|homer_capture2;mt_mode=hash;hash_source=call_id;\")\n    modparam(\"sipcapture\", \"capture_mode\", \"mode2=>db_url=mysql://user:passwd@host/dbname2;table_name=homer_capture3|homer_capture4;mt_mode=rand;\")\n\n",
  "hep_capture_on": "### hep_capture_on (integer)\n\nParameter to enable/disable capture of HEP (on(1)/off(0))\n\n*Default value is \"0\".*\n\n    ...\n    modparam(\"sipcapture\", \"hep_capture_on\", 1)\n    ...\n\n",
  "raw_ipip_capture_on": "### raw_ipip_capture_on (integer)\n\nParameter to enable/disable IPIP capturing (on(1)/off(0))\n\n*Default value is \"0\".*\n\n    ...\n    modparam(\"sipcapture\", \"raw_ipip_capture_on\", 1)\n    ...\n\n",
  "raw_moni_capture_on": "### raw_moni_capture_on (integer)\n\nParameter to enable/disable monitoring/mirroring port capturing\n(on(1)/off(0)) Only one mode on raw socket can be enabled! Monitoring\nport capturing currently supported only on Linux.\n\n*Default value is \"0\".*\n\n    ...\n    modparam(\"sipcapture\", \"raw_moni_capture_on\", 1)\n    ...\n            \n\n",
  "raw_socket_listen": "### raw_socket_listen (string)\n\nParameter indicate a listen IP address of RAW socket for IPIP capturing.\nYou can also define a port/portrange for IPIP/Mirroring mode, to capture\nSIP messages in specific ports:\n\n\"10.0.0.1:5060\" - the source/destination port of the SIP message must be\nequal 5060\n\n\"10.0.0.1:5060-5090\" - the source/destination port of the SIP message\nmust be equal or be between 5060 and 5090.\n\nThe port/portrange must be defined if you are planning to use mirroring\ncapture! In this case, the part with IP address will be ignored, but to\nmake parser happy, use i.e. 10.0.0.0\n\n*Default value is \"\".*\n\n    ...\n    modparam(\"sipcapture\", \"raw_socket_listen\", \"10.0.0.1:5060-5090\")\n    ...\n    modparam(\"sipcapture\", \"raw_socket_listen\", \"10.0.0.1:5060\")\n    ...\n\n",
  "raw_interface": "### raw_interface (string)\n\nName of the interface to bind on the raw socket.\n\n*Default value is \"\".*\n\n    ...\n    modparam(\"sipcapture\", \"raw_interface\", \"eth0\")\n    ...\n\n",
  "raw_sock_children": "### raw_sock_children (integer)\n\nParameter define how many children that must be created to listen the\nraw socket.\n\n*Default value is \"1\".*\n\n    ...\n    modparam(\"sipcapture\", \"raw_sock_children\", 6)\n    ...\n\n",
  "promiscuous_on": "### promiscuous_on (integer)\n\nParameter to enable/disable promiscuous mode on the raw socket. Linux\nonly.\n\n*Default value is \"0\".*\n\n    ...\n    modparam(\"sipcapture\", \"promiscuous_on\", 1)\n    ...\n\n",
  "raw_moni_bpf_on": "### raw_moni_bpf_on (integer)\n\nActivate Linux Socket Filter (LSF based on BPF) on the mirroring\ninterface. The structure is defined in linux/filter.h. The default LSF\naccept a port/portrange from the raw_socket_listen param. Currently LSF\nsupported only on Linux.\n\n*Default value is \"0\".*\n\n    ...\n    modparam(\"sipcapture\", \"raw_moni_bpf_on\", 1)\n    ...\n\n",
  "capture_node": "### capture_node (str)\n\nName of the capture node.\n\n*Default value is \"homer01\".*\n\n    ...\n    modparam(\"sipcapture\", \"capture_node\", \"homer03\")\n    ...\n\n",
  "insert_retries": "### insert_retries (integer)\n\nThe number of times Kamailio should retry to write to the Homer database\nin case the first attempt failed. The retry is also limited timewise by\nthe insert_retry_timeout parameter. Values allowed range from 0 to 500.\n\n*Default value is 0 (no retries).*\n\n    ...\n    modparam(\"sipcapture\", \"insert_retries\", 5)\n    ...\n                \n\n",
  "insert_retry_timeout": "### insert_retry_timeout (integer)\n\nThe time limit in seconds Kamailio retries to write to the Homer\ndatabase in case the first attempt failed. This parameter is only used\ntogether with the insert_retries parameter. Values allowed range from 0\nto 300.\n\n*Default value is 60 seconds.*\n\n    ...\n    modparam(\"sipcapture\", \"insert_retry_timeout\", 10)\n    ...\n                \n\n",
  "callid_aleg_header": "### callid_aleg_header (str)\n\nHeader name used to correlate A-leg with B-leg. It can take a list of\nheaders, separated by semicolon, e.g. \"X-CID0;X-CID1\". First match wins.\n\n*Default value is \"X-CID\".*\n\n    ...\n    modparam(\"sipcapture\", \"callid_aleg_header\", \"X-CallIDALeg\")\n    ...\n                \n\n",
  "topoh_unmask": "### topoh_unmask (int)\n\nIf set to 1, call-id will be unmasked using topoh module api (topoh\nmodule must be loaded in this case).\n\nDefault value is *0*.\n\n    ...\n    modparam(\"sipcapture\", \"topoh_unmask\", 1)\n    ...\n                \n\n",
  "nonsip_hook": "### nonsip_hook (int)\n\nIf set to 1, event route *sipcapture:siprequest* is run when HEP message\nis received.\n\nDefault value is *0*.\n\n    ...\n    modparam(\"sipcapture\", \"nonsip_hook\", 1)\n    ...\n                \n\n",
  "event_callback": "### event_callback (str)\n\nThe name of the function in the kemi configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[...\\] blocks.\n\nThe function receives a string parameter with the name of the event, the\nvalues can be: 'sipcapture:request'.\n\n*Default value is 'empty' (no function is executed for events).*\n\n    ...\n    modparam(\"sipcapture\", \"event_callback\", \"ksr_sipcapture_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_sipcapture_event(evname)\n        KSR.info(\"===== sipcapture module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n    ...\n\n",
  "capture_bad_msgs": "### capture_bad_msgs (int)\n\nIf set to something different than 0, tries to capture also the broken\nSIP messages.\n\nDefault value is *0*.\n\n    ...\n    modparam(\"sipcapture\", \"capture_bad_msgs\", 1)\n    ...\n                \n\n"
 },
 "app_ruby": {
  "load": "### load (str)\n\nSet the path to the Ruby file to be loaded at startup. Then you can use\nRuby_run(function, params) to execute a function from the script at\nruntime. If you use it for KEMI configuration, then it has to include\nthe required functions.\n\n*Default value is \u201cnull\u201d.*\n\n    ...\n    modparam(\"app_ruby\", \"load\", \"/usr/local/etc/kamailio/ruby/myscript.rb\")\n    ...\n\n",
  "xval_mode": "### xval_mode (int)\n\nControl if the external sub-module functions returning extended-values\nshould propagate their string return value (when set to 0) or be\nreplaced by NULL/nil (when set to 1).\n\nWhen set to 0, the KSR::PV Ruby submodule is implemented with the\ninternal functions from the app_ruby module, otherwise the ones from\ncore are used.\n\nNote: upt to version 5.7, when set to 1, there were crashing reports\nthat are under investigation, this option being provided as intermediary\nsolution to preserve the behaviour from older versions.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"app_ruby\", \"xval_mode\", 0)\n    ...\n\n",
  "modproc": "### modproc (str)\n\nThe name of or the path to the required per-process API module.\n\n*Default value is \"app_ruby_proc.so\".*\n\n    ...\n    modparam(\"app_ruby\", \"modproc\", \"app_ruby_proc2.so\")\n    ...\n\n"
 },
 "diversion": {
  "suffix": "### suffix (string)\n\nThe suffix to be appended to the end of the header field. You can use\nthe parameter to specify additional parameters to be added to the header\nfield, see the example.\n\nDefault value is \u201c\u201d (empty string).\n\n    modparam(\"diversion\", \"suffix\", \";privacy=full\")\n\n"
 },
 "blst": {},
 "pua_rpc": {},
 "presence_dialoginfo": {
  "force_single_dialog": "### force_single_dialog (int)\n\nBy default the module aggregates all available dialog info into a single\ndialog-info document containing multiple \"dialog\" elements. If the phone\ndoes not support this, you can activate this parameter.\n\nIf this parameter is set, only the dialog element with the currently\nmost interesting dialog state will be put into the dialog-info document.\nThus, the dialog-info element will contain only a single \"dialog\"\nelement. The algorithm chooses the state based on the following order of\npriority (least important first): terminated, trying, proceeding,\nconfirmed, early. Note: I consider the \"early\" state more interesting\nthan confirmed as often you might want to pickup a call if the original\ncallee is already busy in a call.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"presence_dialoginfo\", \"force_single_dialog\", 1)\n    ...\n\n",
  "force_dummy_dialog": "### force_dummy_dialog (int)\n\nBy default the module returns null body if there are no bodies to\naggregate. some sip clients like Bria expect at least one dialog. you\ncan activate this parameter to send a dummy dialog.\n\nIf this parameter is set and there are no dialog bodies to aggregate, it\nwill return a dummy dialog.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"presence_dialoginfo\", \"force_dummy_dialog\", 1)\n    ...\n\n",
  "default_expires": "### default_expires (int)\n\nThe default expires value used when missing from SUBSCRIBE message (in\nseconds).\n\n*Default value is \u201c3600\u201d.*\n\n    ...\n    modparam(\"presence_dialoginfo\", \"default_expires\", 3600)\n    ...\n\n"
 },
 "ims_usrloc_pcscf": {},
 "osp": {
  "sp16_uri": "### sp1_uri, sp2_uri, ..., sp16_uri\n\nThese sp_uri (string) parameters define peering servers to be used for\nrequesting peering authorization and routing information. At least one\npeering server must be configured. Others are required only if there are\nmore than one peering servers. Each peering server address takes the\nform of a standard URL, and consists of up to four components:\n\n- An optional indication of the protocol to be used for communicating\n  with the peering server. Both HTTP and HTTP secured with SSL/TLS are\n  supported and are indicated by \"http://\" and \"https://\" respectively.\n  If the protocol is not explicitly indicated, the Kamailio defaults to\n  HTTP secured with SSL.\n\n- The Internet domain name for the peering server. An IP address may\n  also be used, provided it is enclosed in square brackets such as\n  \\[172.16.1.1\\].\n\n- An optional TCP port number for communicating with the peering server.\n  If the port number is omitted, the Kamailio defaults to port 1080 (for\n  HTTP) or port 1443 (for HTTP secured with SSL).\n\n  The uniform resource identifier for requests to the peering server.\n  This component is not optional and must be included.\n\n<!-- -->\n\n    modparam(\"osp\",\"sp1_uri\",\"http://osptestserver.transnexus.com:1080/osp\")\n    modparam(\"osp\",\"sp2_uri\",\"https://[1.2.3.4]:1443/osp\")\n            \n\n",
  "sp16_weight": "### sp1_weight, sp2_weight, ..., sp16_weight\n\nThese sp_weight (integer) parameters are used for load balancing peering\nrequests to peering servers. These parameters are most effective when\nconfigured as factors of 1000. For example, if sp1_uri should manage\ntwice the traffic load of sp2_uri, then set sp1_weight to 2000 and\nsp2_weight to 1000. Shared load balancing between peering servers is\nrecommended. However, peering servers can be configured as primary and\nbackup by assigning a sp_weight of 0 to the primary server and a\nnon-zero sp_weight to the back-up server. The default values for\nsp1_weight and sp2_weight are 1000.\n\n    modparam(\"osp\",\"sp1_weight\",1000)\n            \n\n",
  "device_ip": "### device_ip\n\nThe device_ip (string) is a recommended parameter that explicitly\ndefines the IP address of Kamailio in a peering request message (as\nSourceAlternate type=transport). The IP address must be in brackets as\nshown in the example below.\n\n    modparam(\"osp\",\"device_ip\",\"[1.1.1.1]\")\n            \n\n",
  "device_port": "### device_port\n\nThe device_port (string) parameter is an optional field which includes\nthe SIP port being used by Kamailio in the peering request (as\nSourceAlternate type=network) to the peering server. If is not\nconfigured, this information is not included in the peering request.\nThis field is useful if multiple Kamailio are running on the same Linux\ncomputer since it enables the peering server to administer different\npeering policies based on different SIP proxies. This parameter has not\nbeen implemented yet.\n\n    modparam(\"osp\",\"device_port\",\"5060\")\n            \n\n",
  "token_format": "### token_format\n\nWhen Kamailio receives a SIP INVITE with a peering token, the OSP Module\nwill validate the token to determine whether or not the call has been\nauthorized by a peering server. Peering tokens may, or may not, be\ndigitally signed. The token_format (integer) parameter defines if\nKamailio will validate signed or unsigned tokens or both. The values for\ntoken format are defined below. The default value is 2.\n\n0 - Validate only signed tokens. Calls with valid signed tokens are\nallowed.\n\n1 - Validate only unsigned tokens. Calls with valid unsigned tokens are\nallowed.\n\n2 - Validate both signed and unsigned tokens are allowed. Calls with\nvalid tokens are allowed.\n\n    modparam(\"osp\",\"token_format\",2)\n            \n\n",
  "ca_certificates": "### private_key, local_certificate, ca_certificates\n\nThese parameters identify files are used for validating peering\nauthorization tokens and establishing a secure channel between Kamailio\nand a peering server using SSL. The files are generated using the\n'Enroll' utility from the OSP Toolkit. By default, the proxy will look\nfor pkey.pem, localcert.pem, and cacart_0.pem in the default\nconfiguration directory. The default config directory is set at compile\ntime using CFG_DIR and defaults to /usr/local/etc/kamailio/. The files\nmay be copied to the expected file location or the parameters below may\nbe changed.\n\nIf the default CFG_DIR value was used at compile time, the files will be\nloaded from:\n\n    modparam(\"osp\",\"private_key\",\"/usr/local/etc/kamailio/pkey.pem\")\n    modparam(\"osp\",\"local_certificate\",\"/usr/local/etc/kamailio/localcert.pem\")\n    modparam(\"osp\",\"ca_certificates\",\"/usr/local/etc/kamailio/cacert.pem\")\n            \n\n",
  "enable_crypto_hardware_support": "### enable_crypto_hardware_support\n\nThe enable_crypto_hardware_support (integer) parameter is used to set\nthe cryptographic hardware acceleration engine in the openssl library.\nThe default value is 0 (no crypto hardware is present). If crypto\nhardware is used, the value should be set to 1.\n\n    modparam(\"osp\",\"enable_crypto_hardware_support\",0)\n            \n\n",
  "ssl_lifetime": "### ssl_lifetime\n\nThe ssl_lifetime (integer) parameter defines the lifetime, in seconds,\nof a single SSL session key. Once this time limit is exceeded, the OSP\nModule will negotiate a new session key. Communication exchanges in\nprogress will not be interrupted when this time limit expires. This is\nan optional field with default value is 200 seconds.\n\n    modparam(\"osp\",\"ssl_lifetime\",200)\n            \n\n",
  "persistence": "### persistence\n\nThe persistence (integer) parameter defines the time, in seconds, that\nan HTTP connection should be maintained after the completion of a\ncommunication exchange. The OSP Module will maintain the connection for\nthis time period in anticipation of future communication exchanges to\nthe same peering server.\n\n    modparam(\"osp\",\"persistence\",1000)\n            \n\n",
  "retry_delay": "### retry_delay\n\nThe retry_delay (integer) parameter defines the time, in seconds,\nbetween retrying connection attempts to an OSP peering server. After\nexhausting all peering servers the OSP Module will delay for this amount\nof time before resuming connection attempts. This is an optional field\nwith default value is 1 second.\n\n    modparam(\"osp\",\"retry_delay\",1)\n            \n\n",
  "retry_limit": "### retry_limit\n\nThe retry_limit (integer) parameter defines the maximum number of\nretries for connection attempts to a peering server. If no connection is\nestablished after this many retry attempts to all peering servers, the\nOSP Module will cease connection attempts and return appropriate error\ncodes. This number does not count the initial connection attempt, so\nthat a retry_limit of 1 will result in a total of two connection\nattempts to every peering server. The default value is 2.\n\n    modparam(\"osp\",\"retry_limit\",2)\n            \n\n",
  "timeout": "### timeout\n\nThe timeout (integer) parameter defines the maximum time in\nmilliseconds, to wait for a response from a peering server. If no\nresponse is received within this time, the current connection is aborted\nand the OSP Module attempts to contact the next peering server. The\ndefault value is 10 seconds.\n\n    modparam(\"osp\",\"timeout\",10)\n            \n\n",
  "max_destinations": "### max_destinations\n\nThe max_destinations (integer) parameter defines the maximum number of\ndestinations that Kamailio requests the peering server to return in a\npeering response. The default value is 5.\n\n    modparam(\"osp\",\"max_destinations\",5)\n            \n\n",
  "validate_call_id": "### validate_call_id\n\nThe validate_call_id (integer) parameter instructs the OSP module to\nvalidate call id in the peering token. If this value is set to 1, the\nOSP Module validates that the call id in the SIP INVITE message matches\nthe call id in the peering token. If they do not match the INVITE is\nrejected. If this value is set to 0, the OSP Module will not validate\nthe call id in the peering token. The default value is 1.\n\n    modparam(\"osp\",\"validate_call_id\",1)\n            \n\n",
  "use_rpid_for_calling_number": "### use_rpid_for_calling_number\n\nThe use_rpid_for_calling_number (integer) parameter instructs the OSP\nmodule to use the calling number in the Remote-Party-ID of the SIP\nINVITE message. If this value is set to 1, the OSP Module uses the\ncalling number in the Remote-Party-ID header of the INVITE message when\na Remote-Party-ID exists. If this value is set to 0, the OSP Module will\nuse the calling number in the From header of the INVITE message. The\ndefault value is 1.\n\n    modparam(\"osp\",\"use_rpid_calling_number\",1)\n            \n\n",
  "redirection_uri_format": "### redirection_uri_format\n\nThe redirection_uri_format (integer) parameter instructs the OSP module\nto use the different URI format in the SIP redirection message. If this\nvalue is set to 0, the OSP Module uses \"xxxxxxxxxx@xxx.xxx.xxx.xxx\" URI\nin the SIP redirection messages. If this value is set to 1, the OSP\nModule will use \u201c\\<xxxxxxxxxx@xxx.xxx.xxx.xxx\\>\u201d URI in the SIP\nredirection messages. The default value is 0\n\n    modparam(\"osp\",\"redirection_uri_format\",1)\n            \n\n",
  "source_networkid_avp": "### source_networkid_avp\n\nThe source_networkid_avp (string) parameter instructs the OSP module to\nuse the defined AVP to pass the source network ID value. The default\nvalue is \"\\$avp(s:\\_osp_source_networkid\\_)\". Then the source network ID\ncan be set by \"\\$avp(s:\\_osp_source_networkid\\_) = pseudo-variables\".\nAll pseudo variables are described in\nhttp://kamailio.org/dokuwiki/doku.php/pseudovariables:1.3.x.\n\n    modparam(\"osp\",\"source_networkid_avp\",\"$avp(s:snid)\")\n            \n\n"
 },
 "acc_diameter": {
  "diameter_flag": "### diameter_flag (integer)\n\nRequest flag which needs to be set to account a transaction -- DIAMETER\nspecific.\n\nDefault value is not-set (no flag).\n\n    ...\n    modparam(\"acc_diameter\", \"diameter_flag\", 2)\n    ...\n\n",
  "diameter_missed_flag": "### diameter_missed_flag (integer)\n\nRequest flag which needs to be set to account missed calls -- DIAMETER\nspecific.\n\nDefault value is not-set (no flag).\n\n    ...\n    modparam(\"acc_diameter\", \"diameter_missed_flag\", 3)\n    ...\n\n",
  "diameter_client_host": "### diameter_client_host (string)\n\nHostname of the machine where the DIAMETER Client is running -- DIAMETER\nspecific.\n\nDefault value is \u201clocalhost\u201d.\n\n    ...\n    modparam(\"acc_diameter\", \"diameter_client_host\", \"3a_server.net\")\n    ...\n\n",
  "diameter_client_port": "### diameter_client_port (int)\n\nPort number where the Diameter Client is listening -- DIAMETER specific.\n\nDefault value is 3000.\n\n    ...\n    modparam(\"acc_diameter\", \"diameter_client_port\", 3000)\n    ...\n\n",
  "diameter_extra": "### diameter_extra (string)\n\nExtra values to be logged via DIAMETER - DIAMETER specific. See section\nthe section about extra accounting in 'acc' module for more details.\n\nDefault value is NULL.\n\n    ...\n    modparam(\"acc_diameter\", \"diameter_extra\", \"7846=$hdr(Content-type);7847=$avp(s:email)\")\n    ...\n\n"
 },
 "janssonrpcc": {
  "min_srv_ttl": "### min_srv_ttl (integer)\n\nThe minimum acceptable TTL in seconds for SRV DNS entries. This means\nthat TTLs from the DNS will be ignored if they are lower than this\nvalue. It cannot be set lower than 1 second.\n\n*Default is 5 seconds.*\n\n    ...\n    modparam(\"janssonrpcc\", \"min_srv_ttl\", 30)\n    ...\n                \n\nThis will set any SRV TTL lower than 30 seconds to 30 seconds.\n\n",
  "result_pv": "### result_pv (string)\n\nThe PV spec where to store the result of a call to janssonrpc_request().\nIt can be any writable PV.\n\n*Default value is \u201c\\$var(jsrpc_result)\u201d.*\n\n    ...\n    modparam(\"janssonrpcc\", \"result_pv\", \"$var(result)\")\n    ...\n                \n\n",
  "server": "### server (string)\n\nThe server providing the remote jsonrpc service. Format can be\n\"conn=example;addr=localhost;port=9999;priority=10;weight=20\" or\n\"conn=bar;srv=\\_sip.\\_tcp.example.net\".\n\n- conn\n  \\- name for a collection of servers (required).\n- srv\n  \\- DNS SRV domain name (optional).\n- addr\n  \\- host address (required, except when using srv).\n- port\n  \\- host port (required, except when using srv).\n- priority\n  \\- server are grouped by priority. Servers with higher priority (lower\n  number) are used first. Default is 0. (optional when using addr,\n  invalid otherwise).\n- weight\n  \\- functions the same as a DNS SRV weight. Requests are distributed\n  between servers of the same priority proportional to their weight.\n  Default is 1. (optional when using addr, invalid otherwise).\n\n<!-- -->\n\n    ...\n    modparam(\"janssonrpcc\", \"server\", \"conn=tests;srv=_test1._tcp.example.net\");\n    modparam(\"janssonrpcc\", \"server\", \"conn=tests;srv=_test2._tcp.example.net\");\n    modparam(\"janssonrpcc\", \"server\", \"conn=local;addr=localhost;port=8080;priority=10;weight=10\");\n    modparam(\"janssonrpcc\", \"server\", \"conn=user_db;addr=rpc.prod.example.net;port=5060;priority=10;weight=10\");\n    ...\n                    \n\n",
  "retry_codes": "### retry_codes (string)\n\nA comma delimited list of error codes or error code ranges to\nautomatically schedule a request retry if received.\n\nThis will only be used if there is no route specified for the request.\n\nAn error code can be any integer, but is typically a negative number.\n\nAn error code range is delimited by \"*..*\" . For example,\n\"-32099..-32000\".\n\nSpaces are ignored.\n\n    ...\n    modparam(\"janssonrpcc\", \"retry_codes\", \"-32603, -32000..-32099\");\n    ...\n                    \n\n",
  "keep_alive": "### keep_alive (integer)\n\nnumber of seconds to send a tcp keep-alive to the server connection\n\nDefault is 0 (disabled)\n\n    ...\n    modparam(\"janssonrpcc\", \"keep_alive\", 10)\n    ...\n                    \n\n"
 },
 "stun": {},
 "lcr": {
  "db_url": "### db_url (string)\n\nURL of the database table to be used.\n\n*Default value is \u201cmysql://kamailioro:kamailioro@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"lcr\",\"db_url\",\"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "lcr_gw_table": "### lcr_gw_table (string)\n\nName of the table holding gateways definitions.\n\n*Default value is \u201clcr_gw\u201d.*\n\n    ...\n    modparam(\"lcr\", \"lcr_gw_table\",\"gw\")\n    ...\n\n",
  "id_column": "### id_column (string)\n\nName of the auto-increment, primary key column. Common to all lcr module\ntables.\n\n*Default value is \u201cid\u201d.*\n\n    ...\n    modparam(\"lcr\", \"id_column\", \"row_id\")\n    ...\n\n",
  "lcr_id_column": "### lcr_id_column (string)\n\nName of the column holding the identifier of an LCR instance. Common to\nall lcr module tables. In lcr_rule and lcr_rule_target tables, value of\nthe column is integer from 1 to lcr_count. In lcr_gw table, value of the\ncolumn is from 0 to lcr_count.\n\n*Default value is \u201clcr_id\u201d.*\n\n    ...\n    modparam(\"lcr\", \"lcr_id_column\", \"lcr_identifier\")\n    ...\n\n",
  "gw_name_column": "### gw_name_column (string)\n\nName of the column holding gateway's name for documentation purpose.\n\n*Default value is \u201cgw_name\u201d.*\n\n    ...\n    modparam(\"lcr\", \"gw_name_column\", \"name\")\n    ...\n\n",
  "ip_addr_column": "### ip_addr_column (string)\n\nName of the column holding the IPv4 or IPv6 address of the gateway.\n\n*Default value is \u201cip_addr\u201d.*\n\n    ...\n    modparam(\"lcr\", \"ip_addr_column\", \"ip\")\n    ...\n\n",
  "hostname_column": "### hostname_column (string)\n\nName of the column holding gateway's hostname that is used in\nRequest-URI hostpart, when request is sent to the gateway.\n\n*Default value is \u201chostname\u201d.*\n\n    ...\n    modparam(\"lcr\", \"hostname_column\", \"host\")\n    ...\n\n",
  "port_column": "### port_column (string)\n\nName of the column holding the port number of the gateway.\n\n*Default value is \u201cport\u201d.*\n\n    ...\n    modparam(\"lcr\", \"port_column\", \"port\")\n    ...\n\n",
  "params_column": "### params_column (string)\n\nName of the column holding gateway's parameters that is used in\nRequest-URI, when request is sent to the gateway.\n\n*Default value is \u201cparams\u201d.*\n\n    ...\n    modparam(\"lcr\", \"params_column\", \"parameters\")\n    ...\n\n",
  "uri_scheme_column": "### uri_scheme_column (string)\n\nName of the column holding the uri scheme of the gateway.\n\n*Default value is \u201curi_scheme\u201d.*\n\n    ...\n    modparam(\"lcr\", \"uri_scheme_column\", \"uri_scheme\")\n    ...\n\n",
  "transport_column": "### transport_column (string)\n\nName of the column holding the transport protocol to be used for the\ngateway.\n\n*Default value is \u201ctransport\u201d.*\n\n    ...\n    modparam(\"lcr\", \"transport_column\", \"trans\")\n    ...\n\n",
  "strip_column": "### strip_column (string)\n\nName of the column holding the number of characters to be stripped from\nthe front of Request-URI user part before inserting tag.\n\n*Default value is \u201cstrip\u201d.*\n\n    ...\n    modparam(\"lcr\", \"strip_column\", \"strip_count\")\n    ...\n\n",
  "tag_column": "### tag_column (string)\n\nName of the column holding gateway specific tag string that is added to\nRequest URI userpart after stripping.\n\n*Default value is \u201ctag\u201d.*\n\n    ...\n    modparam(\"lcr\", \"tag_column\", \"gw_tag\")\n    ...\n\n",
  "flags_column": "### flags_column (string)\n\nName of the column holding gateway specific flag values.\n\n*Default value is \u201cflags\u201d.*\n\n    ...\n    modparam(\"lcr\", \"flags_column\", \"gw_flags\")\n    ...\n\n",
  "defunct_column": "### defunct_column (string)\n\nName of the column holding UNIX timestamp telling the time until which\nthe gw is considered as defunct. If timestamp value is 4294967295 (= max\nUNIX timestamp value) or greater, gw is considered currently unused and\nis not loaded into memory at all.\n\n*Default value is \u201cdefunct\u201d.*\n\n    ...\n    modparam(\"lcr\", \"defunct_column\", \"defunct_until\")\n    ...\n\n",
  "lcr_rule_table": "### lcr_rule_table (string)\n\nName of the table holding the LCR rules.\n\n*Default value is \u201clcr_rule\u201d.*\n\n    ...\n    modparam(\"lcr\", \"lcr_rule_table\", \"rules\")\n    ...\n\n",
  "prefix_column": "### prefix_column (string)\n\nName of the column in lcr_rule and lcr_gw tables holding prefix of\nRequest-URI user part and prefix of gateway, respectively.\n\n*Default value is \u201cprefix\u201d.*\n\n    ...\n    modparam(\"lcr\", \"prefix_column\", \"number_prefix\")\n    ...\n\n",
  "from_uri_column": "### from_uri_column (string)\n\nName of the column holding the From (caller's) URI.\n\n*Default value is \u201cfrom_uri\u201d.*\n\n    ...\n    modparam(\"lcr\", \"from_uri_column\", \"caller_uri\")\n    ...\n\n",
  "mt_tvalue_column": "### mt_tvalue_column (string)\n\nName of the column holding mtree tvalue.\n\n*Default value is \u201cmt_tvalue\u201d.*\n\n    ...\n    modparam(\"lcr\", \"mt_tvalue_column\", \"tree_value\")\n    ...\n\n",
  "request_uri_column": "### request_uri_column (string)\n\nName of the column holding the regular expression to match against the\ncomplete request URI (including the \"sip:\" prefix).\n\n*Default value is \u201crequest_uri\u201d.*\n\n    ...\n    modparam(\"lcr\", \"request_uri_column\", \"callee_uri\")\n    ...\n\n",
  "stopper_column": "### stopper_column (string)\n\nName of the column holding rule's stopper attribute.\n\n*Default value is \u201cstopper\u201d.*\n\n    ...\n    modparam(\"lcr\", \"stopper_column\", \"stop\")\n    ...\n\n",
  "enabled_column": "### enabled_column (string)\n\nName of the column telling is the rule is currently enabled or disabled.\n\n*Default value is \u201cenabled\u201d.*\n\n    ...\n    modparam(\"lcr\", \"enabled_column\", \"in_use\")\n    ...\n\n",
  "lcr_rule_target_table": "### lcr_rule_target_table (string)\n\nName of the table holding information about the LCR rule targets\n(gateways).\n\n*Default value is \u201clcr_rule_target\u201d.*\n\n    ...\n    modparam(\"lcr\", \"lcr_rule_target_table\", \"rules\")\n    ...\n\n",
  "rule_id_column": "### rule_id_column (string)\n\nName of lcr_rule_target_table column containing an id of lcr_rule table.\n\n*Default value is \u201crule_id\u201d.*\n\n    ...\n    modparam(\"lcr\", \"rule_id_column\", \"rule\")\n    ...\n\n",
  "gw_id_column": "### gw_id_column (string)\n\nName of lcr_rule_target_table column containing an id of lcr_gw table.\n\n*Default value is \u201cgw_id\u201d.*\n\n    ...\n    modparam(\"lcr\", \"gw_id_column\", \"gw\")\n    ...\n\n",
  "priority_column": "### priority_column (string)\n\nName of the column holding the priority of the rule target.\n\n*Default value is \u201cpriority\u201d.*\n\n    ...\n    modparam(\"lcr\", \"priority_column\", \"priority\")\n    ...\n\n",
  "weight_column": "### weight_column (string)\n\nName of the column holding weight of rule target.\n\n*Default value is \u201cweight\u201d.*\n\n    ...\n    modparam(\"lcr\",\"weight_column\", \"target_weight\")\n    ...\n\n",
  "lcr_count": "### lcr_count (integer)\n\nMaximum value of lcr_id.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"lcr\", \"lcr_count\", 10)\n    ...\n\n",
  "gw_uri_avp": "### gw_uri_avp (AVP string)\n\nInternal AVP that load_gws() function uses to store information of\nmatching gateways.\n\n*There is NO default value, thus this variable must be defined in\nsip-router.cfg.*\n\n    ...\n    modparam(\"lcr\", \"gw_uri_avp\", \"$avp(lcr_gwuri)\")\n    ...\n\n",
  "ruri_user_avp": "### ruri_user_avp (AVP string)\n\nInternal AVP that next_gw function uses to store Request-URI user for\nsubsequent next_gw calls.\n\n*There is NO default value, thus this variable must be defined in\nsip-router.cfg.*\n\n    ...\n    modparam(\"lcr\", \"ruri_user_avp\", \"$avp(lcr_ruri_user)\")\n    ...\n\n",
  "tag_avp": "### tag_avp (AVP string)\n\nIf defined, an AVP where successful next_gw and from_gw functions store\ngateway's tag.\n\n*There is NO default value, i.e, if not defined, gateway's tag is not\nstored anywhere.*\n\n    ...\n    modparam(\"lcr\", \"tag_avp\", \"$avp(lcr_tag)\")\n    ...\n\n",
  "flags_avp": "### flags_avp (AVP string)\n\nIf defined, an AVP where successful next_gw and from_gw functions store\ngateway's flags.\n\n*There is NO default value, i.e, if not defined, gateway's flags are not\nstored anywhere.*\n\n    ...\n    modparam(\"lcr\", \"flags_avp\", \"$avp(lcr_flags)\")\n    ...\n\n",
  "rule_id_avp": "### rule_id_avp (AVP string)\n\nIf defined, an AVP where successful next_gw and from_gw functions store\nmatching rule's id.\n\n*There is NO default value, i.e, if not defined, matching rule's id is\nnot stored anywhere.*\n\n    ...\n    modparam(\"lcr\", \"rule_id_avp\", \"$avp(lcr_ruleid)\")\n    ...\n                \n\n",
  "mt_pv_values": "### mt_pv_values (AVP string)\n\nIf defined and mt_value is given for a rule, load_gws() matches caller\nURI userpart to a mtree given as mtree parameter.\n\nIf defined, must have the same value as mtree module pv_values\nparameter.\n\n*There is NO default value.*\n\n    ...\n    modparam(\"lcr\", \"mt_pv_values\", \"$avp(lcr_mt_values)\")\n    ...\n\n",
  "mtree": "### mtree (string)\n\nName of mtree to which load_gws() matches caller URI userpart.\n\n*Default value is \"lcr\".*\n\n    ...\n    modparam(\"lcr\", \"mtree\", \"caller_tree\")\n    ...\n\n",
  "defunct_capability": "### defunct_capability (integer)\n\nTells if defunct capability of (non-responsive) gateways is supported.\nNon-zero value turns on defunct capability.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"lcr\", \"defunct_capability\", 1)\n    ...\n\n",
  "lcr_id_avp": "### lcr_id_avp (AVP string)\n\nInternal AVP that load_gws() function uses to store LCR instance\nidentifier of loaded gateways. Only needed if gateway defunct capability\nhas been activated.\n\n*There is NO default value.*\n\n    ...\n    modparam(\"lcr\", \"lcr_id_avp\", \"$avp(lcr_id)\")\n    ...\n\n",
  "defunct_gw_avp": "### defunct_gw_avp (AVP string)\n\nInternal AVP that next_gw() function uses to store internal index of the\nselected gateway for later use by defunct_gw() function. Only needed if\ngateway defunct capability has been activated.\n\n*There is NO default value.*\n\n    ...\n    modparam(\"lcr\", \"defunct_gw_avp\", \"$avp(lcr_defunct_gw)\")\n    ...\n\n",
  "lcr_rule_hash_size": "### lcr_rule_hash_size (integer)\n\nDefines the size of hash table used to store LCR rules. Hashing is done\nbased on rule's prefix. Larger value means less collisions with other\nprefixes. Hash size value should be a power of 2.\n\n*Default value is 128.*\n\n    ...\n    modparam(\"lcr\", \"lcr_rule_hash_size\", 1024)\n    ...\n\n",
  "lcr_gw_count": "### lcr_gw_count (integer)\n\nDefines the maximum number of gateways in lcr_gw table.\n\n*Default value is 128.*\n\n    ...\n    modparam(\"lcr\", \"lcr_gw_count\", 1024)\n    ...\n\n",
  "dont_strip_or_prefix_flag": "### dont_strip_or_prefix_flag (integer)\n\nDefines the flag number used to tell if stripping and tagging is done\nfor the selected gateway.\n\n*Default value is -1 meaning that the flag is not defined.*\n\n    ...\n    modparam(\"lcr\", \"dont_strip_or_prefix_flag\", 10)\n    ...\n\n",
  "priority_ordering": "### priority_ordering (integer)\n\nDefines how matching gateways are ordered (see Overview section).\n\n*Default value is 0.*\n\n    ...\n    modparam(\"lcr\", \"priority_ordering\", 1)\n    ...\n\n",
  "fetch_rows": "### fetch_rows (integer)\n\nThe number of the rows to be fetched at once from database when loading\ndata from lcr_rule table. This value can be used to tune the load time\nat startup. For 1MB of private memory (default) it should be below 3750.\nIn order for this parameter to have effect, the database driver must\nsupport fetch_result() capability.\n\n*Default value is \u201c1024\u201d.*\n\n    ...\n    modparam(\"lcr\", \"fetch_rows\", 3000)\n    ...\n\n",
  "ping_interval": "### ping_interval (integer)\n\nInterval in seconds for sending OPTIONS ping requests to gateways that,\ndue to failures, have been marked as inactive by inactivate_gw()\nfunction call. If an inactive gateway later gives a valid response (see\n`ping_valid_reply_codes`) to a ping request, it is marked again as\nactive.\n\nIf value of this parameter is greater than zero, tm module must have\nbeen loaded and parameters `lcr_id_avp` and `defunct_gw_avp` must have\nbeen defined. Value \u201c0\u201d disables sending of OPTIONS ping requests to\nfailed gateways.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"lcr\", \"ping_interval\", 15)\n    ...\n\n",
  "ping_inactivate_threshold": "### ping_inactivate_threshold (integer)\n\nTells after how many failures (= inactivate_gw() function calls) a\ngateway is marked as inactive.\n\n*Default value is \u201c1\u201d, i.e., gateway is inactivated after first\nfailure.*\n\n    ...\n    modparam(\"lcr\", \"ping_inactivate_threshold\", 3)\n    ...\n\n",
  "ping_valid_reply_codes": "### ping_valid_reply_codes (string)\n\nA comma separated list of SIP reply codes, which are accepted as valid\nreplies to OPTIONS ping requests. Reply codes 2xx are by default\naccepted as valid replies and they don't need to be listed here.\n\n*Default value is \u201c\u201d, i.e., only 2xx replies are considered as valid\nreplies.*\n\n    ...\n    modparam(\"lcr\", \"ping_valid_reply_codes\", \"403,405,501\")\n    ...\n\n",
  "ping_from": "### ping_from (string)\n\nFrom URI used in OPTIONS ping requests.\n\n*Default value is \u201csip:pinger@localhost\u201d.*\n\n    ...\n    modparam(\"lcr\", \"ping_from\", \"sip:proxy.operator.com\")\n    ...\n\n",
  "ping_socket": "### ping_socket (string)\n\nSocket to be used for sending OPTIONS ping request. If not set or set to\n\u201c\u201d, default socket is used.\n\n*Default value is \u201c\u201d.*\n\n    ...\n    modparam(\"lcr\", \"ping_socket\", \"192.98.102.10:5060\")\n    ...\n\n"
 },
 "call_obj": {
  "start": "### start (integer)\n\nFirst number to assign when no number has been assigned yet.\n\n*This parameter has no default value. Not setting it raises an error.*\n\nIts value shall be greater than zero.\n\n    ...\n    modparam(\"call_obj\", \"start\", 10)\n    ...\n\n",
  "end": "### end (integer)\n\nLast number to assign when all other numbers have been already assigned.\n\n*No default value. Not setting this parameter raises an error.*\n\nIts value shall be greater than zero.\n\n    ...\n    modparam(\"call_obj\", \"end\", 93)\n    ...\n                \n\n"
 },
 "dmq_usrloc": {
  "enable": "### enable (int)\n\nThe parameter controls whether the replication is active or not. The\nvalue can be:\n\n- 0 - replication is disabled\n\n- 1 - replication is enabled\n\n*Default value is 0.*\n\n    ...\n    modparam(\"dmq_usrloc\", \"enable\", 1)\n    ...\n\n",
  "sync": "### sync (int)\n\nThe parameter controls whether to request synchronization of all usrloc\nrecords at startup. The value can be:\n\n- 0 - disabled\n\n- 1 - enabled\n\n*Default value is 1.*\n\n    ...\n    modparam(\"dmq_usrloc\", \"sync\", 0)\n    ...\n\n",
  "batch_size": "### batch_size (int)\n\nThe parameter controls whether to throttle synchronization of all\ncontacts in batches. Once a batch of SIP requests is sent out, then\nsleep for 'batch_usleep' microseconds. The value can be:\n\n- \\<=0 - disabled (no batching)\n\n- \\>0 - how many records to be sent in a batch\n\n*Default value is 0.*\n\n    ...\n    modparam(\"dmq_usrloc\", \"batch_size\", 4000)\n    ...\n\n",
  "batch_usleep": "### batch_usleep (int)\n\nThe parameter controls whether to throttle synchronization of all\ncontacts in batches. Once a batch of SIP requests is sent out, then\nsleep for 'batch_usleep' microseconds. The value can be:\n\n- \\<=0 - no sleep (it disables the batching)\n\n- \\>0 - how many microseconds to sleep before sending out another batch\n  of usrloc records.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"dmq_usrloc\", \"batch_usleep\", 1000)\n    ...\n\n",
  "batch_msg_size": "### batch_msg_size (int)\n\nThe parameter controls the size of the messages during a sync. This is\nto make sure the messages are never larger than 65536 (the maximum\ndatagram size).\n\nNote that batch_msg_contacts will also be checked.\n\n*Default value is 60000. Maximum value is 60000.*\n\n    ...\n    modparam(\"dmq_usrloc\", \"batch_msg_contacts\", 50)  # 50 contacts / message\n    modparam(\"dmq_usrloc\", \"batch_msg_size\", 500000)\n    # with this config, when doing a full sync, each message will be sent a soon as the body is larger 50K or contains 50 contacts\n    ...\n\n",
  "batch_msg_contacts": "### batch_msg_contacts (int)\n\nThe parameter controls the amount of contact per message/transaction\nduring a sync.\n\nNote that batch_msg_size will also be checked.\n\n*Default value is 1. Maximum value is 150.*\n\n    ...\n    modparam(\"dmq_usrloc\", \"batch_msg_contacts\", 50)  # 50 contacts / message\n    modparam(\"dmq_usrloc\", \"batch_size\", 10000)       # 10000 contacts / batch\n    modparam(\"dmq_usrloc\", \"batch_usleep\", 500000)    # one batch every 500ms\n    # syncing 20K contacts/second with 50 contacts/message\n    ...\n\n",
  "usrloc_domain": "### usrloc_domain (string)\n\nThe usrloc domain to synchronize.\n\n*Default value is \u201clocation\u201d.*\n\n    ...\n    modparam(\"dmq_usrloc\", \"usrloc_domain\", \"my_domain\")\n    ...\n\n",
  "replicate_socket_info": "### replicate_socket_info (int)\n\nThe parameter controls whether the socket replication is active or not.\nThis is important for anycast scenarios. The value can be:\n\n- 0 - disabled\n\n- 1 - enabled, replicate socket by proto:host:port\n\n- 2 - enabled, replicate socket by socket name\n\n*Default value is 0.*\n\n    ...\n    modparam(\"dmq_usrloc\", \"replicate_socket_info\", 1)\n    ...\n\n",
  "usrloc_delete": "### usrloc_delete (int)\n\nEnable (1) or disable (0) synchronizing usrloc delete actions. Disabling\ndelete actions can be useful when user location data is ephemeral.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"dmq_usrloc\", \"usrloc_delete\", 0)\n    ...\n"
 },
 "ims_auth": {
  "name": "### name (string)\n\nThis is the name of the SCSCF as identified in communication with the\nHSS (Server-Name AVP of MAR).\n\n*Default value is 'sip:scscf.ims.smilecoms.com:6060'.*\n\n    ...\n    modparam(\"ims_auth\", \"name\", \"sip:scscf3.ims.smilecoms.com:6060\")\n    ...\n\n",
  "auth_data_hash_size": "### auth_data_hash_size (integer)\n\nThis is the size of the hash table used to store auth vectors (AV).\nDefault value is fine for most people. Use the parameter if you really\nneed to change it.\n\nDefault value is \u201c1024\u201d.\n\n    ...\n    modparam(\"ims_auth\", \"auth_data_hash_size\", 1024)\n    ...\n\n",
  "auth_vector_timeout": "### auth_vector_timeout (integer)\n\nThis is the time, in seconds, that a SENTauth vector is valid for. If\nthere is no response ...\n\nDefault value is \u201c60\u201d.\n\n    ...\n    modparam(\"ims_auth\", \"auth_vector_timeout\", \"domain\")\n    ...\n\n",
  "auth_data_timeout": "### auth_data_timeout (int)\n\nTime, in seconds, a used auth vector is valid for.\n\nDefault value is \u201c60\u201d.\n\n    ...\n    modparam(\"ims_auth\", \"auth_data_timeout\", 60)\n    ...\n\n",
  "av_request_at_once": "### av_request_at_once (integer)\n\nHow many auth vectors to request in MAR.\n\nDefault value is 1\n\n    ...\n    modparam(\"ims_auth\", \"av_request_at_once\", 1)\n    ...\n\n",
  "av_request_at_sync": "### av_request_at_sync (integer)\n\nHow many auth vectors to request at sync. Default value is 1.\n\n    ...\n    modparam(\"ims_auth\", \"av_request_at_sync\", 1)\n    ...\n\n",
  "registration_default_algorithm": "### registration_default_algorithm (string)\n\nThe default authentication algorithm to use for registration if one is\nnot specified.\n\nOptions are:\n\n- *AKAV1-MD5*\n\n- *AKAV2-MD5*\n\n- *MD5*\n\n- HSS-Selected - HSS will decide on auth algorithm\n\nDefault value is \u201cAKAv1-MD5\u201d.\n\n    ...\n    modparam(\"ims_auth\", \"registration_default_algorithm\", \"HSS-Selected\")\n    ...\n\n",
  "registration_qop": "### registration_qop (string)\n\nThe QOP options to put in the authorisation challenges.\n\nDefault value of this parameter is \u201cauth,auth-int\u201d.\n\n    ...\n    modparam(\"ims_auth\", \"registration_qop\", \"auth-int\")\n    ...\n\n",
  "cxdx_forced_peer": "### cxdx_forced_peer (string)\n\nFQDN of Diameter Peer (HSS) to use for communication (MAR). If you use\nthis, the routing defined in your diameter xml configuration file (CDP)\nwill be ignored and as a result you will lose the benefits of load\nbalancing and failover.\n\nDefault value is \u201c\u201d.\n\n    ...\n    modparam(\"ims_auth\", \"cxdx_forced_peer\", \"hss.ims.smilecoms.com\")\n    ...\n\n",
  "cxdx_dest_realm": "### cxdx_dest_realm (string)\n\nDestination realm to be used in Diameter messages to HSS\n\nDefault value is \u201cims.smilecoms.com\u201d.\n\n    ...\n    modparam(\"ims_auth\", \"cxdx_dest_realm\", \"ims.smilecoms.com\")\n    ...\n\n",
  "cxdx_dest_host": "### cxdx_dest_host (string)\n\nDestination Host to be used in Diameter-MAR messages to HSS\n\nDefault value is \u201c\u201d (not set).\n\n    ...\n    modparam(\"ims_auth\", \"cxdx_dest_host\", \"hss.ims.ng-voice.com\")\n    ...\n\n",
  "max_nonce_reuse": "### max_nonce_reuse (integer)\n\nDefines, how many times a nonce can be reused (provided nc is\nincremented)\n\nDefault value is \u201c0\u201d (don't allow reuse).\n\n    ...\n    modparam(\"ims_auth\", \"max_nonce_reuse\", 1)\n    ...\n\n",
  "add_authinfo_hdr": "### add_authinfo_hdr (integer)\n\nShould an Authentication-Info header be added on 200 OK responses?\n\nDefault value is \u201c1\u201d (add Authentication-Info header).\n\n    ...\n    modparam(\"ims_auth\", \"add_authinfo_hdr\", 0)\n    ...\n\n",
  "ignore_failed_auth": "### ignore_failed_auth (integer)\n\nIgnore invalid passwords (only IMPI/IMPU is checked).\n\nIt should be used only for testing, e.g. load balancing with SIPP where\nwe don't want to worry about auth.\n\nDefault value is \u201c0\u201d (don't ignore the failed authentication).\n\n    ...\n    modparam(\"ims_auth\", \"ignore_failed_auth\", 1)\n    ...\n\n",
  "av_check_only_impu": "### av_check_only_impu (integer)\n\nWhen storing the authentication vectors for an account, use either\nIMPI/IMPU (=0, default) or IMPU (=1).\n\nIn case the IMPI is different from the IMPU, this option needs to be\nenabled to allow registration from classic \"SIP-clients\", such as Snom\nphones and others, as they do not send an authentication username in the\nfirst REGISTER.\n\nDefault value is \u201c0\u201d (store authentication vectors based on IMPI/IMPU).\n\n    ...\n    modparam(\"ims_auth\", \"av_check_only_impu\", 1)\n    ...\n\n"
 },
 "ndb_cassandra": {
  "host": "### host (str)\n\nHost of Cassandra node.\n\nPort of Cassandra node.\n\n    ...\n    modparam(\"ndb_cassandra\", \"host\", \"10.22.22.190\")\n    modparam(\"ndb_cassandra\", \"port\", 9160)\n    ...\n\n"
 },
 "nathelper": {
  "force_socket": "### force_socket (string)\n\nSocket to be used when sending NAT pings for UDP communication. If no\none specified, the OS will choose a socket.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"nathelper\", \"force_socket\", \"127.0.0.1:5060\")\n    ...\n\n",
  "natping_interval": "### natping_interval (integer)\n\nPeriod of time in seconds between sending the NAT pings to all currently\nregistered UAs to keep their NAT bindings alive. Value of 0 disables\nthis functionality.\n\n<div class=\"note\">\n\nEnabling the NAT pinging functionality will force the module to bind\nitself to USRLOC module.\n\n</div>\n\n*Default value is 0.*\n\n    ...\n    modparam(\"nathelper\", \"natping_interval\", 10)\n    ...\n\n",
  "ping_nated_only": "### ping_nated_only (integer)\n\nIf this parameter is set to 1 then only contacts that have the behind\nNAT \u201cnat_bflag\u201d flag set in user location records get the NAT ping (the\n\u201cnat_bflag\u201d is specified via modparam of usrloc module). By default the\nping is done with 4-bytes UDP packet. If sipping_bflag is also set, then\nthe ping is done with a stateless SIP request (by default: OPTIONS\nrequest).\n\nIf it is 0, then all contacts get a NAT ping, by default being the\n4-bytes UDP packet. If it is 0 and sipping_bflag parameter is set, then\nSIP-request-based pinging is sent to all contacts.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"nathelper\", \"ping_nated_only\", 1)\n    ...\n\n",
  "natping_processes": "### natping_processes (integer)\n\nHow many timer processes should be created by the module for the\nexclusive task of sending the NAT pings.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"nathelper\", \"natping_processes\", 3)\n    ...\n\n",
  "natping_socket": "### natping_socket (string)\n\nSpoof the natping's source-ip to this address. Works only for IPv4.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"nathelper\", \"natping_socket\", \"192.168.1.1:5006\")\n    ...\n\n",
  "received_avp": "### received_avp (str)\n\nThe name of the Attribute-Value-Pair (AVP) used to store the URI\ncontaining the received IP, port, and protocol. The URI is created by\nfix_nated_register function of nathelper module and the attribute is\nthen used by the registrar to store the received parameters. Do not\nforget to change the value of corresponding parameter in registrar\nmodule if you change the value of this parameter.\n\n<div class=\"note\">\n\nYou must set this parameter if you use `fix_nated_register`. In such\ncase you must set the parameter with same name in the \u201cregistrar\u201d module\nto same value.\n\n</div>\n\n*Default value is \"NULL\" (disabled).*\n\n    ...\n    modparam(\"nathelper\", \"received_avp\", \"$avp(i:42)\")\n    ...\n\n",
  "sipping_bflag": "### sipping_bflag (integer)\n\nWhich branch flag should be used by the module to identify NATed\ncontacts for which it should perform NAT ping via a SIP request instead\nof dummy UDP packet.\n\n*Default value is -1 (disabled).*\n\n    ...\n    modparam(\"nathelper\", \"sipping_bflag\", 7)\n    ...\n\n",
  "sipping_from": "### sipping_from (string)\n\nThe parameter sets the SIP URI to be used in generating the SIP requests\nfor NAT ping purposes. To enable the SIP request pinging feature, you\nhave to set this parameter. The SIP request pinging will be used only\nfor requests marked so.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"nathelper\", \"sipping_from\", \"sip:pinger@siphub.net\")\n    ...\n\n",
  "sipping_method": "### sipping_method (string)\n\nThe parameter sets the SIP method to be used in generating the SIP\nrequests for NAT ping purposes.\n\n*Default value is \u201cOPTIONS\u201d.*\n\n    ...\n    modparam(\"nathelper\", \"sipping_method\", \"INFO\")\n    ...\n\n",
  "natping_disable_bflag": "### natping_disable_bflag (integer)\n\nWhat branch flag should be used by the module to disable NAT pings on a\nper-registration basis. If the given flag is set for a particular\nregistration, then no NAT pings will be sent at all, regardless of any\nother conditions.\n\n*Default value is -1 (disabled).*\n\n    ...\n    modparam(\"nathelper\", \"natping_disable_bflag\", 8)\n    ...\n\n",
  "nortpproxy_str": "### nortpproxy_str (string)\n\nThe parameter sets the SDP attribute used by nathelper to mark the\npacket SDP that information have already been mangled.\n\nIf empty string, no marker will be added or checked.\n\n<div class=\"note\">\n\nThe string must be a complete SDP line, including the EOH (\\r\\n).\n\n</div>\n\n*Default value is \u201ca=nortpproxy:yes\\r\\n\u201d.*\n\n    ...\n    modparam(\"nathelper\", \"nortpproxy_str\", \"a=sdpmangled:yes\\r\\n\")\n    ...\n\n",
  "keepalive_timeout": "### keepalive_timeout (int)\n\nThe parameter sets the interval in seconds after which a natted contact\nis removed from location table if it does not reply to SIP keepalives\n(usually OPTIONS ping requests).\n\nThe features is available only for UDP contacts that are stored in\nmemory (not working for db only mode for usrloc module).\n\nKeepalives are sent stateless, not using TM module. The value of this\nparameter has to be few times higher than natping_interval.\n\n*Default value is \u201c0\u201d (feature disabled).*\n\n    ...\n    modparam(\"nathelper\", \"keepalive_timeout\", 120)\n    ...\n\n",
  "udpping_from_path": "### udpping_from_path (int)\n\nEnable sending UDP pings (keepalives) using raw socket from Path\naddress.\n\n*Default value is \u201c0\u201d (feature disabled).*\n\n    ...\n    modparam(\"nathelper\", \"udpping_from_path\", 1)\n    ...\n\n",
  "append_sdp_oldmediaip": "### append_sdp_oldmediaip (int)\n\nThe parameter controls if oldmediaip field should be appended to the\nSDP.\n\n*Default value is \u201c1\u201d (feature enabled).*\n\n    ...\n    modparam(\"nathelper\", \"append_sdp_oldmediaip\", 1)\n    ...\n\n",
  "filter_server_id": "### filter_server_id (int)\n\nFilter contacts by \u201cserver_id\u201d core parameter. Use this parameter to\nlimit pinging. When set to \u201c1\u201d, only proxy instances which send packets\nare those where core server_id matches server_id saved in usrloc.\n*Default value is \u201c0\u201d (disabled).*\n\n    ...\n    modparam(\"nathelper\", \"filter_server_id\", 1)\n    ...\n\n",
  "nat_addr_mode": "### nat_addr_mode (int)\n\nIf set to 0, only default private net addresses are checked by\nnat_uac_test(). If set to 1, other reserved net addresses are checked by\nnat_uac_test() as well.\n\nDefault private net addresses are:\n\n- 10.0.0.0/8\n\n- 172.16.0.0/12\n\n- 192.168.0.0/16\n\n- 100.64.0.0/10 - RFC6598 - Carrier Grade NAT\n\n- 192.0.0.0/29 - RFC7335 - IPv4 Service Continuity Prefix\n\nReserved net addresses are:\n\n- 192.0.0.0/24 - RFC7335 - IETF Protocol Assignments\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"nathelper\", \"nat_addr_mode\", 0)\n    ...\n\n",
  "alias_name": "### alias_name (string)\n\nThe parameter sets the name of the Contact URI parameter set by\nset_contact_alias() or add_contact_alias() and processed by\nhandle_ruri_alias() in R-URI.\n\n*Default value is \u201calias\u201d.*\n\n    ...\n    modparam(\"nathelper\", \"alias_name\", \"saddr\")\n    ...\n\n"
 },
 "smsops": {},
 "cdp_avp": {},
 "xhttp_rpc": {
  "xhttp_rpc_root": "### xhttp_rpc_root (str)\n\nSpecifies the root path for RPC http requests. The link to the RPC web\ninterface must be constructed using the following pattern:\nhttp://\\[server_IP\\]:\\[tcp_port\\]/\\[xhttp_rpc_root\\]\n\n*Default value is \"rpc\".*\n\n    ...\n    modparam(\"xhttp_rpc\", \"xhttp_rpc_root\", \"http_rpc\")\n    ...\n\n",
  "xhttp_rpc_buf_size": "### xhttp_rpc_buf_size (str)\n\nSpecifies the maximum length of the buffer (in bytes) used to write the\nRPC reply information in order to build the HTML response.\n\n*Default value is 0 (auto set to 1/3 of the size of the configured pkg\nmem).*\n\n    ...\n    modparam(\"xhttp_rpc\", \"xhttp_rpc_buf_size\", 1024)\n    ...\n\n"
 },
 "alias_db": {
  "db_url": "### db_url (str)\n\nDatabase URL.\n\n*Default value is \u201cmysql://kamailioro:kamailioro@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"alias_db\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "user_column": "### user_column (str)\n\nName of the column storing username.\n\n*Default value is \u201cusername\u201d.*\n\n    ...\n    modparam(\"alias_db\", \"user_column\", \"susername\")\n    ...\n\n",
  "domain_column": "### domain_column (str)\n\nName of the column storing user's domain.\n\n*Default value is \u201cdomain\u201d.*\n\n    ...\n    modparam(\"alias_db\", \"domain_column\", \"sdomain\")\n    ...\n\n",
  "alias_user_column": "### alias_user_column (str)\n\nName of the column storing alias username.\n\n*Default value is \u201calias_username\u201d.*\n\n    ...\n    modparam(\"alias_db\", \"alias_user_column\", \"auser\")\n    ...\n\n",
  "alias_domain_column": "### alias_domain_column (str)\n\nName of the column storing alias domain.\n\n*Default value is \u201calias_domain\u201d.*\n\n    ...\n    modparam(\"alias_db\", \"alias_domain_column\", \"adomain\")\n    ...\n\n",
  "use_domain": "### use_domain (int)\n\nSpecifies whether to use or not the domain from R-URI when searching for\nalias. If set to 0, the domain from R-URI is not used, if set to 1 the\ndomain from R-URI is used.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"alias_db\", \"use_domain\", 1)\n    ...\n\n",
  "domain_prefix": "### domain_prefix (str)\n\nSpecifies the prefix to be stripped from the domain in R-URI before\ndoing the search.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"alias_db\", \"domain_prefix\", \"sip.\")\n    ...\n\n",
  "append_branches": "### append_branches (int)\n\nIf the alias resolves to many SIP IDs, the first is replacing the R-URI,\nthe rest are added as branches.\n\n*Default value is \u201c0\u201d (0 - don't add branches; 1 - add branches).*\n\n    ...\n    modparam(\"alias_db\", \"append_branches\", 1)\n    ...\n\n"
 },
 "db_unixodbc": {
  "ping_interval": "### ping_interval (int)\n\nSets the ping time interval.\n\n*Default value is \u201c300\u201d seconds.*\n\n    ...\n    modparam(\"db_unixodbc\", \"ping_interval\", 600)\n    ...\n\n",
  "auto_reconnect": "### auto_reconnect (int)\n\nTurns on or off the auto_reconnect mode.\n\n*Default value is \u201c1\u201d, this means it is enabled.*\n\n    ...\n    modparam(\"db_unixodbc\", \"auto_reconnect\", 0)\n    ...\n\n",
  "use_escape_common": "### use_escape_common (int)\n\nEscape values in query using internal escape_common() function. It\nescapes single quote ''', double quote '\"', backslash '\\\\, and NULL\ncharacters.\n\nYou should enable this parameter if you know that the ODBC driver\nconsiders the above characters as special (for marking begin and end of\na value, escape other characters ...). It prevents against SQL\ninjection.\n\n*Default value is \u201c0\u201d (0 = disabled; 1 = enabled).*\n\n    ...\n    modparam(\"db_unixodbc\", \"use_escape_common\", 1)\n    ...\n\n",
  "replace_query": "### replace_query (int)\n\nTells if the ODBC replace query is supported by the DB odbc driver.\n\n*Default value is \u201c1\u201d seconds.*\n\n    ...\n    modparam(\"db_unixodbc\", \"replace_query\", 0)\n    ...\n\n",
  "quote_char": "### quote_char (str)\n\nThe character to be used for quoting the table and column names in\ndatabase queries.\n\n*Default value: \u201cnot set\u201d (no quoting).*\n\n    ...\n    modparam(\"db_unixodbc\", \"quote_char\", \"`\")\n    ...\n\n"
 },
 "db_cassandra": {
  "schema_path": "### schema_path (string)\n\nThe directory where the files with the table schemas are located. This\ndirectory has to contain the subdirectories corresponding to the\ndatabase name (name of the directory = name of the database). These\ndirectories, in turn, contain the files with the table schemas. See the\nschemas in utils/kamctl/dbcassandra directory.\n\n       ...\n       modparam(\"db_cassandra\", \"schema_path\",\n                   \"/usr/local/kamailio/etc/kamctl/dbcassandra\")\n       ...\n\n"
 },
 "ims_usrloc_scscf": {
  "db_url": "### db_url (string)\n\ndatabase URL for storing impu/contacts records\n\n            modparam(\"ims_usrloc_scscf\", \"db_url\", \"mysql//username:password@localhost/scscf\")\n            \n\n",
  "db_mode": "### db_mode (string)\n\nThis is the database mode to be used for the SCSCF usrloc data\npersistent storage. Currently this module supports the Write-Back scheme\nonly.\n\n- 0 - This disables database completely. Only memory will be used.\n  Contacts will not survive restart.\n\n- 1 - Write-Backend scheme. All changes are made to memory and database\n  synchronization is done in the timer\n\n*Default value is 0.*\n\n    ...\n            modparam(\"ims_usrloc_scscf\", \"db_mode\", 1)\n            \n\n"
 },
 "ruxc": {
  "http_timeout": "### http_timeout (int)\n\nThe interval in miliseconds after which the HTTP GET or POST query times\nout. It is the overall timeout, including DNS resolution, connecting\ntime, redirects, and reading the response body. Slow DNS resolution may\ncause a request to exceed the timeout, because the DNS request cannot be\ninterrupted with the available APIs. It takes precedence over\nhttp_timeout_read() and http_timeout_write(), but not\nhttp_timeout_connect. See also the comments in\n'https://github.com/algesten/ureq/blob/main/src/agent.rs'.\n\nUse 0 to disable setting it in the library.\n\n*Default value is 5000 (5 secs).*\n\n    ...\n    modparam(\"ruxc\", \"http_timeout\", 2000)\n    ...\n\n",
  "http_timeout_connect": "### http_timeout_connect (int)\n\nThe interval in miliseconds after which to give up on connecting to the\nHTTP/S server. If http_timeout is set, this one takes precedence. The\nlibrary beneath has a default 30 seconds connect timeout.\n\nUse 0 to disable setting it in the library.\n\n*Default value is 5000 (5 secs).*\n\n    ...\n    modparam(\"ruxc\", \"http_timeout_connect\", 2000)\n    ...\n\n",
  "http_timeout_read": "### http_timeout_read (int)\n\nThe interval in miliseconds after which the read on HTTP/S connection\nsocket timeouts. If http_timeout is set, it takes precedence.\n\nUse 0 to disable setting it in the library.\n\n*Default value is 5000 (5 secs).*\n\n    ...\n    modparam(\"ruxc\", \"http_timeout_read\", 2000)\n    ...\n\n",
  "http_timeout_write": "### http_timeout_write (int)\n\nThe interval in miliseconds after which the write on HTTP/S connection\nsocket timeouts. If http_timeout is set, it takes precedence.\n\nUse 0 to disable setting it in the library.\n\n*Default value is 5000 (5 secs).*\n\n    ...\n    modparam(\"ruxc\", \"http_timeout_write\", 2000)\n    ...\n\n",
  "http_tlsmode": "### http_tlsmode (int)\n\nThe mode to connect over TLS to HTTPS sites: 0 accept all certificates;\n1 - accept trusted certificates.\n\n*Default value is 0 (accept all certificates).*\n\n    ...\n    modparam(\"ruxc\", \"http_tlsmode\", 1)\n    ...\n\n",
  "http_reuse": "### http_reuse (int)\n\nSet to 1 in order to reuse the connection for all requests (each\nKamailio process has its own connection). Useful to avoid TCP connect\n(and TLS handshake) when all requests are performed against the same\nHTTP/S server.\n\nSet to 2 in order to keep connections per base URL (scheme://host:port)\nindexed in a hash map. Useful when doing HTTP/S requests to many\nservers.\n\n*Default value is 0 (new connection for each request).*\n\n    ...\n    modparam(\"ruxc\", \"http_reuse\", 1)\n    ...\n\n",
  "http_retry": "### http_retry (int)\n\nHow many times to retry if the HTTP request does not get a 200 OK\nresponse.\n\n*Default value is 0 (no retry).*\n\n    ...\n    modparam(\"ruxc\", \"http_retry\", 2)\n    ...\n\n",
  "http_logtype": "### http_logtype (int)\n\nSet the log type for libruxc http functions: 0 - stdout; 1 - syslog.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"ruxc\", \"http_logtype\", 1)\n    ...\n\n",
  "http_debug": "### http_debug (int)\n\nSet the debug mode for libruxc http functions: 0 - no debug; 1 - errors;\n2 - debug.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"ruxc\", \"http_debug\", 1)\n    ...\n\n"
 },
 "http_async_client": {
  "workers": "### workers (integer)\n\nNumber of worker processes to be started to send HTTP requests and\nasynchronously handle responses.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"http_async_client\", \"workers\", 2)\n    ...\n\n",
  "connection_timeout": "### connection_timeout (integer)\n\nDefines in milliseconds how long Kamailio waits for a response from HTTP\nserver.\n\n*Default value is 500ms.*\n\n    ...\n    modparam(\"http_async_client\", \"connection_timeout\", 1000)\n    ...\n\n",
  "hash_size": "### hash_size (integer)\n\nThe size of the hash table internally used to keep the requests. A\nlarger table is much faster but consumes more memory. The hash size must\nbe a power of two, otherwise it will be rounded down to the nearest\npower of two.\n\n*Default value is 2048.*\n\n    ...\n    modparam(\"http_async_client\", \"hash_size\", 1024)\n    ...\n\n",
  "tls_version": "### tls_version (integer)\n\nFor HTTPS connections, what's the preferred SSL version.\nhttp://curl.haxx.se/libcurl/c/CURLOPT_SSLVERSION.html\n\n*Default value is 0 (default SSL version).*\n\n    ...\n    modparam(\"http_async_client\", \"tls_version\", 6)\n    ...\n\n",
  "tls_verify_host": "### tls_verify_host (integer)\n\nFor HTTPS connections, whether the client should verify the server host.\nhttp://curl.haxx.se/libcurl/c/CURLOPT_SSL_VERIFYHOST.html\n\n*Default value is 2 (enabled).*\n\n    ...\n    modparam(\"http_async_client\", \"tls_verify_host\", 0)\n    ...\n\n",
  "tls_verify_peer": "### tls_verify_peer (integer)\n\nFor HTTPS connections, whether the client should verify the server\nidentity. http://curl.haxx.se/libcurl/c/CURLOPT_SSL_VERIFYPEER.html\n\n*Default value is 1 (enabled).*\n\n    ...\n    modparam(\"http_async_client\", \"tls_verify_peer\", 0)\n    ...\n\n",
  "curl_verbose": "### curl_verbose (integer)\n\nIf defined to a non-zero value, extra information from cURL (request and\nresponse headers) will be included in the kamailio logs, with LM_INFO\npriority.\n\n*Default value is 0 (disabled).*\n\n    ...\n    modparam(\"http_async_client\", \"curl_verbose\", 1)\n    ...\n\n",
  "curl_follow_redirect": "### curl_follow_redirect (integer)\n\nIf defined to a non-zero value, will tell curl to follow HTTP 3xx\nredirects.\n\n*Default value is 0 (disabled).*\n\n    ...\n    modparam(\"http_async_client\", \"curl_follow_redirect\", 1)\n    ...\n\n",
  "memory_manager": "### memory_manager (string)\n\nChoose the memory manager used by curl:\n\n- *shm*: curl will use kamailio's SHM pool and memory manager\n\n- *sys*: curl will use the system memory and memory manager (malloc,\n  free, ...)\n\n*Note:* if this module is used in conjunction with another module using\nlibcurl (http_client, utils, xcap, xcap_client), it must be loaded as\nfirst one for this parameter to have effect, otherwise curl will likely\nuse the system memory allocator by default. On the other hand if the\nmodule is loaded before any other module using libcurl, all the modules\nwill use the memory manager specified by this parameter.\n\n*Default value \"shm\"*\n\n    ...\n    modparam(\"http_async_client\", \"memory_manager\", \"sys\")\n    ...\n\n",
  "tls_client_cert": "### tls_client_cert (string)\n\nFor HTTPS connections, the file path of the TLS client certificate to be\nused. http://curl.haxx.se/libcurl/c/CURLOPT_SSLCERT.html\n\n*Default value is NULL (not used). Default type is PEM.*\n\n    ...\n    modparam(\"http_async_client\", \"tls_client_cert\", \"/etc/kamailio/ssl/clientcert.pem\")\n    ...\n\n",
  "tls_client_key": "### tls_client_key (string)\n\nFor HTTPS connections, the file path of the TLS client certificate key.\nhttp://curl.haxx.se/libcurl/c/CURLOPT_SSLKEY.html\n\n*Default value is NULL (not used).*\n\n    ...\n    modparam(\"http_async_client\", \"tls_client_key\", \"/etc/kamailio/ssl/clientcert.key\")\n    ...\n\n",
  "tls_ca_path": "### tls_ca_path (string)\n\nThe path of the directory holding the CA certificates.\nhttp://curl.haxx.se/libcurl/c/CURLOPT_CAPATH.html\n\n*Default value is NULL..*\n\n    ...\n    modparam(\"http_async_client\", \"tls_ca_path\", \"/etc/kamailio/ssl/ca/\")\n    ...\n\n",
  "tcp_keepalive": "### tcp_keepalive (integer)\n\nIf defined to a non-zero value, TCP keepalive will be enabled on cURL\nconnections.\n\n*Requires libcurl \\>= 7.25.0*\n\n*Default value is 0 (disabled).*\n\n    ...\n    modparam(\"http_async_client\", \"tcp_keepalive\", 1)\n    ...\n\n",
  "tcp_ka_idle": "### tcp_ka_idle (integer)\n\nTCP keep-alive idle time wait value (in seconds).\n\n*Default value is 0 (use cURL default value, 60s).*\n\n    ...\n    modparam(\"http_async_client\", \"tcp_ka_idle\", 30)\n    ...\n\n",
  "tcp_ka_interval": "### tcp_ka_interval (integer)\n\nTCP keep-alive interval (in seconds).\n\n*Default value is 0 (use cURL default value, 60s).*\n\n    ...\n    modparam(\"http_async_client\", \"tcp_ka_interval\", 120)\n    ...\n\n"
 },
 "jsonrpcs": {
  "pretty_format": "### pretty_format (int)\n\nPretty format for JSON-RPC response document if set to 1. To disable,\nset to 0.\n\n*Default value is '1' (on).*\n\n    ...\n    modparam(\"jsonrpcs\", \"pretty_format\", 0)\n    ...\n\n",
  "transport": "### transport (int)\n\nControl what transports are enabled. The value can be:\n\n- *0* - all transports that can be enabled. For http, the xhttp module\n  must be loaded. For FIFO, the fifo_name parameter must be set. For\n  DATAGRAM, the dgram_socket parameter must be set. For TCP, the\n  tcp_socket parameter must be set.\n\n- *1* - only HTTP transport\n\n- *2* - only FIFO transport\n\n- *4* - only DATAGRAM transport\n\n- *8* - only TCP transport\n\nThe value can be also a combination of specific transports. Make the sum\nof the desired transports to enable them. For example, enabling FIFO and\nDATAGRAM can be done setting transport=6.\n\n*Default value is '6' (fifo and datagram transport).*\n\n    ...\n    modparam(\"jsonrpcs\", \"transport\", 1)\n    ...\n\n",
  "fifo_name": "### fifo_name (str)\n\nThe name of the FIFO file to be created for listening and reading\nexternal commands. If the given path is not absolute, the fifo file is\ncreated relative to run_dir (global parameter).\n\n*Default value is \"kamailio_rpc.fifo\".*\n\n    ...\n    modparam(\"jsonrpcs\", \"fifo_name\", \"/tmp/kamailio_jsonrpc.fifo\")\n    ...\n\n",
  "fifo_mode": "### fifo_mode (int)\n\nPermission to be used for creating the listening FIFO file. It follows\nthe UNIX conventions.\n\n*Default value is 0660 (rw-rw----).*\n\n    ...\n    modparam(\"jsonrpcs\", \"fifo_mode\", 0600)\n    ...\n\n",
  "fifo_group": "### fifo_group (int or str)\n\nSystem Group to be used for creating the listening FIFO file.\n\n*Default value is the inherited one (process group).*\n\n    ...\n    modparam(\"jsonrpcs\", \"fifo_group\", 0)\n    modparam(\"jsonrpcs\", \"fifo_group\", \"root\")\n    ...\n\n",
  "fifo_user": "### fifo_user (int or str)\n\nSystem User to be used for creating the listening FIFO file.\n\n*Default value is the inherited one (process user).*\n\n    ...\n    modparam(\"jsonrpcs\", \"fifo_user\", 0)\n    modparam(\"jsonrpcs\", \"fifo_user\", \"root\")\n    ...\n\n",
  "fifo_reply_dir": "### fifo_reply_dir (str)\n\nDirectory to be used for creating the reply FIFO files.\n\n*Default value is \u201c/tmp/\u201d*\n\n    ...\n    modparam(\"jsonrpcs\", \"fifo_reply_dir\", \"/home/kamailio/tmp/\")\n    ...\n\n",
  "dgram_socket": "### dgram_socket (str)\n\nThe name of a Unix socket file or an IP address. The Unix datagram or\nUDP socket will be created using this parameter in order to read the\nexternal commands. Both IPv4 and IPv6 are supported. If the given path\nfor Unix socket is not absolute, then it is created relative to run_dir\n(global parameter).\n\n*Default value is \"kamailio_rpc.sock\".*\n\n    ...\n    modparam(\"jsonrpcs\", \"dgram_socket\", \"/tmp/kamailio_rpc.sock\")\n    ...\n    modparam(\"jsonrpcs\", \"dgram_socket\", \"udp:1.2.3.4:8090\")\n    ...\n\n",
  "dgram_workers": "### dgram_workers (str)\n\nThe number of worker processes to be created. Each worker process will\nbe a datagram server.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"jsonrpcs\", \"dgram_workers\", 4)\n    ...\n\n",
  "dgram_mode": "### dgram_mode (int)\n\nPermission to be used for creating the listening UNIX datagram socket.\nNot necessary for a UDP socket. It follows the UNIX conventions.\n\n*Default value is 0660 (rw-rw----).*\n\n    ...\n    modparam(\"jsonrpcs\", \"dgram_mode\", 0600)\n    ...\n\n",
  "dgram_group": "### dgram_group (int) dgram_group (str)\n\nGroup to be used for creating the listening UNIX socket.\n\n*Default value is the inherited one.*\n\n    ...\n    modparam(\"jsonrpcs\", \"dgram_group\", 0)\n    modparam(\"jsonrpcs\", \"dgram_group\", \"root\")\n    ...\n\n### dgram_user (int) dgram_group (str)\n\nUser to be used for creating the listening UNIX socket.\n\n*Default value is the inherited one.*\n\n    ...\n    modparam(\"jsonrpcs\", \"dgram_user\", 0)\n    modparam(\"jsonrpcs\", \"dgram_user\", \"root\")\n    ...\n\n",
  "dgram_timeout": "### dgram_timeout (int)\n\nThe reply will expire after trying to send it for socket_timeout\nmilliseconds.\n\n*Default value is 2000.*\n\n    ...\n    modparam(\"jsonrpcs\", \"dgram_timeout\", 2000)\n    ...\n\n",
  "tcp_socket": "### tcp_socket (str)\n\nThe name of tcp socket to listen on for RPC commands. Only IPv4/IPv6\nsockets are supported, unix file stream socket not yet.\n\n*Default value is \"\".*\n\n    ...\n    modparam(\"jsonrpcs\", \"tcp_socket\", \"udp:1.2.3.4:5042\")\n    ...\n\n"
 },
 "lost": {
  "exact_type": "### exact_type (int)\n\nIndicates to the location server that the contents of the\n\"location_type\" parameter must be strictly followed. Values are 0\n(false) or 1 (true).\n\nDefault: 0 (false)\n\n        ...\n        modparam(\"lost\", \"exact_type\", 1)\n        ...\n                    \n\n",
  "response_time": "### response_time (int)\n\nA time value indicating to the location server how long the client is\nprepared to wait for a response.\n\nThe value is expressed as integer, either -1 'emergencyDispatch', 0\n'emergencyRouting', a non-negative integer (\\>0) in units of\nmilliseconds. Note: The time value is indicative only.\n\nDefault: 0 ('emergencyRouting')\n\n        ...\n        modparam(\"lost\", \"response_time\", 0)\n        ...\n                    \n\n",
  "location_type": "### location_type (string)\n\nThe \"locationType\" element contains a list of types that are requested.\nValues are \"any\", \"geodetic\", \"civic\" or \"locationURI\" and combinations.\n\n- *any* - returns location information in all forms available\n\n- *geodetic* - returns a location by value in the form of a geodetic\n  location\n\n- *civic* - returns a location by value in the form of a civic address\n\n- *locationURI* - returns a set of location URIs (location by reference)\n\nDefault: \"geodetic locationURI\".\n\n        ...\n        modparam(\"lost\", \"location_type\", \"civic geodetic locationURI\")\n        ...\n                    \n\n",
  "post_request": "### post_request (int)\n\nDereferencing the location can be done using either the HTTP GET or POST\nmethod. This parameter globally defines whether only HTTP POST method\nshould be used. Values are 0 (GET) or 1 (POST).\n\nDefault: 0 (GET)\n\n        ...\n        modparam(\"lost\", \"post_request\", 1)\n        ...\n                    \n\n",
  "location_profile": "### location_profile (int)\n\nA Presence Information Data Format Location Object (PIDF-LO) may contain\ngeodetic or civic location profile or combinations. A LoST *findService*\ncontains only one location, which is selected via this parameter as\nfollows:\n\n- *0* - takes the first location of any type\n\n- *1* - takes the last location of any type\n\n- *2* - takes the first geodetic location\n\n- *3* - takes the first civic location\n\nDefault: 0 (first).\n\n        ...\n        modparam(\"lost\", \"location_profile, 2)\n        ...\n                    \n\n",
  "geoheader_type": "### geoheader_type (int)\n\nA Geolocation header may include a list of locationValues pointing to\neither a Presence Information Data Format Location Object (PIDF-LO) in\nthe SIP body using a content-indirection (cid:) URI per RFC4483\n([](https://tools.ietf.org/html/rfc4483)), or an http(s) URI pointing to\nan external source. This parameter supports filtering of the following\ntypes:\n\n- *0 (any)* - any URI (first or last)\n\n- *1 (cid)* - cid URI (aka Location-by-Value)\n\n- *2 (http)* - http URI (aka Location-by-Reference)\n\n- *3 (https)* - https URI (aka Location-by-Reference)\n\nDefault: 0 (any)\n\n        ...\n        modparam(\"lost\", \"geoheader_type\", 1)\n        ...\n                    \n\n",
  "geoheader_order": "### geoheader_order (int)\n\nA Geolocation header may include a list of locationValues. This\nparameter sets the order of the URI used to retrieve location\ninformation, either the first element of a certain type or the last.\nValues are 0 (first) or 1 (last).\n\nDefault: 0 (first)\n\n        ...\n        modparam(\"lost\", \"geoheader_order\", 0)\n        ...\n                    \n\n",
  "recursion": "### recursion (int)\n\nA Geolocation header may include a list of locationValues. This\nparameter sets the order of the URI used to retrieve location\ninformation, either the first element of a certain type or the last.\nValues are 0 (first) or 1 (last).\n\nDefault: 1 (allowed)\n\n        ...\n        modparam(\"lost\", \"recursion\", 0)\n        ...\n                    \n\n",
  "verbose": "### verbose (int)\n\nDetailed output of LoST findService, redirect or error response as shown\nbelow. Values are 0 (disabled) or 1 (enabled).\n\n        ### LOST expires:   [2031-01-27T14:54:21+00:00]\n        ### LOST lastUpdated:       [2021-01-29T14:54:21+00:00]\n        ### LOST source:    [ecrf.demo.gridgears.xx]\n        ### LOST sourceId:  [06ac5b1c-d6c8-42bd-a667-5d1b90bb3d95]\n        ### LOST displayName:       [Polizeinotruf (de)]\n        ### LOST serviceNumber:     [112]\n        ### LOST service:   [urn:service:sos]\n        ### LOST uri:       [sip:112@demo.dec112.xx]\n        ### LOST via:       [ecrf.demo.gridgears.xx]\n                \n\nDefault: 0\n\n        ...\n        modparam(\"lost\", \"verbose\", 1)\n        ...\n                    \n\n"
 },
 "sms": {
  "modems": "### modems (string)\n\nDefine and configure one or more GSM modems.\n\n    modems_value     = modem_definition *( \";\" modem_definition )\n    modem_definition = modem_name \"[\" list_of_params \"]\"\n    list_of_params   = modem_param *( \";\" modem_param )\n    modem_param      = name \"=\" value\n        \n\nThe following parameters can be used:\n\n- d=device (mandatory) - Device associated with modem (/dev/ttyS0,\n  /dev/modem, etc.).\n\n- p=pin (optional) - SIM PIN - default is NULL.\n\n- m=mode (optional) - Modem working mode\n  (\"ASCII\",\"OLD\",\"DIGICOM\",\"NEW\"). Default value is \"NEW\".\n\n- c=SMS_Center (optional) - SMS center number for that modem. Default is\n  the SMS center set on the SIM card.\n\n- b=baudrate (optional) - Default is 19600.\n\n- r=retry (optional) - How many times to try to re-send an SMS that\n  reported error. Default is twice.\n\n- l=looping (optional) - Time for modem to wait before performing a new\n  check for incoming/outgoing SMS/SIP_MSG. Default is 20.\n\n- t=to (optional) - uri for sip header TO. Default is NULL.\n\n- s=scan (optional) - Values: 0: NOT SCAN uri from body sms, use URI in\n  t=to. 1: SCAN uri from body sms (normal mode, default mode, classic\n  mode) 2: SCAN MIX (both modes), First SCAN Default is 1 (SCAN).\n\n<div class=\"note\">\n\nNo default value, the parameter is mandatory.\n\n</div>\n\n    ...\n    modparam(\"sms\", \"modems\", \"Nokia[d=/dev/ttyS1;s=0;t=sip:p-cscf@cidra.com.ar]\")\n    modparam(\"sms\", \"modems\", \"Nokia [d=/dev/ttyS1;b=9600;m=new;l=30] \")\n    modparam(\"sms\", \"modems\", \"Nokia[d=/dev/ttyS1];Siemens[d=/dev/ttyS2]\")\n    ...\n            \n\n",
  "networks": "### networks (string)\n\nDefine and configure used GSM networks.\n\n    networks_value = net_definition *( \";\" net_definition )\n    net_definition = net_name \"[\" list_of_params \"]\"\n    list_of_params = set_param *( \";\" set_param )\n    set_param      = name \"=\" value\n        \n\nThe following parameters can be used:\n\n- m=msx_sms_per_call (optional) - Maximum number of SMS send / received\n  from that net in one modem loop. Default is 10. This parameter was\n  introduced to avoid starvation.\n\n  Example of the starvation--a modem can send SMS for more than 1\n  networks. If you have a huge number of SMS for the first network and\n  the number of incoming SIP messages is equal to the sent SMS per same\n  unit of time, the modem will never get to send SMS for the next\n  networks.\n\n<div class=\"note\">\n\nNo default value, the parameter is mandatory.\n\n</div>\n\n    ...\n    modparam(\"sms\", \"networks\", \"D1 [m=10] ;d2[ m=20]\")\n    ...\n            \n\n",
  "links": "### links (string)\n\nDefine from which network each modem should send SMS.\n\n    links_value = modem_assoc *( \";\" modem_assoc )\n    modem_assoc = modem_name \"[\" list_of_networks \"]\"\n    list_of_networks = network *( \";\" network )\n        \n\n<div class=\"note\">\n\nNo default value, the parameter is mandatory.\n\n</div>\n\n    ...\n    modparam(\"sms\", \"links\", \"NOKIA[D1;d2]\")\n    ...\n            \n\nThe modem NOKIA will send SMS from D1 and D2 net (in this order !). If\nin a net queue are more than max_sms_per_call SMS the modem will *not\nsleep* before starting the next loop ! Shortly, if messages are waiting\nto be sent, the modem will not go in sleep.\n\n",
  "default_net": "### default_net (string)\n\nThe default network to use. If no one specified, the first defined\nnetwork is used. This parameter is useful only if the \"sms_send_msg\"\nexported function is used (see [Functions](#sms.functions)).\n\n    ...\n    modparam(\"sms\", \"default_net\", \"D1\")\n    ...\n            \n\n",
  "max_sms_parts": "### max_sms_parts (integer)\n\nShows in how many parts (SMS messages) a SIP message can be split. If\nexceeded, the SIP message will be sent truncated and the SIP user will\nget back another message containing the unsent part.\n\nDefault value is 4.\n\n    ...\n    modparam(\"sms\", \"max_sms_parts\", 10)\n    ...\n            \n\n",
  "domain": "### domain (string)\n\nSpecify a fake domain name to be used by the gateway. The Contact\nheaders and the From header from the request will be constructed based\non this fake domain name. It's useful when the gateway is transparently\nhidden behind a proxy/register (located on different machines).\n\nDefault is the name of the machine the gateway is running on.\n\n    ...\n    modparam(\"sms\", \"domain\", \"foo.bar\")\n    ...\n            \n\n",
  "use_contact": "### use_contact (integer)\n\nIf a contact header should be added to the outgoing SIP messages. Even\nif the SIP draft forbids this, some UAS require it.\n\nDefault is 0 (no).\n\n    ...\n    modparam(\"sms\", \"use_contact\", 1)\n    ...\n            \n\n",
  "sms_report_type": "### sms_report_type (integer)\n\nIf the modem should ask for SMS confirmation from the SMS Center. If the\nSMSC reply with an error code, the gateway will send back to SIP user a\nSIP message containing the text (or part of it) that couldn't be sent.\nTwo report mechanisms are implemented:\n\n- 1 - the reports are delivered by the GSM device as SMS reports (so far\n  supported only by Nokia modems);\n\n- 2 - the reports are delivered as async. CDS responses (supported by\n  almost all modems, except Ericsson).\n\nDefault is 0 (no report).\n\n    ...\n    modparam(\"sms\", \"sms_report_type\", 1)\n    ...\n            \n\n"
 },
 "domainpolicy": {
  "db_url": "### db_url (string)\n\nThis is URL of the database to be used.\n\nDefault value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d\n\n    modparam(\"domainpolicy\", \"db_url\", \"postgres://proxy:frog23@db.sip-router.org/sipdb\")\n            \n\n",
  "dp_table": "### dp_table (string)\n\nName of table containing the local support domain policy setup.\n\nDefault value is \u201cdomainpolicy\u201d.\n\n    modparam(\"domainpolicy\", \"dp_table\", \"supportedpolicies\")\n\n",
  "dp_col_rule": "### dp_col_rule (string)\n\nName of column containing the domain policy rule name which is equal to\nthe URI as published in the domain policy NAPTRs.\n\nDefault value is \u201crule\u201d.\n\n    modparam(\"domainpolicy\", \"dp_col_rule\", \"rules\")\n\n",
  "dp_col_type": "### dp_col_type (string)\n\nName of column containing the domain policy rule type. In the case of\nfederation names, this is \"fed\". For standard referrals according to\ndraft-lendl-speermint-technical-policy-00, this is \"std\". For direct\ndomain lookups, this is \"dom\".\n\nDefault value is \u201ctype\u201d.\n\n    modparam(\"domainpolicy\", \"dp_col_type\", \"type\")\n\n",
  "dp_col_att": "### dp_col_att (string)\n\nName of column containing the AVP's name. If the rule stored in this row\ntriggers, than dp_can_connect() will add an AVP with that name.\n\nDefault value is \u201catt\u201d.\n\n    modparam(\"domainpolicy\", \"dp_col_att\", \"attribute\")\n\n",
  "dp_col_val": "### dp_col_val (string)\n\nName of column containing the value for AVPs created by\ndp_can_connect().\n\nDefault value is \u201cval\u201d.\n\n    modparam(\"domainpolicy\", \"dp_col_val\", \"values\")\n\n",
  "port_override_avp": "### port_override_avp (string)\n\nThis parameter defines the name of the AVP where dp_apply_policy() will\nlook for an override port number.\n\nDefault value is \u201cportoverride\u201d.\n\n    # string named AVP\n    modparam(\"domainpolicy\", \"port_override_avp\", \"portoverride\")\n\n",
  "transport_override_avp": "### transport_override_avp (string)\n\nName of the AVP which contains the override transport setting.\n\nDefault value is \u201ctransportoverride\u201d.\n\n    # string named AVP\n    modparam(\"domainpolicy\", \"transport_override_avp\", \"transportoverride\")\n\n",
  "domain_replacement_avp": "### domain_replacement_avp (string)\n\nName of the AVP which contains a domain replacement.\n\nDefault value is \u201cdomainreplacement\u201d.\n\n    # string named AVP\n    modparam(\"domainpolicy\", \"domain_replacement_avp\", \"domainreplacement\")\n\n",
  "domain_prefix_avp": "### domain_prefix_avp (string)\n\nName of the AVP which contains a domain prefix.\n\nDefault value is \u201cdomainprefix\u201d.\n\n    # string named AVP\n    modparam(\"domainpolicy\", \"domain_prefix_avp\", \"domainprefix\")\n\n",
  "domain_suffix_avp": "### domain_suffix_avp (string)\n\nName of the AVP which contains a domain suffix.\n\nDefault value is \u201cdomainsuffix\u201d.\n\n    # string named AVP\n    modparam(\"domainpolicy\", \"domain_suffix_avp\", \"domainsuffix\")\n\n",
  "send_socket_avp": "### send_socket_avp (string)\n\nName of the AVP which contains a send_socket. The format of the send\nsocket (the payload of this AVP) must be in the format\n\\[proto:\\]ip_address\\[:port\\]. The function dp_apply_policy will look\nfor this AVP and if defined, it will force the send socket to its value\n(similar to the force_send_socket core function).\n\nDefault value is \u201csendsocket\u201d.\n\n    # string named AVP\n    modparam(\"domainpolicy\", \"send_socket_avp\", \"sendsocket\")\n\n"
 },
 "auth": {
  "auth_checks_register": "### auth_checks_register (flags)\n\nSee description of parameter `auth_checks_in_dlg`.\n\n",
  "auth_checks_no_dlg": "### auth_checks_no_dlg (flags)\n\nSee description of parameter `auth_checks_in_dlg`.\n\n",
  "auth_checks_in_dlg": "### auth_checks_in_dlg (flags)\n\nThese three module parameters control which optional integrity checks\nwill be performed on the SIP message carrying digest response during SIP\nMD5 digest authentication. `auth_checks_register` controls integrity\nchecks to be performed on REGISTER messages, `auth_checks_no_dlg`\ncontrols which optional integrity checks will be performed on SIP\nrequests that have no To header field or no To tag (in other words the\nrequests either establishing or outside dialogs). `auth_checks_in_dlg`\ncontrols which integrity checks will be performed on SIP requests within\ndialogs, such as BYE or re-INVITE. The default value for all three\nparameters is 0 (old behaviour, no extra checks). The set of integrity\nchecks that can be performed on REGISTERs is typically different from\nsets of integrity checks that can be performed for other SIP request\ntypes, hence we have three independent module parameters.\n\nWithout the extra checks the nonce will protect only against expired\nvalues. Some reply attacks are still possible in the expire \"window\". A\npossible workaround is to always force qop authentication and always\ncheck the uri from the authorization header, but this would not work if\nan upstream proxy rewrites the uri and it will also not work with a lot\nof UA implementations.\n\nIn this case the nonce value will be used only to hold the expire time\n(see `nonce_expire`) and an MD5 over it and some secret (the MD5 is used\nto make sure that nobody tampers with the nonce expire time).\n\nWhen the extra checks are enabled, the nonce will include an extra MD5\nover the selected part/parts of the message (see below) and some other\nsecret. This will be used to check if the selected part of the message\nis the same when an UA tries to reuse the nonce, thus protecting or\nseverely limiting reply attacks.\n\nThe possible flag values for all three parameters are:\n\n- *1* for checking if the message URI changed (uses the whole URI)\n\n- *2* for checking the callid\n\n- *4* for checking the From tag\n\n- *8* for checking the source IP address (see nonce.h).\n\nAs an example setting `auth_checks_register` to 3 would check if the\ncallid or the request uri changed from the REGISTER message for which\nthe original nonce was generated (this would allow nonce reuse only\nwithin the same UA and for the expire time). Note that enabling the\nextra checks will limit nonce caching by UAs, requiring extra challenges\nand roundtrips, but will provide much better protection.\n\n<div class=\"warning\">\n\nDo not enable the from tag check (4) for REGISTERs\n(`auth_checks_register`) and out-of-dialog messages\n(`auth_checks_no_dlg`) unless you are sure that all your user agents do\nnot change the from tag when challenged. Some user agents will also\nchange the callid when the challenged request is not in-dialog, so avoid\nenabling the callid check (2) for messages that are not part of a dialog\n(`auth_checks_no_dlg`). In some rare case this will also have to be done\nfor REGISTERs.\n\n</div>\n\nWhen the `secret` parameter is set and the extra checks are enabled, the\nfirst half of the `secret` will be used for the expire time MD5 and the\nother half for the extra checks MD5, so make sure you have a long secret\n(32 chars or longer are recommended).\n\n    ...\n    # For REGISTER requests we hash the Request-URI, Call-ID, and source IP of the\n    # request into the nonce string. This ensures that the generated credentials\n    # cannot be used with another registrar, user agent with another source IP\n    # address or Call-ID. Note that user agents that change Call-ID with every\n    # REGISTER message will not be able to register if you enable this.\n    modparam(\"auth\", \"auth_checks_register\", 11)\n\n    # For dialog-establishing requests (such as the original INVITE, OPTIONS, etc)\n    # we hash the Request-URI and source IP. Hashing Call-ID and From tags takes\n    # some extra precaution, because these checks could render some UA unusable.\n    modparam(\"auth\", \"auth_checks_no_dlg\", 9)\n\n    # For mid-dialog requests, such as re-INVITE, we can hash source IP and\n    # Request-URI just like in the previous case. In addition to that we can hash\n    # Call-ID and From tag because these are fixed within a dialog and are\n    # guaranteed not to change. This settings effectively restrict the usage of\n    # generated credentials to a single user agent within a single dialog.\n    modparam(\"auth\", \"auth_checks_in_dlg\", 15)\n\n    ...\n            \n\n",
  "qop": "### qop (string)\n\nIf set, enable *qop* for challenges: each challenge will include a *qop*\nparameter. This is the recommended way, but some older non rfc3261\ncompliant UAs might get confused and might not authenticate properly if\n`qop` is enabled.\n\nEnabling `qop` together with `nonce_count` will provide extra-security\n(protection against replay attacks) while still allowing credentials\ncaching at the UA side and thus not compromising performance.\n\nThe possible values are: \"auth\", \"auth-int\" and \"\" (unset).\n\nThe default value is not-set (\"\").\n\nSee also: `nonce_count`.\n\n    ...\n    modparam(\"auth\", \"qop\", \"auth\")   # set qop=auth\n    ...\n            \n\n",
  "nonce_count": "### nonce_count (boolean)\n\nIf enabled the received *nc* value is remembered and checked against the\nolder value (for a successful authentication the received *nc* must be\ngreater than the previously received one, see rfc2617 for more details).\nThis will provide protection against replay attacks while still allowing\ncredentials caching at the UA side.\n\nIt depends on `qop` being enabled (if `qop` is not enabled, the\nchallenges won't include *qop* and so the UA will probably not include\nthe *qop* or *nc* parameters in its response).\n\nIf a response doesn't include *qop* or *nc* (for example obsolete UAs\nthat don't support them) the response will be checked according to the\nother enabled nonce checks, in this order: `one_time_nonce` and\n`auth_checks_*`. If a response includes *nc* only the normal\n`nonce_expire` checks and the `nonce_count` checks will be performed,\nall the other checks will be ignored.\n\nThe `nonce_count` checks work by tracking a limited number of nonces.\nThe maximum number of tracked nonces is set using the `nc_array_size` or\n`nc_array_order` parameters. If this number is exceeded, older entries\nwill be overwritten. As long as the maximum rate of challengeable\nmessages per average response time is lower than `nc_array_size`, the\n`nonce_count` checks should work flawlessly. For optimum performance\n(maximum reuse of cache credentials) `nc_array_size` divided by\n`nid_pool_no` should be lower than the message rate multiplied by the\ndesired `nonce_expire`.\n\nThe maximum accepted *nc* value is 255. If *nc* becomes greater than\nthis, the nonce will be considered stale and the UA will be\nre-challenged.\n\n*Note:* `nonce_count` should be enabled only in stateful mode (a\ntransaction should be created prior to the authentication check to\nabsorb possible retransmissions and all the replies should be sent\nstatefully, using `t_reply()`). If `nonce_count` and the authentication\nchecks are used in the stateless mode then all retransmissions will be\nchallenged.\n\nThe default value is 0 (off).\n\nSee also: `qop`, `nc_array_size`, `nc_array_order`, `nid_pool_no`,\n`nonce_expire`. `one_time_nonce`.\n\n    ...\n    modparam(\"auth\", \"nonce_count\", 1) # enable nonce_count support\n    modparam(\"auth\", \"qop\", \"auth\")    # enable qop=auth\n\n    ....\n    route{\n    ...\n        # go stateful and catch retransmissions\n        if (!t_newtran()) {\n            xlog(\"L_NOTICE\", \"Failed to create new transaction\\n\");\n            drop;\n        };\n        if (method==\"REGISTER\"){\n            if (!www_authenticate(\"test\", \"credentials\")){\n                # reply must be sent with t_reply because the\n                # transaction is already created at this point\n                # (we are in \"stateful\" mode)\n                if ($? == -2){\n                    t_reply(\"500\", \"Internal Server Error\");\n                }else if ($? == -3){\n                    t_reply(\"400\", \"Bad Request\");\n                }else{\n                    if ($digest_challenge)\n                        append_to_reply(\"%$digest_challenge\");\n                    t_reply(\"401\", \"Unauthorized\");\n                }\n                drop;\n            }\n            if (!save_noreply(\"location\")) {\n                t_reply(\"400\", \"Invalid REGISTER Request\");\n                drop;\n            }\n            append_to_reply(\"%$contact\");\n            t_reply(\"$code\", \"$reason\"); # no %, avps are used directly\n            drop;\n        }else{\n            if (!proxy_authenticate(\"my_realm\", \"credentials\")){\n                if ($? == -2){\n                    t_reply(\"500\", \"Internal Server Error\");\n                }else if ($? == -3){\n                    t_reply(\"400\", \"Bad Request\");\n                }else{\n                    if ($digest_challenge)\n                        append_to_reply(\"%$digest_challenge\");\n                    t_reply(\"401\", \"Unauthorized\");\n                }\n                drop;\n            }\n        }\n    ...\n            \n\n",
  "one_time_nonce": "### one_time_nonce (boolean)\n\nIf set to 1 nonce reuse is disabled: each nonce is allowed only once, in\nthe first response to a challenge. All the messages will be challenged,\neven retransmissions. Stateful mode should be used, to catch\nretransmissions before the authentication checks (using `t_newtran()`\nbefore the authentication checks and sending all the replies with\n`t_reply()`).\n\n`one_time_nonce` provides enhanced replay protections at the cost of\ninvalidating UA side credentials caching, challenging every message (and\nthus generating extra messages and extra round-trips) and requiring\nstateful mode. In general `qop` and `nonce_count` should be prefered (if\npossible) with fallback to `auth_checks_*`. Due to the disadvantages\nlisted above, `one_time_nonce` should be used only if the extra checks\nprovided by `auth_checks_register`, `auth_checks_no_dlg` and\n`auth_checks_in_dlg` are deemed insufficient for a specific setup.\n\nCompared to `nonce_count`, `one_time_nonce` provides the same\nprotection, but at a higher message cost. The only advantages are that\nit works with user agents that do not support *qop* and *nc* and that it\nuses less memory for the same supported number of maximum in-flight\nnonces (by a factor of 8). `one_time_nonce` can be used as fallback from\n`nonce_count`, when the UA doesn't support *nc* (it happens\nautomatically when both of them are enabled).\n\nLike `nonce_count`, `one_time_nonce` works by tracking a limited number\nof nonces. The maximum number of tracked nonces is set using the\n`otn_in_flight_no` or `otn_in_flight_order` parameters. If this number\nis exceeded, older entries will be overwritten. As long as the maximum\nrate of challengeable messages per average response time is lower than\n`otn_in_flight_no`, the `one_time_nonce` checks should work flawlessly.\n\nThe default value is 0 (off).\n\nSee also: `otn_in_flight_no`, `otn_in_flight_order`, `nid_pool_no` and\n`nonce_count`.\n\n    ...\n    modparam(\"auth\", \"one_time_nonce\", 1)\n    # Note: stateful mode should be used, see the nonce_count example\n    ...\n            \n\n",
  "nid_pool_no": "### nid_pool_no (integer)\n\nControls the number of partitions for the `nonce_count` and\n`one_time_nonce` arrays (it's common to both of them to reduce the nonce\nsize).\n\nInstead of using single arrays for keeping nonce state, these arrays can\nbe divided into more partitions. Each Kamailio process is assigned to\none of these partitions, allowing for higher concurrency on multi-CPU\nmachines. Besides increasing performance, increasing `nid_pool_no` has\nalso a negative effect: it could decrease the maximum supported\nin-flight nonces in certain conditions. In the worst case, when only one\nKamailio process receives most of the traffic (e.g. very busy tcp\nconnection between two proxies), the in-flight nonces could be limited\nto the array size (`nc_array_size` for `nonce_count` or\n`otn_in_flight_no` for `one_time_nonce`) divided by the partitions\nnumber (`nid_pool_no`). However for normal traffic, when the process\nreceiving a message is either random or chosen in a round-robin fashion\nthe maximum in-flight nonces number will be very little influenced by\n`nid_pool_no` (the messages will be close to equally distributed to\nprocesses using different partitions).\n\n`nid_pool_no` value should be one of: 1, 2, 4, 8, 16, 32 or 64 (the\nmaximum value is 64 and all values should be of the form 2^k or else\nthey will be rounded down to 2^k).\n\nThe default value is 1.\n\nSee also: `nonce_count`, `one_time_nonce`, `nc_array_size` and\n`otn_in_flight_no`.\n\n    ...\n    modparam(\"auth\", \"nid_pool_no\", 4)\n    ...\n            \n\n",
  "nc_array_size": "### nc_array_size (integer)\n\nMaximum number of in-flight nonces for `nonce_count`. It represents the\nmaximum nonces for which state will be kept. When this number is\nexceeded, state for the older nonces will be discarded to make space for\nnew ones (see `nonce_count` for more details).\n\nThe value should be of the form 2^k. If it's not it will be rounded down\nto 2^k (for example a value of 1000000 will be rounded down to\n2^19=524288). `nc_array_order` can be used to directly specify the power\nof 2 (e.g. `nc_array_order` set to 20 is equivalent to `nc_array_size`\nset to 1048576).\n\nThe memory used to keep the nonce state will be `nc_array_size` in\nbytes.\n\nThe default value is 1048576 (1M in-flight nonces, using 1Mb memory).\n\nSee also: `nonce_count` and `nid_pool_no`.\n\n    ...\n    modparam(\"auth\", \"nc_array_size\", 4194304)   # 4Mb\n    ...\n            \n\n",
  "nc_array_order": "### nc_array_order (integer)\n\nEquivalent to `nc_array_size`, but instead of directly specifying the\nsize, its value is the power at which 2 should be raised\n(log2(`nc_array_size`)).\n\n`nc_array_size` = 2^`nc_array_order`. For more details see\n`nc_array_size`.\n\nThe default value is 20 (1M in-flight nonces, using 1Mb memory).\n\nSee also: `nonce_count`, `nc_array_size` and `nid_pool_no`.\n\n    ...\n    modparam(\"auth\", \"nc_array_order\", 22)   # 4Mb\n    ...\n            \n\n",
  "otn_in_flight_no": "### otn_in_flight_no (integer)\n\nMaximum number of in-flight nonces for `one_time_nonce`. It represents\nthe maximum number of nonces remembered for the one-time-nonce check.\nWhen this number is exceeded, information about older nonces will be\ndiscarded and overwritten with information about the new generated ones\n(see `one_time_nonce` for more details).\n\nThe value should be of the form 2^k. If it's not it will be rounded down\nto 2^k (for example a value of 1000000 will be rounded down to\n2^19=524288). `otn_in_flight_no` can be used to directly specify the\npower of 2 (e.g. `otn_in_flight_order` set to 19 is equivalent to\n`otn_in_fligh_number` set to 524288).\n\nThe memory used to keep the nonce information will be the\n`otn_in_flight_no` divided by 8 (only 1 bit of state is kept per nonce).\n\nThe default value is 1048576 (1M in-flight nonces, using 128Kb memory).\n\nSee also: `one_time_nonce` and `nid_pool_no`.\n\n    ...\n    modparam(\"auth\", \"otn_in_flight_no\", 8388608)   # 8 Mb (1Mb memory)\n    ...\n            \n\n",
  "otn_in_flight_order": "### otn_in_flight_order (integer)\n\nEquivalent to `otn_in_flight_no`, but instead of directly specifying the\nsize, its value is the power at which 2 should be raised\n(log2(`otn_in_flight_no`)).\n\n`otn_in_flight_no` = 2^`otn_in_flight_order`. For more details see\n`otn_in_flight_order`.\n\nThe default value is 20 (1M in-flight nonces, using 128Kb memory).\n\nSee also: `one_time_nonce`, `otn_in_flight_no` and `nid_pool_no`.\n\n    ...\n    modparam(\"auth\", \"otn_in_flight_order\", 23)   # 8 Mb (1Mb memory)\n    ...\n            \n\n",
  "secret": "### secret (string)\n\nSecret phrase used to calculate the nonce value used to challenge the\nclient for authentication.\n\nIf you use multiple servers in your installation, and would like to\nauthenticate on the second server against the nonce generated at the\nfirst one, it is necessary to explicitly set the secret to the same\nvalue on all servers. However, as the use of a shared (and fixed) secret\nas nonce is insecure, it is much better is to stay with the default. Any\nclients should send the authenticated request to the server that issued\nthe challenge.\n\nDefault value is randomly generated string.\n\n    ...\n    modparam(\"auth\", \"secret\", \"johndoessecretphrase\")\n    ...\n            \n\n",
  "nonce_expire": "### nonce_expire (integer)\n\nNonces have limited lifetime. After a given period of time nonces will\nbe considered invalid. This is to protect replay attacks. Credentials\ncontaining a stale nonce will be not authorized, but the user agent will\nbe challenged again. This time the challenge will contain `stale`\nparameter which will indicate to the client that it doesn't have to\ndisturb user by asking for username and password, it can recalculate\ncredentials using existing username and password.\n\nThe value is in seconds and default value is 300 seconds.\n\n    ...\n    modparam(\"auth\", \"nonce_expire\", 600)   # Set nonce_expire to 600s\n    ...\n            \n\n",
  "nonce_auth_max_drift": "### nonce_auth_max_drift (integer)\n\nMaximum difference in seconds between a nonce creation time and the\ncurrent time, if the nonce creation time appears to be in the future.\n\nIn some cases, like shortly after a system time backward adjustment or\nwhen the current proxy is part of a cluster which is not\ntime-synchronized, it's possible to receive a nonce with creation time\nin the future. In this case if the difference is greater than\n`nonce_auth_max_drift` seconds, consider the nonce stale and\nre-challenge (otherwise after a dramatic time change backwards, it might\nhappen that some previously generated nonces will be valid for too much\ntime).\n\nThe default value is 3 seconds\n\nSee also: `nonce_expire`.\n\n    ...\n    modparam(\"auth\", \"nonce_auth_max_drift\", 1)   # set max drift to 1 s\n    ...\n            \n\n",
  "force_stateless_reply": "### force_stateless_reply (boolean)\n\nIf set to 1, `www_challenge()` and `proxy_challenge()` functions send\nreply statelessly no matter if transaction exists or not. If set to 0\n(default), reply is sent statefully if transaction exists and\nstatelessly otherwise.\n\n    ...\n    modparam(\"auth\", \"force_stateless_reply\", 1)\n    ...\n            \n\n",
  "realm_prefix": "### realm_prefix (string)\n\nPrefix to be automatically stripped from the realm. As an alternative to\nSRV records (not all SIP clients support SRV lookup), a subdomain of the\nmaster domain can be defined for SIP purposes (like sip.mydomain.net\npointing to same IP address as the SRV record for mydomain.net). By\nignoring the realm_prefix \u201csip.\u201d, at authentication, sip.example.com\nwill be equivalent to example.com .\n\nDefault value is empty string.\n\n    modparam(\"auth\", \"realm_prefix\", \"sip.\")\n\n",
  "use_domain": "### use_domain (boolean)\n\nIf set to 1, `pv_auth_check()` uses domain parts of the URIs to check\nuser identity.\n\n    ...\n    modparam(\"auth\", \"use_domain\", 1)\n    ...\n            \n\n",
  "algorithm": "### algorithm (string)\n\nConfigure hash algorithm used for digest authentication. Possible values\nare \"MD5\" or \"SHA-256\". If left empty MD5 is used. If specified, the\nspecified algorithm is used and is also put in the 'algorithm' field of\nthe challenge header.\n\nWarning: SHA-256 hash values take twice the space of MD5 hash values. So\na buffer overflow might occur if this option is used in combination with\nanother auth\\_\\* module that does not allocate at least 65 bytes to\nstore hash values. SHA-256 can safely be used with the module auth_db as\nit allocates 256 bytes to store HA1 values.\n\n    ...\n    modparam(\"auth\", \"algorithm\", \"SHA-256\")\n    ...\n                \n\n",
  "add_authinfo_hdr": "### add_authinfo_hdr (boolean)\n\nShould an Authentication-Info header be added on 200 OK responses? The\nAuthentication-Info header offers mutual authentication. The server\nproves to the client that it knows the user's secret.\n\nThe header also includes the next nonce which may be used by the client\nin a future request. If one_time_nonce is enabled, a new nonce is\ncalculated for the next nonce. Otherwise the current nonce is used for\nthe next nonce.\n\nThe default value is 0 (no).\n\n    ...\n    modparam(\"auth\", \"add_authinfo_hdr\", yes)\n    ...\n                \n\n"
 },
 "group": {
  "db_url": "### db_url (string)\n\nURL of the database table to be used.\n\n*Default value is \u201cmysql://kamailioro:kamailioro@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"group\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "table": "### table (string)\n\nName of the table holding strict definitions of groups and their\nmembers.\n\n*Default value is \u201cgrp\u201d.*\n\n    ...\n    modparam(\"group\", \"table\", \"grp_table\")\n    ...\n\n",
  "user_column": "### user_column (string)\n\nName of the \u201ctable\u201d column holding usernames.\n\n*Default value is \u201cusername\u201d.*\n\n    ...\n    modparam(\"group\", \"user_column\", \"user\")\n    ...\n\n",
  "domain_column": "### domain_column (string)\n\nName of the \u201ctable\u201d column holding domains.\n\n*Default value is \u201cdomain\u201d.*\n\n    ...\n    modparam(\"group\", \"domain_column\", \"realm\")\n    ...\n\n",
  "group_column": "### group_column (string)\n\nName of the \u201ctable\u201d column holding group names.\n\n*Default value is \u201cgrp\u201d.*\n\n    ...\n    modparam(\"group\", \"group_column\", \"grp\")\n    ...\n\n",
  "use_domain": "### use_domain (integer)\n\nIf enabled (set to a non zero value) then the domain will be used also\nused for strict group matching; otherwise only the username part will be\nused.\n\n*Default value is 0 (disabled).*\n\n    ...\n    modparam(\"group\", \"use_domain\", 1)\n    ...\n\n",
  "re_table": "### re_table (string)\n\nName of the table holding definitions for regular-expression based\ngroups. If no table is defined, the regular-expression support is\ndisabled.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"group\", \"re_table\", \"re_grp\")\n    ...\n\n",
  "re_exp_column": "### re_exp_column (string)\n\nName of the \u201cre_table\u201d column holding the regular expression used for\nuser matching.\n\n*Default value is \u201creg_exp\u201d.*\n\n    ...\n    modparam(\"group\", \"re_exp_column\", \"re\")\n    ...\n\n",
  "re_gid_column": "### re_gid_column (string)\n\nName of the \u201cre_table\u201d column holding the group IDs.\n\n*Default value is \u201cgroup_id\u201d.*\n\n    ...\n    modparam(\"group\", \"re_gid_column\", \"grp_id\")\n    ...\n\n",
  "multiple_gid": "### multiple_gid (integer)\n\nIf enabled (non zero value) the regular-expression matching will return\nall group IDs that match the user; otherwise only the first will be\nreturned.\n\n*Default value is \u201c1\u201d (enabled).*\n\n    ...\n    modparam(\"group\", \"multiple_gid\", 0)\n    ...\n\n"
 },
 "mediaproxy": {
  "disable": "### disable (int)\n\nBoolean flag that specifies if mediaproxy should be disabled. This is\nuseful when you want to use the same kamailio configuration in two\ndifferent context, one using mediaproxy, the other not. In the case\nmediaproxy is disabled, calls to its functions will have no effect,\nallowing you to use the same configuration without changes.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"mediaproxy\", \"disable\", 1)\n    ...\n            \n\n",
  "mediaproxy_socket": "### mediaproxy_socket (string)\n\nIt is the path to the filesystem socket where the mediaproxy dispatcher\nlistens for commands from the module.\n\n*Default value is \u201c/run/mediaproxy/dispatcher.sock\u201d.*\n\n    ...\n    modparam(\"mediaproxy\", \"mediaproxy_socket\", \"/run/mediaproxy/dispatcher.sock\")\n    ...\n            \n\n",
  "mediaproxy_timeout": "### mediaproxy_timeout (int)\n\nHow much time (in milliseconds) to wait for an answer from the\nmediaproxy dispatcher.\n\n*Default value is \u201c500\u201d.*\n\n    ...\n    modparam(\"mediaproxy\", \"mediaproxy_timeout\", 500)\n    ...\n            \n\n",
  "signaling_ip_avp": "### signaling_ip_avp (string)\n\nSpecification of the AVP which holds the IP address from where the SIP\nsignaling originated. If this AVP is set it will be used to get the\nsignaling IP address, else the source IP address from where the SIP\nmessage was received will be used. This AVP is meant to be used in cases\nwhere there are more than one proxy in the call setup path and the proxy\nthat actually starts mediaproxy doesn't receive the SIP messages\ndirectly from the UA and it cannot determine the NAT IP address from\nwhere the signaling originated. In such a case attaching a SIP header at\nthe first proxy and then copying that header's value into the\nsignaling_ip_avp on the proxy that starts mediaproxy will allow it to\nget the correct NAT IP address from where the SIP signaling originated.\n\n*Default value is \u201c\\$avp(signaling_ip)\u201d.*\n\n    ...\n    modparam(\"mediaproxy\", \"signaling_ip_avp\", \"$avp(nat_ip)\")\n    ...\n            \n\n",
  "media_relay_avp": "### media_relay_avp (string)\n\nSpecification of the AVP which holds an optional application defined\nmedia relay IP address of a particular media relay that is preferred to\nbe used for the current call. If an IP address is written to this AVP\nbefore calling use_media_proxy(), it will be preferred by the dispatcher\nover the normal selection algorithm.\n\n*Default value is \u201c\\$avp(media_relay)\u201d.*\n\n    ...\n    modparam(\"mediaproxy\", \"media_relay_avp\", \"$avp(media_relay)\")\n    ...\n            \n\n",
  "ice_candidate": "### ice_candidate (string)\n\nIndicates the type of ICE candidate that will be added to the SDP. It\ncan take 3 values: 'none', 'low-priority' or 'high-priority'. If 'none'\nis selected no candidate will be added to the SDP. If 'low-priority' is\nselected then a low priority candidate will be added and if\n'high-priority' is selected a high priority one.\n\n*Default value is \u201cnone\u201d.*\n\n    ...\n    modparam(\"mediaproxy\", \"ice_candidate\", \"low-priority\")\n    ...\n            \n\n",
  "ice_candidate_avp": "### ice_candidate_avp (string)\n\nSpecification of the AVP which holds the ICE candidate that will be\ninserted in the SDP. The value specified in this AVP will override the\nvalue in ice_candidate module parameter. If the AVP is not set, the\ndefault value will be used.\n\n*Default value is \u201c\\$avp(ice_candidate)\u201d.*\n\n    ...\n    modparam(\"mediaproxy\", \"ice_candidate_avp\", \"$avp(ice_candidate)\")\n    ...\n            \n\n"
 },
 "avpops": {
  "db_url": "### db_url (string)\n\nDB URL for database connection.\n\n*The default value is NULL.*\n\n    ...\n    modparam(\"avpops\",\"db_url\",\"mysql://user:passwd@host/database\")\n    ...\n                    \n\n",
  "avp_table": "### avp_table (string)\n\nDB table to be used.\n\n*The default value is NULL. But if you specify a db_url, you need also\nto setup this parameter.*\n\n    ...\n    modparam(\"avpops\",\"avp_table\",\"avptable\")\n    ...\n                    \n\n",
  "use_domain": "### use_domain (integer)\n\nIf the domain part of the URI should be used for identifying an AVP in\nDB operations.\n\n*Default value is 0 (no).*\n\n    ...\n    modparam(\"avpops\",\"use_domain\",1)\n    ...\n                    \n\n",
  "uuid_column": "### uuid_column (string)\n\nName of column containing the uuid (unique user id).\n\n*Default value is \u201cuuid\u201d.*\n\n    ...\n    modparam(\"avpops\",\"uuid_column\",\"uuid\")\n    ...\n                    \n\n",
  "username_column": "### username_column (string)\n\nName of column containing the username.\n\n*Default value is \u201cusername\u201d.*\n\n    ...\n    modparam(\"avpops\",\"username_column\",\"username\")\n    ...\n                    \n\n",
  "domain_column": "### domain_column (string)\n\nName of column containing the domain name.\n\n*Default value is \u201cdomain\u201d.*\n\n    ...\n    modparam(\"avpops\",\"domain_column\",\"domain\")\n    ...\n                    \n\n",
  "attribute_column": "### attribute_column (string)\n\nName of column containing the attribute name (AVP name).\n\n*Default value is \u201cattribute\u201d.*\n\n    ...\n    modparam(\"avpops\",\"attribute_column\",\"attribute\")\n    ...\n                    \n\n",
  "value_column": "### value_column (string)\n\nName of column containing the AVP value.\n\n*Default value is \u201cvalue\u201d.*\n\n    ...\n    modparam(\"avpops\",\"value_column\",\"value\")\n    ...\n                    \n\n",
  "type_column": "### type_column (string)\n\nName of integer column containing the AVP type.\n\n*Default value is \u201ctype\u201d.*\n\nPossible column values are\n\n- *0 - AVP with string name and string value*\n\n- *1 - AVP with string name and integer value*\n\n- *2 - AVP with integer name and string value*\n\n- *3 - AVP with integer name and integer value*\n\n<!-- -->\n\n    ...\n    modparam(\"avpops\",\"type_column\",\"type\")\n    ...\n                    \n\n",
  "db_scheme": "### db_scheme (string)\n\nDefinition of a DB scheme to be used for non-standard access to Database\ninformation.\n\nDefinition of a DB scheme. Scheme syntax is:\n\n- *db_scheme = name':'element\\[';'element\\]\\**\n\n- *element* =\n\n  - 'uuid_col='string\n\n  - 'username_col='string\n\n  - 'domain_col='string\n\n  - 'value_col='string\n\n  - 'value_type='('integer'\\|'string')\n\n  - 'table='string\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"avpops\",\"db_scheme\",\n    \"scheme1:table=subscriber;uuid_col=uuid;value_col=first_name\")\n    ...\n                    \n\n"
 },
 "app_python3s": {
  "load": "### load (string)\n\nThe path to the file with Python code to be executed from configuration\nfile.\n\n*Default value is \u201c/usr/local/etc/kamailio/kamailio.py\u201d.*\n\n    ...\n    modparam(\"app_python3s\", \"load\", \"/usr/local/etc/kamailio/myscript.py\")\n    ...\n\n",
  "script_init": "### script_init (string)\n\nThe name of the Python function to be executed when the script is loaded\nor reloaded.\n\n*Default value is \u201c\u201d (not set).*\n\n    ...\n    modparam(\"app_python3s\", \"script_init\", \"ksr_script_init\")\n    ...\n    def ksr_script_init():\n        KSR.info(\"init python script\\n\")\n        return 1\n    ...\n\n",
  "script_child_init": "### script_child_init (string)\n\nThe name of the Python function to be executed when Kamailio forks child\nprocesses at startup and when the script is reloaded.\n\n*Default value is \u201c\u201d (not set).*\n\n    ...\n    modparam(\"app_python3s\", \"script_child_init\", \"ksr_script_child_init\")\n    ...\n    def ksr_script_child_init():\n        KSR.info(\"child init python script\\n\")\n        return 1\n    ...\n\n"
 },
 "msrp": {
  "sipmsg": "### sipmsg (int)\n\nIf set to 1, the module will build a SIP message from MSRP frame\nheaders, providing it to \u201cevent_route\\[msrp:frame-in\\]\u201d. All the config\nfile functions (apart from SIP request relay) that can be used in a\nrequest route block can be used in the MSRP event_route.\n\n*Default value is '1'.*\n\n    ...\n    modparam(\"msrp\", \"sipmsg\", 1)\n    ...\n\n",
  "cmap_size": "### cmap_size (int)\n\nThe size of connection map table, to be computed as power of 2 (e.g., if\nthe value is 4, then the number of slots in map table is 2^4 = 16).\n\n*Default value is '0' (no internal map table to be used).*\n\n    ...\n    modparam(\"msrp\", \"cmap_size\", 8)\n    ...\n\n",
  "timer_interval": "### timer_interval (int)\n\nThe timer interval in seconds to run the procedure for cleaning expired\nconnections.\n\n*Default value is '60'.*\n\n    ...\n    modparam(\"msrp\", \"timer_interval\", 90)\n    ...\n\n",
  "auth_min_expires": "### auth_min_expires (int)\n\nThe minimum value accepted for the \u201cExpires\u201d header in AUTH requests.\n\n*Default value is '60'.*\n\n    ...\n    modparam(\"msrp\", \"auth_min_expiresl\", 90)\n    ...\n\n",
  "auth_max_expires": "### auth_max_expires (int)\n\nThe maximum value accepted for \u201cExpires\u201d header in AUTH requests.\n\n*Default value is '3600'.*\n\n    ...\n    modparam(\"msrp\", \"auth_max_expiresl\", 1800)\n    ...\n\n",
  "use_path_addr": "### use_path_addr (str)\n\nThe hostname:port to be used when building the Path header.\n\n*Default value is NULL (server IP and port are used).*\n\n    ...\n    modparam(\"msrp\", \"use_path_addr\", \"msrp.kamailio.org:5061\")\n    ...\n\n",
  "event_callback": "### event_callback (str)\n\nThe name of the function in the kemi configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[...\\] blocks.\n\nThe function receives a string parameter with the name of the event, the\nvalues can be: 'msrp:frame-in'.\n\n*Default value is 'empty' (no function is executed for events).*\n\n    ...\n    modparam(\"msrp\", \"event_callback\", \"ksr_msrp_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_msrp_event(evname)\n        KSR.info(\"===== msrp module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n    ...\n\n"
 },
 "log_systemd": {},
 "pua_json": {},
 "sipt": {},
 "evapi": {
  "workers": "### workers (int)\n\nNumber of worker processes to be started to handle incoming messages\nfrom remote applications. If the value is 0, the handling of the\nincoming message is done by the evapi dispatcher process.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"evapi\", \"workers\", 2)\n    ...\n\n",
  "bind_addr": "### bind_addr (str)\n\nLocal IP and port to listen on for incoming TCP connections.\n\n*Default value is \"127.0.0.1:8448\".*\n\n    ...\n    modparam(\"evapi\", \"bind_addr\", \"1.2.3.4:8228\")\n    ...\n\n",
  "netstring_format": "### netstring_format (int)\n\nControl if messages on the socket (to and from clients) are encapsulated\nin netstring format.\n\n*Default value is 1 (netstring format).*\n\n    ...\n    modparam(\"evapi\", \"netstring_format\", 0)\n    ...\n\n",
  "event_callback": "### event_callback (str)\n\nThe name of the function in the kemi configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[...\\] blocks.\n\nThe function receives a string parameter with the name of the event, the\nvalues are: 'evapi:connection-new', 'evapi:connection-closed',\n'evapi:message-received'.\n\n*Default value is 'empty' (no function is executed for events).*\n\n    ...\n    modparam(\"evapi\", \"event_callback\", \"ksr_evapi_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_evapi_event(evname)\n        KSR.info(\"===== evapi module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n    ...\n\n",
  "max_clients": "### max_clients (int)\n\nMaximum number of clients that can connect to evapi socket.\n\n*Default value is 8.*\n\n    ...\n    modparam(\"evapi\", \"max_clients\", 4)\n    ...\n\n",
  "wait_idle": "### wait_idle (int)\n\nHow many micro-seconds to wait on idle, when no evapi messages are in\nthe processing queue.\n\n*Default value is 500 000 (0.5 seconds).*\n\n    ...\n    modparam(\"evapi\", \"wait_idle\", 100000)\n    ...\n\n",
  "wait_increase": "### wait_increase (int)\n\nIncrease wait_idle by itself till its value becomes initial value\nmultiplied with wait_increase. The increase is done only consecutive\ncycles without any evapi message. When a new evapi message is received,\nwait_idle is reset to initial value. If wait_increase is set to 1, then\nwait_idle is used with its initial value always.\n\n*Default value is 3.*\n\n    ...\n    modparam(\"evapi\", \"wait_increase\", 1)\n    ...\n\n"
 },
 "db_berkeley": {
  "auto_reload": "### auto_reload (integer)\n\nThe auto-reload will close and reopen a Berkeley DB when the files inode\nhas changed. The operation occurs only during a query. Other operations\nsuch as insert or delete, do not invoke auto_reload.\n\n*Default value is 0 (1 - on / 0 - off).*\n\n    ...\n    modparam(\"db_berkeley\", \"auto_reload\", 1)\n    ...\n            \n\n",
  "log_enable": "### log_enable (integer)\n\nThe log_enable boolean controls when to create journal files. The\nfollowing operations can be journaled: INSERT, UPDATE, DELETE. Other\noperations such as SELECT, do not. This journaling are required if you\nneed to recover from a corrupt DB file. That is, kambdb_recover requires\nthese to rebuild the db file. If you find this log feature useful, you\nmay also be interested in the METADATA_LOGFLAGS bitfield that each table\nhas. It will allow you to control which operations to journal, and the\ndestination (like syslog, stdout, local-file). Refer to bdblib_log() and\ndocumentation on METADATA.\n\n*Default value is 0 (1 - on / 0 - off).*\n\n    ...\n    modparam(\"db_berkeley\", \"log_enable\", 1)\n    ...\n            \n\n",
  "journal_roll_interval": "### journal_roll_interval (integer seconds)\n\nThe journal_roll_interval will close and open a new log file. The roll\noperation occurs only at the end of writing a log, so it is not\nguaranteed to to roll 'on time'.\n\n*Default value is 0 (off).*\n\n    ...\n    modparam(\"db_berkeley\", \"journal_roll_interval\", 3600)\n    ...\n            \n\n"
 },
 "misc_radius": {
  "radius_config": "### radius_config (string)\n\nThis is the location of the configuration file of radius client\nlibraries.\n\nDefault value is \u201c/usr/local/etc/radiusclient-ng/radiusclient.conf\u201d.\n\n    ...\n    modparam(\"misc_radius\", \"radius_config\", \"/etc/radiusclient.conf\")\n    ...\n\n",
  "caller_service_type": "### caller_service_type (integer)\n\nThis is the value of the Service-Type radius attribute to be used, when\ncaller's attributes are loaded.\n\nDefault value is dictionary value of \u201cSIP-Caller-AVPs\u201d Service-Type.\n\n    ...\n    modparam(\"misc_radius\", \"caller_service_type\", 18)\n    ...\n\n",
  "callee_service_type": "### callee_service_type (integer)\n\nThis is the value of the Service-Type radius attribute to be used, when\ncallee's attributes are loaded.\n\nDefault value is dictionary value of \u201cSIP-Callee-AVPs\u201d Service-Type.\n\n    ...\n    modparam(\"misc_radius\", \"callee_service_type\", 19)\n    ...\n\n",
  "group_service_type": "### group_service_type (integer)\n\nThis is the value of Service-Type RADIUS attribute to be used, when\nradius_is_user_in() function is called.\n\nDefault value is dictionary value of \u201cGroup-Check\u201d Service-Type.\n\n    ...\n    modparam(\"misc_radius\", \"group_service_type\", 20)\n    ...\n\n",
  "uri_service_type": "### uri_service_type (integer)\n\nThis is the value of Service-Type RADIUS attribute to be used, when\nradius_does_uri\\[\\_user\\]\\_exist() function is called.\n\nDefault value is dictionary value of \u201cCall-Check\u201d Service-Type.\n\n    ...\n    modparam(\"misc_radius\", \"uri_service_type\", 21)\n    ...\n\n",
  "caller_extra": "### caller_extra (string)\n\nSemi-colon separated list of extra RADIUS attribute name=pseudo variable\npairs. When radius_load_caller_avps() is called, the listed extra\nattributes are included RADIUS request with current values of\ncorresponding pseudo variables.\n\nThere is no default value, i.e., by default no extra attributes are\nincluded.\n\n    ...\n    modparam(\"misc_radius\", \"caller_extra\", \"Calling-Station-Id=$fu\")\n    ...\n\n",
  "callee_extra": "### callee_extra (string)\n\nSemi-colon separated list of extra RADIUS attribute name=pseudo variable\npairs. When radius_load_callee_avps() is called, the listed extra\nattributes are included RADIUS request with current values of\ncorresponding pseudo variables.\n\nThere is no default value, i.e., by default no extra attributes are\nincluded.\n\n    ...\n    modparam(\"misc_radius\", \"callee_extra\", \"SIP-URI-User=$rU;SIP-URI-Host=$rd\")\n    ...\n\n",
  "group_extra": "### group_extra (string)\n\nSemi-colon separated list of extra RADIUS attribute name=pseudo variable\npairs. When radius_is_user_in() is called, the listed extra attributes\nare included RADIUS request with current values of corresponding pseudo\nvariables.\n\nThere is no default value, i.e., by default no extra attributes are\nincluded.\n\n    ...\n    modparam(\"misc_radius\", \"group_extra\", \"My-Special=$avp(i:100)\")\n    ...\n\n",
  "uri_extra": "### uri_extra (string)\n\nSemi-colon separated list of extra RADIUS attribute name=pseudo variable\npairs. When radius_does_uri\\[\\_user\\]\\_exist() function is called, the\nlisted extra attributes are included in RADIUS request with current\nvalues of corresponding pseudo variables.\n\nThere is no default value, i.e., by default no extra attributes are\nincluded.\n\n    ...\n    modparam(\"misc_radius\", \"uri_extra\", \"Called-Station-Id=$tu\")\n    ...\n\n",
  "use_sip_uri_host": "### use_sip_uri_host (integer)\n\nIf zero, radius_does_uri_exist() function sends to RADIUS server\nuserpart@hostpart in UserName attribute. If non-zero,\nradius_does_uri_exist() function sends to RADIUS server userpart in\nUserName attribute and hostpart in SIP-URI-Host attribute.\n\nDefault value is 0 (only use UserName attribute).\n\n    ...\n    modparam(\"misc_radius\", \"use_sip_uri_host\", 1)\n    ...\n\n",
  "common_response": "### common_response (integer)\n\nSet it to 1 if you need common radius response attributes to be added as\nAVPs in `radius_load_caller_avps` and `radius_load_callee_avps` with\nname as radius attribute name and value as radius attribute value.\n\nDefault value is \u201c0\u201d.\n\n    ...\n    modparam(\"misc_radius\", \"common_response\", 1)\n    ...\n    radius_load_caller_avps($fU);\n    ...\n\n    ...\n        Sending Access-Accept of id 60 to 192.168.25.32 port 59736\n        Session-Timeout = 4261674\n        next-hop-ip = \"SIP/00111222333444@cisco-out\"\n        SIP-AVP = \"email:sr-users@lists.kamailio.org session-timeout#161 next-hop-ip:h323/0001111@myvoip-gate.kamailio.org\"\n        session-protocol = \"SIP\"\n    ...\n\n    $avp(Session-Timeout) has integer value 4261674\n    $avp(next-hop-ip) has string value \"SIP/005555777888@cisco-out\"\n    $avp(session-protocol) has string value \"SIP\"\n    $avp(SIP-AVP) has string value  \"email:sr-users@lists.kamailio.org session-timeout#161 next-hop-ip:h323/0001111@myvoip-gate.kamailio.org\"\n\n    ...\n        When receiving negative response, check appropriate avp's:\n        $avp(Reply-Message) = \"Not enough money on deposit '-89.83'. Rejected\"\n        $avp(Filter-Id) = \"neg_deposit\"\n    ...\n\n"
 },
 "presence_conference": {
  "use_partial_states": "### use_partial_states (int)\n\nControl usage of partial state notifications.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"presence_conference\", \"use_partial_states\", 0)\n    ...\n\n",
  "default_expires": "### default_expires (int)\n\nThe default expires value used when missing from SUBSCRIBE message (in\nseconds).\n\n*Default value is \u201c3600\u201d.*\n\n    ...\n    modparam(\"presence_conference\", \"default_expires\", 3600)\n    ...\n\n"
 },
 "dlgs": {
  "active_lifetime": "### active_lifetime (int)\n\nThe lifetime in seconds of an active dialog in memory. A dialog is\nconsidered active after the ACK of 200 OK for INVITE.\n\n*Default value is 10800 (3 hours).*\n\n    ...\n    modparam(\"dlgs\", \"active_lifetime\", 3600)\n    ...\n\n",
  "init_lifetime": "### init_lifetime (int)\n\nThe lifetime in seconds of an initial dialog in memory. A dialog is in\ninitial state from the moment of creation until it gets to active state.\nIf the dialog stays longer in the initial state, then it is destroyed by\nthe next timer cleanup.\n\n*Default value is 180 (3 minutes).*\n\n    ...\n    modparam(\"dlgs\", \"init_lifetime\", 240)\n    ...\n\n",
  "finish_lifetime": "### finish_lifetime (int)\n\nThe lifetime in seconds of a finished dialog in memory. A dialog is\nfinished if the initial INVITE was not answered or the BYE was received.\nOnce this lifetime passes, the dialog record is removed from memory by\nthe next timer cleanup.\n\n*Default value is 10 (seconds).*\n\n    ...\n    modparam(\"dlgs\", \"finish_lifetime\", 20)\n    ...\n\n",
  "timer_interval": "### timer_interval (int)\n\nThe value in seconds to run the timer callback function for cleaning up\ndialogs past the lifetime limit.\n\n*Default value is 30.*\n\n    ...\n    modparam(\"dlgs\", \"timer_interval\", 60)\n    ...\n\n",
  "hash_size": "### hash_size (integer)\n\nThe size of the hash table internally used to keep the dialogs. A larger\ntable is much faster but consumes more memory. The hash size must be a\npower of two.\n\n*Default value is \u201c9\u201d.*\n\n    ...\n    modparam(\"dlgs\", \"hash_size\", 5)\n    ...\n\n"
 },
 "ldap": {
  "config_file": "### config_file (string)\n\nFull path to LDAP configuration file.\n\nDefault value: `/usr/local/etc/kamailio/ldap.cfg`\n\n    modparam(\"ldap\", \"config_file\", \"/usr/local/etc/kamailio/ldap.ini\")\n              \n\n"
 },
 "sca": {
  "hash_table_size": "### hash_table_size (integer)\n\nSize, as a power of two, of the shared memory hash table containing the\ncall-info subscriptions and the appearance state. A larger power of two\nmeans better performance (fewer collisions, making for fewer subscriber\nURI comparisons) at the expense of increased shared memory use.\n\n*Default value is 9 (2 ^ 9 == 512).*\n\n    ...\n    # create shared memory hash table with 2^8 (256) slots\n    modparam( \"sca\", \"hash_table_size\", 8 )\n    ...\n            \n\n",
  "call_info_max_expires": "### call_info_max_expires (integer)\n\nThe maximum allowed call-info subscription time in seconds.\n\n*Default value is 3600 (1 hour).*\n\n    ...\n    modparam( \"sca\", \"call_info_max_expires\", 1800 )\n    ...\n            \n\n",
  "line_seize_max_expires": "### line_seize_max_expires (integer)\n\nThe maximum allowed line-seize subscription time in seconds.\n\n*Default value is 15 (15 seconds).*\n\nA maximum line-seize subscription time of 15 seconds is recommended in\nthe SIP Access Side Extensions document. This interval is purposely\nshort to prevent a client from seizing an appearance without making a\ncall for extended periods of time.\n\n    ...\n    modparam( \"sca\", \"line_seize_max_expires\", 30 )\n    ...\n                    \n\n",
  "purge_expired_interval": "### purge_expired_interval (integer)\n\nThe period of time in seconds between purges of expired call-info and\nline-seize subscriptions.\n\n*Default value is 120 (2 minutes).*\n\nOn finding an expired subscription, the module removes the subscription\nfrom the shared memory hash table, and sends a NOTIFY with\nSubscription-State \"terminated;expired\" header value to the subscriber.\nIt also NOTIFYs other members of the group, in the event that the\nexpired subscription was a line-seize.\n\n    ...\n    modparam( \"sca\", \"purge_expired_interval\", 60 )\n    ...\n                    \n\n",
  "db_url": "### db_url (str)\n\nURL of database to which subscribers will be written.\n\n*Default value is mysql://kamailio:kamailiorw@localhost/kamailio*\n\n    ...\n    modparam( \"sca\", \"db_url\", \"mysql://kamailio:kamailiorw@localhost/kamailio\" )\n    ...\n            \n\n",
  "subs_table": "### subs_table (str)\n\nName of the database table where call-info subscriptions are written.\n\n*Default value is \u201csca_subscriptions\u201d.*\n\n    ...\n    modparam( \"sca\", \"subs_table\", \"call_info_subscriptions\" )\n    ...\n                    \n\n",
  "db_update_interval": "### db_update_interval (integer)\n\nPeriod in seconds between writes of call-info subscriber information to\nthe database.\n\n*Default value is 300 (5 minutes).*\n\n    ...\n    modparam( \"sca\", \"db_update_interval\", 120 )\n    ...\n            \n\n",
  "onhold_bflag": "### onhold_bflag (integer)\n\nWhen bflag is set the media will be treated as on-hold and sdp parse\nwill be skipped. If the bflag is not set the sdp will be parsed to\ndetect on-hold.\n\n*Default value is -1 (disabled).*\n\n    ...\n    modparam(\"sca\", \"onhold_bflag\", 15)\n    ...\n\n",
  "server_address": "### server_address (string)\n\nThe server address which will become the value of Contact header filed\nfor reply messages.\n\n*Default value is \"\" (disabled).*\n\n    ...\n    modparam(\"sca\", \"server_address\", \"sip:10.10.10.10:5060\")\n    ...\n\n"
 },
 "presence_profile": {},
 "presence_xml": {
  "db_url": "### db_url(str)\n\nThe database URL.\n\n*Default value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"presence_xml\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "xcap_table": "### xcap_table(str)\n\nThe name of the database table where XCAP documents are stored.\n\n*Default value is \u201cxcap\u201d.*\n\n    ...\n    modparam(\"presence_xml\", \"xcap_table\", \"xcaps\")\n    ...\n\n",
  "disable_presence": "### disable_presence(int)\n\nSet this parameter to disable the handling of the \"presence\" event.\n\n*Default value: \u201c0\u201d.*\n\n    ...\n    modparam(\"presence_xml\", \"disable_presence\", 1)\n    ...\n\n",
  "disable_winfo": "### disable_winfo(int)\n\nSet this parameter to disable the handling of the \"presence.winfo\"\nevent.\n\n*Default value: \u201c0\u201d.*\n\n    ...\n    modparam(\"presence_xml\", \"disable_winfo\", 1)\n    ...\n\n",
  "disable_bla": "### disable_bla(int)\n\nSet this parameter to disable the handling of the \"dialog;sla\" event.\n\n*Default value: \u201c1\u201d (0 - enabled, 1 - disabled).*\n\n    ...\n    modparam(\"presence_xml\", \"disable_bla\", 1)\n    ...\n\n",
  "disable_xcapdiff": "### disable_xcapdiff(int)\n\nSet this parameter to disable the handling of the \"xcap-diff\" event.\n\n*Default value: \u201c0\u201d.*\n\n    ...\n    modparam(\"presence_xml\", \"disable_xcapdiff\", 1)\n    ...\n\n",
  "force_active": "### force_active (int)\n\nThis parameter is used for permissions when handling Subscribe messages.\nIf set to 1, subscription state is considered active and the presentity\nis not queried for permissions (should be set to 1 if not using an XCAP\nserver). Otherwise, the XCAP server is queried and the subscription\nstates is according to user defined permission rules. If no rules are\ndefined for a certain watcher, the subscriptions remains in pending\nstate and the Notify sent will have no body.\n\nNote: When switching from one value to another, the watchers table must\nbe emptied.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"presence_xml\", \"force_active\", 1)\n    ...\n\n",
  "integrated_xcap_server": "### integrated_xcap_server (int)\n\nThis parameter is a flag for the type of XCAP servers used. If the XCAP\nserver is integrated with Kamailio presence_xml module and access the\nsame database tables directly, like the embedded XCAP server implemented\nin xcap_server module, the parameter has to be set to 1. Apart from\nupdating in xcap table, if the integrated server is not running on the\nsame Kamailio instance, it must send an RPC command\npresence.refreshWatchers \\[pres_uri\\] \\[event\\] when a user modifies a\nrules document, to instruct the presence_xml module to update states\nfrom the database and, if needed, send NOTIFY updates.\n\nOtherwise (if set to 0) it uses xcap_client module to fetch documents\nfrom the XCAP servers with HTTP requests.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"presence_xml\", \"integrated_xcap_server\", 1)\n    ...\n\n",
  "xcap_server": "### xcap_server (str)\n\nThe address of the xcap servers used for storage. This parameter is\ncompulsory if the integrated_xcap_server parameter is not set. It can be\nset more than once, to construct an address list of trusted XCAP\nservers.\n\n    ...\n    modparam(\"presence_xml\", \"xcap_server\", \"xcap_server.example.org\")\n    modparam(\"presence_xml\", \"xcap_server\", \"xcap_server.ag.org\")\n    ...\n\n",
  "passive_mode": "### passive_mode(int)\n\nIf set to 1, module acts in passive mode - no bind to presence module,\nno connection to database. Useful when needing only to use \\$xml(...)\npseudo-variable.\n\n*Default value: \u201c0\u201d (0 - active mode, 1 - passive mode).*\n\n    ...\n    modparam(\"presence_xml\", \"passive_mode\", 1)\n    ...\n\n",
  "xcapauth_userdel_reason": "### xcapauth_userdel_reason(str)\n\nThis parameter represents the reason that will be included in the\nSubscription-State header of the Notify when a rule is no longer found\nin the XCAP pres-auth document for a user that was previously allowed.\nThe Subscription state in this case switches to \"terminated\". Because it\nis not clear which reason is most appropriate in this case from the ones\ndefined by the RFC 3265, this parameter offers the possibility for the\nadmin to decide which one he wishes to use.\n\n*Default value: \u201cprobation\u201d* . Since probation also accepts a\nretry-after parameter to specify after at least how may seconds the\nclient should reattempt to resubscribe, you can include this in the\nparameter also.\n\n    ...\n    modparam(\"presence_xml\", \"xcapauth_userdel_reason\", \"probation;retry-after=30\")\n    modparam(\"presence_xml\", \"xcapauth_userdel_reason\", \"rejected\")\n    ...\n\n",
  "force_dummy_presence": "### force_dummy_presence(int)\n\nSet this parameter to enable simple body notify with status 'open' when\npresentity info is not available.\n\n*Default value: \u201c0\u201d.*\n\n    ...\n    modparam(\"presence_xml\", \"force_dummy_presence\", 1)\n    ...\n\n",
  "force_presence_single_body": "### force_presence_single_body(int)\n\nSet this parameter to enable single body notify. One presentity can have\nmultiple dialogs and will by default notify all the dialogs and this can\nbe a problem when dealing with large ring-groups or attendants, use this\nparameter to only send one body. Look at\n`presence_single_body_priorities` and\n`presence_single_body_lookup_element` to customize the behaviour.\n\n*Default value: \u201c0\u201d.*\n\n    ...\n    modparam(\"presence_xml\", \"force_presence_single_body\", 1)\n    ...\n\n",
  "presence_single_body_priorities": "### presence_single_body_priorities(str)\n\nChange this parameter to set the priorities when choosing the dialog\nthat will be the final.\n\nImportance is left to right.\n\n*Default value: \u201cAvailable\\|Ringing\\|On the Phone\u201d.*\n\n    ...\n    modparam(\"presence_xml\", \"presence_single_body_priorities\", \"Offline|Online|Busy|Really Busy\")\n    ...\n\n",
  "presence_single_body_lookup_element": "### presence_single_body_lookup_element(str)\n\nSet the name of the element that should be used to get the priority. If\nthe value obtained is not in the list of\n`presence_single_body_priorities` the priority is 0.\n\n*Default value: \u201cnote\u201d.*\n\n    ...\n    modparam(\"presence_xml\", \"presence_single_body_lookup_element\", \"status\")\n    ...\n\n",
  "default_expires": "### default_expires (int)\n\nThe default expires value used when missing from SUBSCRIBE message (in\nseconds).\n\n*Default value is \u201c3600\u201d.*\n\n    ...\n    modparam(\"presence_xml\", \"default_expires\", 3600)\n    ...\n\n"
 },
 "pua": {
  "hash_size": "### hash_size (int)\n\nThe size of the hash table used for storing SUBSCRIBE and PUBLISH\ninformation. This parameter will be used as the power of 2 when\ncomputing table size.\n\n*Default value is \u201c9\u201d.*\n\n    ...\n    modparam(\"pua\", \"hash_size\", 11)\n    ...\n\n",
  "db_url": "### db_url (str)\n\nDatabase url.\n\n*Default value is \u201c\\>mysql://kamailio:kamailiorw@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"pua\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "db_table": "### db_table (str)\n\nThe name of the database table.\n\n*Default value is \u201cpua\u201d.*\n\n    ...\n    modparam(\"pua\", \"db_table\", \"pua\")\n    ...\n\n",
  "min_expires": "### min_expires (int)\n\nThe inferior expires limit for both Publish and Subscribe.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"pua\", \"min_expires\", 0)\n    ...\n\n",
  "default_expires": "### default_expires (int)\n\nThe default expires value used in case this information is not\nprovisioned.\n\n*Default value is \u201c3600\u201d.*\n\n    ...\n    modparam(\"pua\", \"default_expires\", 3600)\n    ...\n\n",
  "update_period": "### update_period (int)\n\nThe interval at which the information in database and hash table should\nbe updated. In the case of the hash table updating means deleting\nexpired messages. Setting a value less than or equal to zero, disables\nupdates.\n\n*Default value is \u201c100\u201d.*\n\n    ...\n    modparam(\"pua\", \"update_period\", 100)\n    ...\n\n",
  "outbound_proxy": "### outbound_proxy (str)\n\nSIP URI of outbound proxy to be used when sending PUBLISH requests if no\noutbound proxy is given in outbound_proxy field of struct publ_info.\n\n*By default, no outbound proxy has been defined.*\n\n    ...\n    modparam(\"pua\", \"outbound_proxy\", \"sip:outbound.example.com\")\n    ...\n\n",
  "dlginfo_increase_version": "### dlginfo_increase_version (int)\n\nWhen sending PUBLISH messages for Event: dialog, the body contains an\nXML document according to RFC 4235. This XML document contains a version\nattribute to easily detect changes in the dialog state. By setting this\nparameter, the pua module parses the XML document and sets the version\nattribute to the proper value. If the receiver of the PUBLISH does not\ncare about the version parameter (e.g. like Kamailio presence_dialoginfo\nmodule) it makes no sense to waste CPU resources for parsing the XML\nbody and the parameter should be set to 0.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"pua\", \"dlginfo_increase_version\", 1)\n    ...\n\n",
  "reginfo_increase_version": "### reginfo_increase_version (int)\n\nWhen sending PUBLISH messages for Event: reg, the body contains an XML\ndocument according to RFC 4235(?). This XML document contains a version\nattribute to easily detect changes in the registration state. By setting\nthis parameter, the pua module parses the XML document and sets the\nversion attribute to the proper value. If the receiver of the PUBLISH\ndoes not care about the version parameter (e.g. like Kamailio\npresence_reginfo module) it makes no sense to waste CPU resources for\nparsing the XML body and the parameter should be set to 0.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"pua\", \"reginfo_increase_version\", 1)\n    ...\n\n",
  "db_mode": "### db_mode (int)\n\nThe module supports 2 modes of operation, high speed memory based\nstorage (mode 0), and database only (mode 2) where all data is stored in\na database, allowing scalability at the expense of speed. Mode 1 is\nreserved.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"pua\", \"db_mode\", 0)\n    ...\n\n",
  "db_table_lock_write": "### db_table_lock_write (integer)\n\nEnable (=1) or disable (=0) the Locks for table during a transaction.\nLocking only the \"current\" table causes problems with a MySQL-Databases\nin \"DB-Only\" mode.\n\n*Default value is 1 (Write Lock for the Tables).*\n\n    ...\n    modparam(\"pua\", \"db_table_lock_write\", 0)\n    ...\n\n",
  "check_remote_contact": "### check_remote_contact (int)\n\nWhen sending a SUBSCRIBE check that the remote contact matches the one\nin the stored dialog or not. If the remote contact is checked and does\nnot match the one in the stored dialog then the dialog is not matched.\nChecking the remote contact can cause problems when using modules like\nRLS and should not be required in order to properly match the dialog\nanyway. Set this parameter to 0 to disable checking of remote contact\nfor SUBSCRIBE dialog matching.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"pua\", \"check_remote_contact\", 0)\n    ...\n\n",
  "fetch_rows": "### fetch_rows (integer)\n\nNumber of rows to be loaded in one step from database.\n\n*Default value is 500.*\n\n    ...\n    modparam(\"pua\", \"fetch_rows\", 1000)\n    ...\n\n"
 },
 "qos": {
  "qos_flag": "### qos_flag (integer)\n\nThe module will not do anything to any message unless instructed to do\nso via the config script. You must set the `qos_flag` value in the\n`setflag()` call of the INVITE you want the qos module to process. But\nbefore you can do that, you need to tell the qos module which flag value\nyou are assigning to qos.\n\nIn most cases when ever you set the dialog flag you will want to set the\nqos flag. If the dialog flag is not set and the qos flag is set, it will\nnot have any effect.\n\n*This parameter must be set or the module will not load.*\n\n*Default value is \u201cNot set!\u201d.*\n\n    ...\n    modparam(\"dialog\", \"dlg_flag\", 5)\n    modparam(\"qos\", \"qos_flag\", 7)\n    ...\n    route {\n      ...\n      if (method==\"INVITE\") {\n        setflag(5); # set the dialog flag\n        setflag(7); # Set the qos flag\n      }\n      ...\n    }\n\n"
 },
 "tcpops": {
  "closed_event": "### closed_event (int)\n\nIf set to 0 (globally disabled), the \"tcp:closed\" event route will never\nbe called on TCP disconnections.\n\nIf set to 1 (globally enabled), the \"tcp:closed\" event route will always\nbe called on TCP disconnections.\n\nIf set to 2 (\"manual\" mode), the \"tcp:closed\" event route will only be\ncalled on TCP connections for which `tcp_enable_closed_event()` has been\napplied, when a disconnection occurs.\n\n*Default value is 1 (globally enabled).*\n\n    ...\n    modparam(\"tcpops\", \"closed_event\", 0)\n    ...\n\n",
  "event_callback": "### event_callback (str)\n\nThe name of the function in the kemi configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[...\\] blocks.\n\nThe function receives a string parameter with the name of the event, the\nvalues are: 'tcp:closed', 'tcp:timeout', 'tcp:reset'.\n\n*Default value is 'empty' (no function is executed for events).*\n\n    ...\n    modparam(\"tcpops\", \"event_callback\", \"ksr_tcpops_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_tcpops_event(evname)\n        KSR.info(\"===== evapi module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n    ...\n\n"
 },
 "path": {
  "use_received": "### use_received (int)\n\nIf set to 1, the \u201creceived\u201d parameter of the first Route URI is\nevaluated and used as destination-URI if present.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"path\", \"use_received\", 1)\n    ...\n\n",
  "received_format": "### received_format (int)\n\nIf set to 0, the \u201creceived\u201d parameter value will be in the escaped SIP\nURI format.\n\nIf set to 1, the \u201creceived\u201d parameter value will be in the same format\nas the \u201calias\u201d parameter added by set_contact_alias() from \u201cnathelper\u201d\nmodule (i.e., \u201cip~port~protid\u201d). This is a solution with some SIP\napplications that incorrectly match the transport from received\nparameter instead of the one from the SIP URI.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"path\", \"received_format\", 1)\n    ...\n\n",
  "received_name": "### received_name (str)\n\nSet the name of the header parameter to add the \u201creceived\u201d value.\n\n*Default value is \"received\".*\n\n    ...\n    modparam(\"path\", \"received_name\", \"rcv\")\n    ...\n\n",
  "enable_r2": "### enable_r2 (int)\n\nIf set to 1, the module will add two Path headers, similar to the double\nRecord-Route done by rr module. One Path headers corresponds to incoming\nnetwork socket and the other to outgoing network socket. The URIs in the\nPath headers will have the 'r2=on' parameter as well.\n\nNote: if enabled, the module adds the two Path headers even when the\nincoming socket is the same as outgoing socket. Improvements to skip the\nsecond Path header in this case may be introduced in the future,\nmeanwhile, if you need to enable this parameter but also deal with same\nsocket routing, use 'insert_hf(\"Path: \\<\\$Ru\\>\\r\\n\")'.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"path\", \"enable_r2\", 1)\n    ...\n\n",
  "sockname_mode": "### sockname_mode (int)\n\nIf set to 1, the Path URI is built to contain socket name in 'sn'\nparameter.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"path\", \"sockname_mode\", 1)\n    ...\n\n"
 },
 "dmq": {
  "server_address": "### server_address(str)\n\nThe local server address. This is the address with which the local DMQ\nnode joins the servers group to send/receive messages.\n\nNote: if server_socket is not set, then this address has to match a\nlocal socket, which will be used to send/receive messages.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"dmq\", \"server_address\", \"sip:10.0.0.20:5060\")\n    ...\n    modparam(\"dmq\", \"server_address\", \"sip:10.0.0.20:5061;transport=tls\")\n    ...\n\n",
  "server_socket": "### server_socket(str)\n\nThe local listen address. This is the interface over which the DMQ\nengine will send/receive messages.\n\nNote: if this parameter is not set, the socket to send/receive messages\nis built from server_address parameter.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"dmq\", \"server_socket\", \"udp:10.0.0.20:5060\")\n    ...\n\n",
  "notification_address": "### notification_address(str)\n\nThe address of another DMQ node from which the local node should\nretrieve initial information about all other nodes. This parameter can\nbe specified multiple times in the configuration, to configure multiple\nnotification servers. If you configure multiple notification servers,\nthe *multi_notify* parameter needs to be disabled.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"dmq\", \"notification_address\", \"sip:10.0.0.21:5060\")\n    ...\n    modparam(\"dmq\", \"notification_address\", \"sip:10.0.0.21:5061;transport=tls\")\n    ...\n\n",
  "notification_channel": "### notification_channel(str)\n\nThe name of the channel for notifications about peers availability.\n\n*Default value is \u201cnotification_peer\u201d.*\n\n    ...\n    modparam(\"dmq\", \"notification_channel\", \"peers\")\n    ...\n\n",
  "multi_notify": "### multi_notify(int)\n\nEnables the ability to resolve multiple IPv4/IPv6 addresses for a single\nnotification address. Please note that this mode is not supported if you\nspecify multiple notification address parameter.\n\nA value of zero resolves to the first IP address found. A non-zero value\nresolves to all IP addresses associated with the host. This includes\naddresses from DNS SRV records, A and AAAA records.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dmq\", \"multi_notify\", 1)\n    ...\n\n",
  "num_workers": "### num_workers(int)\n\nThe number of worker threads for sending/receiving messages.\n\n*Default value is \u201c2\u201d.*\n\n    ...\n    modparam(\"dmq\", \"num_workers\", 4)\n    ...\n\n",
  "worker_usleep": "### worker_usleep(int)\n\nThe default locking/synchronisation mechanism between producer/consumer\nthreads is the optimum for most environments. On some systems (e.g.\nFreeBSD) it can cause high CPU load and in such cases, it can be useful\nto disable locking and switch to polling for tasks at set intervals\ninstead - putting the thread to sleep in-between and taking it out of\nprocess during that time.\n\nA value \\>0 will disable the default locking and set the polling\ninterval (in microseconds), which can be tuned to suit the specific\nenvironment.\n\n*Default value is 0 (recommended for most systems).*\n\n    ...\n    modparam(\"dmq\", \"worker_usleep\", 1000)\n    ...\n\n",
  "ping_interval": "### ping_interval(int)\n\nThe number of seconds between node pings (for checking status of other\nnodes).\n\n*Minimum value is \u201c60\u201d (default).*\n\n    ...\n    modparam(\"dmq\", \"ping_interval\", 90)\n    ...\n\n"
 },
 "registrar": {
  "default_expires": "### default_expires (integer)\n\nIf the processed message contains neither Expires header fields nor\nexpires contact parameters, this value will be used for newly created\nusrloc records. The parameter contains number of second to expire (for\nexample use 3600 for one hour). If it is set to a lower value than the\n\u201cmin_expires\u201d parameter then it will be ignored. This parameter can be\nmodified via ser config framework. A random value in a specific interval\ncan be selected by using the default_expires_range parameter\n\n*Default value is 3600.*\n\n    ...\n    modparam(\"registrar\", \"default_expires\", 1800)\n    ...\n\n",
  "default_expires_range": "### default_expires_range (integer)\n\nThis parameter specifies that the expiry used for newly created usrloc\nrecords are not fixed, but a random value in the interval\n\u201c\\[default_expires-default_expires_range%, default_expires\\]\u201d. The value\nis between 0 and 100 and represent the maximum percentage from expires\nthat will be subtracted when computing the value. Default is 0, meaning\ndefault_expires is left unmodified. This parameter can be modified via\nthe Kamailio config framework.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"registrar\", \"default_expires_range\", 30) # +- 30% from default_expires\n    ...\n\n",
  "expires_range": "### expires_range (integer)\n\nSimilar to default_expires_range, but it applies to the incoming expires\nvalue. Default in 0, meaning the expires is left unmodified. This\nparameter can be modified via the Kamailio config framework.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"registrar\", \"expires_range\", 30) # expires within [0.7*expires .. expires]\n    ...\n\n",
  "min_expires": "### min_expires (integer)\n\nThe minimum expires value of a \u201cContact\u201d. Values lower than this minimum\nwill be either set to the minimum or 423 response is sent back. Value 0\ndisables the checking. This parameter can be modified via the Kamailio\nconfig framework.\n\n*Default value is 60.*\n\n    ...\n    modparam(\"registrar\", \"min_expires\", 60)\n    ...\n\n",
  "min_expires_mode": "### min_expires_mode (integer)\n\nControl what to do when expires value in REGISTER request is lower than\nmin_expires parameter. If set to 0, expires is set to min_expires. If\nset to 1, then 423 Interval Too Brief is sent back.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"registrar\", \"min_expires_mode\", 1)\n    ...\n\n",
  "max_expires": "### max_expires (integer)\n\nThe maximum accepted expires value of a \u201cContact\u201d, values higher than\nthis maximum will be automatically set to the maximum. Value 0 disables\nthe checking. This parameter can be modified via the Kamailio config\nframework.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"registrar\", \"max_expires\", 120)\n    ...\n\n",
  "default_q": "### default_q (integer)\n\nThe parameter represents default \u201cq\u201d value for new contacts. Because\nKamailio doesn't support float parameter types, the value in the\nparameter is divided by 1000 and stored as float. For example, if you\nwant default_q to be 0.38, use value 380 here. This parameter can be\nmodified via the Kamailio config framework.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"registrar\", \"default_q\", 1000)\n    ...\n\n",
  "realm_prefix": "### realm_prefix (string)\n\nPrefix to be automatically stripped from realm. As an alternative to SRV\nrecords (not all SIP clients support SRV lookup), a subdomain of the\nmaster domain can be defined for SIP purposes (like sip.mydomain.net\npointing to same IP address as the SRV record for mydomain.net). By\nignoring the realm_prefix \"sip.\", at registration, sip.mydomain.net will\nbe equivalent to mydomain.net. This parameter can be modified via the\nKamailio config framework.\n\n*Default value is NULL (none).*\n\n    ...\n    modparam(\"registrar\", \"realm_prefix\", \"sip.\")\n    ...\n\n",
  "append_branches": "### append_branches (integer)\n\nThe parameter controls how lookup function processes multiple contacts.\nIf there are multiple contacts for the given username in usrloc and this\nparameter is set to 1, Request-URI will be overwritten with the\nhighest-q rated contact. The rest will be appended to sip_msg structure\nand can be later used by tm for forking. If the parameter is set to 0,\nonly Request-URI will be overwritten with the highest-q rated contact\nand the rest will be left unprocessed. This parameter can be modified\nvia Kamailio config framework.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"registrar\", \"append_branches\", 0)\n    ...\n\n",
  "aor_avp": "### aor_avp (str)\n\nThis module parameter has been removed. Use the 'uri' parameter from\nfunctions (e.g., save, lookup, registered).\n\n",
  "case_sensitive": "### case_sensitive (integer)\n\nIf set to 1 then AOR comparison and also storing will be case sensitive,\nif set to 0 then AOR comparison and storing will be case insensitive.\nThis is recommended. This parameter can be modified via Kamailio config\nframework.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"registrar\", \"case_sensitive\", 1)\n    ...\n\n",
  "received_avp": "### received_avp (str)\n\nRegistrar will store the value of the AVP configured by this parameter\nin the received column in the user location database. It will leave the\ncolumn empty if the AVP is empty. The AVP should contain a SIP URI\nconsisting of the source IP, port, and transport protocol of the\nREGISTER message being processed.\n\n<div class=\"note\">\n\nThe value of this parameter should be the same as the value of\ncorresponding parameter of nathelper module.\n\n</div>\n\n*Default value is \"NULL\" (disabled).*\n\n    ...\n    modparam(\"registrar\", \"received_avp\", \"$avp(s:rcv)\")\n    ...\n\n",
  "received_param": "### received_param (string)\n\nThe name of the parameter that will be appended to Contact URI's of 200\nOK when the received URI was set by the \u201cnathelper\u201d module. If the value\nis an empty string, then the parameter is not appended anymore.\n\n*Default value is \"received\".*\n\n    ...\n    modparam(\"registrar\", \"received_param\", \"rcv\")\n    ...\n\n",
  "max_contacts": "### max_contacts (integer)\n\nThe parameter can be used to limit the number of contacts per AOR\n(Address of Record) in the user location database. If the maximum number\nof contacts is exceeded, Kamailio will not accept the registration and\nsend an error response. Value 0 disables the check. This parameter can\nbe modified via the Kamailio config framework. (Please also check the\nflag for `save()` if you only want only one active registration).\n\n*Default value is 0.*\n\n    ...\n    # Allow no more than 10 contacts per AOR\n    modparam(\"registrar\", \"max_contacts\", 10)\n    ...\n            \n\n",
  "retry_after": "### retry_after (integer)\n\nThe registrar can generate a 5xx reply to REGISTER requests in various\nsituations. It can, for example, happen when the `max_contacts`\nparameter is set and the processing of REGISTER request would exceed the\nlimit. In this case the registrar would generate \"503 Service\nUnavailable\" response. This parameter can be modified via the Kamailio\nconfig framework.\n\nIf you want to add the Retry-After header field in 5xx replies, set this\nparameter to a value grater than zero (0 means do not add the header\nfield). See section 20.33 of RFC3261 for more details.\n\n*Default value is 0 (disabled).*\n\n    ...\n    modparam(\"registrar\", \"retry_after\", 30)\n    ...\n            \n\n",
  "sock_flag": "### sock_flag (integer)\n\nMessage flag to signal to the registrar module to look into REGISTER\nrequest for a header which contains a socket description (IP:port). This\nsocket info will be stored by registrar instead of the received socket\ninfo.\n\nThis makes sense only in multiple replicated servers scenarios.\n\n*Default value is -1 (no flag).*\n\n    ...\n    modparam(\"registrar\", \"sock_flag\", 18)\n    ...\n            \n\n",
  "sock_hdr_name": "### sock_hdr_name (string)\n\nHeader which contains a socket description (proto:IP:port) to override\nthe received socket info. The header will be read only if the flag\nsock_flag is set.\n\nThis makes sense only in multiple replicated servers scenarios.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"registrar\", \"sock_hdr_name\", \"Sock-Info\")\n    ...\n            \n\n",
  "sock_mode": "### sock_mode (integer)\n\nIf set to 1, the server stores the advertised address in socket field,\ninstead of bind address.\n\nThis could be useful when kamailio is installed behind NAT and it is\nnecessary to store its public IP instead socket on which the register\nrequest was received.\n\n*Default value is 0 (store bind address).*\n\n    ...\n    modparam(\"registrar\", \"sock_mode\", 1)\n    ...\n            \n\n",
  "method_filtering": "### method_filtering (integer)\n\nTells if the contact filtering based on supported methods should be\nperformed during lookup on initial requests without to-tag. It's enabled\nonly if it has a non zero value. Supported methods are listed in the\n\u201cAllow:\u201d header in the REGISTER message and stored in the location\ndatabase.\n\n*Default value is 0 (disabled).*\n\n    ...\n    modparam(\"registrar\", \"method_filtering\", 1)\n    ...\n            \n\n",
  "use_path": "### use_path (integer)\n\nIf set to 1, the \u201cPath:\u201d header is handled according to the parameter\nThis parameter can be modified via Kamailio config framework.\n\u201cpath_mode\u201d.\n\n*Default value is 0 (disabled).*\n\n    ...\n    modparam(\"registrar\", \"use_path\", 1)\n    ...\n            \n\n",
  "path_mode": "### path_mode (integer)\n\nThe registrar module implements three different modes regarding the\nresponse to a registration which includes one or more Path headers:\n\n- 0 - The Path header is saved into usrloc, but is not included in the\n  reply.\n\n- 1 - The Path header is saved into usrloc, but is only included in the\n  reply if path support is indicated in the registration request by the\n  \u201cpath\u201d option in the \u201cSupported:\u201d header.\n\n- 2 - The path header is only saved into usrloc, if path support is\n  indicated in the registration request by the \u201cpath\u201d option of the\n  \u201cSupported\u201d header. If no path support is indicated, the request is\n  rejected with \u201c420 - Bad Extension\u201d and the header \u201cUnsupported: path\u201d\n  is included in the reply along with the received \u201cPath\u201d header. This\n  mode is the one recommended by RFC-3327.\n\n*Default value is 2.*\n\n    ...\n    modparam(\"registrar\", \"path_mode\", 0)\n    ...\n            \n\n",
  "path_use_received": "### path_use_received (integer)\n\nIf set to 1, the \u201creceived\u201d parameter of the first Path URI of a\nregistration is set as received-uri and the NAT branch flag is set for\nthis contact. This is useful if the registrar is placed behind a SIP\nloadbalancer, which passes the nat'ed UAC address as \u201creceived\u201d\nparameter in it's Path uri.\n\n*Default value is 0 (disabled).*\n\n    ...\n    modparam(\"registrar\", \"path_use_received\", 1)\n    ...\n            \n\n",
  "path_check_local": "### path_check_local (integer)\n\nIf set to 1, when performing a lookup the Path (if present) is evaluated\nand if the first hop is local (according to \u201cmyself\u201d test), we skip it\nto avoid unnecessary looping.\n\nThis is useful if multiple servers are sharing a common location\ndatabase, each saving contacts with their local address as the Path.\n\n*Default value is 0 (disabled).*\n\n    ...\n    modparam(\"registrar\", \"path_check_local\", 1)\n    ...\n            \n\n",
  "reg_callid_avp": "### reg_callid_avp (string)\n\n*obsolete. use match_option in registered function*\n\nIf reg_callid_avp is defined and populated when the `registered()` is\ninvoked, the result is TRUE only if an active registration with the\nspecified callID is found.\n\n*Default value is NULL (disabled).*\n\n    ...\n    modparam(\"registrar\", \"reg_callid_avp\", \"$avp(s:avp)\")\n    ...\n            \n\n",
  "xavp_cfg": "### xavp_cfg (string)\n\nDefines the name of XAVP class to store runtime module config values.\nThe values are stored as inner XAVPs, like \\$xavp(class=\\>attribute).\nValid inner XAVP names:\n\n- *match_callid* - filter contacts by callid. Used in registered().\n\n- *match_contact* - filter contacts by contact. Used in registered().\n\n- *match_received* - filter contacts by received. Used in registered().\n\n- *rlf_bflags* - filter contacts by branch flags. Used in lookup().\n\n- *q* - q value of contact (integer 0-1000). It overrides q value given\n  in contact header and default_q parameter. Used in save().\n\n- *expires* - the expires value, to overwrite the value from SIP\n  headers. Used in save().\n\n- *max_contacts* - the number of maximum contacts to be stored for the\n  current registration AoR. It overwrites the 'max_contacts' module\n  parameter value. Used in save().\n\n- *socket* - the string representing the socket on which the register\n  request was received, as alternative to using the sock_hdr. Used in\n  save().\n\nFor example. if this parameter is set to 'reg', then the number of\nmaximum contacts can be set in \\$xavp(reg=\\>max_contacts).\n\n*Default value is NULL (disabled).*\n\n    ...\n    modparam(\"registrar\", \"xavp_cfg\", \"reg\")\n    ...\n    request_route {\n        ...\n        $xavp(reg=>max_contacts) = 4;\n        $xavp(reg[0]=>expires) = 600;\n        save(\"location\");\n        ...\n    }\n    ...\n            \n\n",
  "xavp_rcd": "### xavp_rcd (string)\n\nDefines the name of XAVP class to store details from the location\nrecords. The values are stored as inner XAVPs, like\n\\$xavp(class\\[0\\]=\\>attribute). Valid inner XAVP names:\n\n- *ruid* - the record's internal unique id.\n\n- *contact* - the record's contact value.\n\n- *expires* - the record's expires value.\n\n- *received* - the record's received value.\n\n- *path* - the record's path value.\n\nFor example. if this parameter is set to 'ulrcd', then values are set\nin:\n\n- *\\$xavp(ulrcd\\[0\\]=\\>ruid)*\n\n- *\\$xavp(ulrcd\\[0\\]=\\>contact)*\n\n- *\\$xavp(ulrcd\\[0\\]=\\>received)*\n\n- *\\$xavp(ulrcd\\[0\\]=\\>path)*\n\n*Default value is NULL (disabled).*\n\n    ...\n    modparam(\"registrar\", \"xavp_rcd\", \"ulrcd\")\n    ...\n            \n\n",
  "xavp_rcd_mask": "### xavp_rcd_mask (int)\n\nDefines what values to skip when xavp_rcd is stored.\n\n- 1 - *ruid*\n\n- 2 - *contact*\n\n- 4 - *expires*\n\n- 8 - *received*\n\n- 16 - *path*\n\n*Default value is 0 (none).*\n\n    ...\n    # skip path value\n    modparam(\"registrar\", \"xavp_rcd_mask\", 16)\n    ...\n    # skip path and expires values\n    modparam(\"registrar\", \"xavp_rcd_mask\", 20)\n    ...\n            \n\n",
  "gruu_enabled": "### gruu_enabled (integer)\n\nIf set to 1 and the \u201c+sip.instance\u201d parameter to Contact header of\nREGISTER is present, then the value of the parameter is saved to\nlocation and pub-gruu and temp-gruu addresses are generated.\n\nSet it to 0 if you want to ignore GRUU extensions in REGISTER.\n\n*Default value is 1 (enabled).*\n\n    ...\n    modparam(\"registrar\", \"gruu_enabled\", 0)\n    ...\n            \n\n",
  "outbound_mode": "### outbound_mode (integer)\n\nIf set to 0 this module will accept REGISTER requests that do not\ncontain a \u201cSupported:\u201d header with the outbound options-tag. The 200 OK\nresponse to REGISTER requests that this module generates will not\ncontain \u201cRequire:\u201d or \u201cSupported:\u201d headers with the outbound\noptions-tag. If the client has a \u201cRequire:\u201d header with the outbound\noptions tag the REGISTER will be rejected with a \u201c420 Bad Extension\u201d\nresponse.\n\nIf set to 1 this module will accept REGISTER requests that do not\ncontain a \u201cSupported:\u201d header with the outbound options-tag and REGISTER\nrequests that do contain a Supported: or Requires: header with the\noutbound options-tag. When the client supports *outbound* the\nappropriate RFC5626 procedures will be followed.\n\nIf set to 2 this module will reject REGISTER requests that do not\ncontain a \u201cSupported:\u201d header with the outbound options-tag. When the\nclient supports outbound the appropriate RFC5626 procedures will be\nfollowed.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"registrar\", \"outbound_mode\", 2)\n    ...\n            \n\n",
  "regid_mode": "### regid_mode (integer)\n\nIf set to 0 this module will ignore the \u201cregid\u201d contact param when\nsaving REGISTER request if the request does not indicate support for\noutbound.\n\nIf set to 1 this module will use \u201cregid\u201d contact param (if present) when\nsaving REGISTER request even if REGISTER request does not indicate\nsupport for outbound.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"registrar\", \"regid_mode\", 1)\n    ...\n            \n\n",
  "flow_timer": "### flow_timer (integer)\n\nIf set to 0 then this module will not add a \u201cFlow-Timer:\u201d header to 200\nOK responses to REGISTER requests.\n\nIf set to \\> 0 then this module will add a \u201cFlow-Timer:\u201d header\ncontaining this value to 200 OK responses to REGISTER requests. This\nparameter may only be set to a value \\> 0 when *outbound_mode* is set to\n1 or 2.\n\nWhen set to a value greater than 0 this parameter should be set to\nslightly less than the connection timeout value between the UAC and the\nnetwork (this corresponds to the core *tcp_connection_lifetime* option\nand *websocket* *keepalive_timeout* modparam). This parameter is most\nuseful when you have a single edge proxy/registrar or if you have an\nedge proxy that cannot modify responses. If you are using a separate\nedge proxy you should consider leaving this parameter set to 0 and\nadding the \u201cFlow-Timer:\u201d header on the edge proxy as this allows you to\nkeep all of the timer values for a specific flow in one configuration.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"registrar\", \"flow_timer\", 25)\n    ...\n            \n\n",
  "contact_max_size": "### contact_max_size (integer)\n\nMax size of URIs in \u201cContact:\u201d header.\n\nThe size of URIs in \u201cContact:\u201d headers are checked to be lower or equal\nto this value. A warning is logged and a 400 Bad Request is sent in\nresponse to REGISTER requests with contact URIs that are longer than\nthis value.\n\nIf a database is used then you must make sure that your database model\nsupports strings of the configured size in the column \u201ccontact\u201d of the\ntable specified in \u201csave()\u201d function.\n\n*Default value is 512.*\n\n    ...\n    modparam(\"registrar\", \"contact_max_size\", 1024)\n    ...\n            \n\n",
  "event_callback": "### event_callback (str)\n\nThe name of the function in the KEMI configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[...\\] blocks.\n\nThe function receives a string parameter with the name of the event. The\nonly possible value currently is 'usrloc:contact-expired'.\n\n*Default value is 'empty' (no function is executed for events).*\n\n    ...\n    modparam(\"registrar\", \"event_callback\", \"ksr_registrar_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_registrar_event(evname)\n        KSR.info( \"Expired contact for \" .. KSR.pv.getw(\"$ulc(exp=>aor)\") .. \"\\n\");\n        return 1;\n    end\n    ...\n            \n\n",
  "lookup_filter_mode": "### lookup_filter_mode (int)\n\nControl what filters should be applied to lookup(...) operations. It can\nbe a combination (sum) of the next values:\n\n- *1* - apply the branch flags filter - return only contact records with\n  branch flags matching at least one set inside xavp specified by\n  xavp_cfg parameter with inner name rlf_bflags - e.g.,\n  \\$xavp(reg=\\>rlf_bflags).\n\n- *2* - apply the active tcp connection filter - return only contact\n  records that have the associated TCP/TLS/WSS connection active. UDP\n  and SCTP contacts are not filtered, all are returned.\n\n*Default value is NULL (disabled).*\n\n    ...\n    modparam(\"registrar\", \"xavp_cfg\", \"reg\")\n    modparam(\"registrar\", \"lookup_filter_mode\", 1)\n    ...\n    request_route {\n        ...\n        $xavp(reg=>rlf_bflags) = 8;\n        if(lookup(\"location\")) { ... }\n        ...\n    }\n    ...\n            \n\n",
  "use_expired_contacts": "### use_expired_contacts (int)\n\nAllow/Disallow the usage of the expired contacts.\n\n- *0* Disallow the usage of the expired contacts.\n\n- *1* Allow the usage of the expired contacts.\n\n*Default value is 0 (Disallow).*\n\n    ...\n    modparam(\"registrar\", \"use_expired_contacts\", 1)\n    ...\n\n    kamcmd cfg.set_now_int registrar use_expired_contacts 1\n    kamcmd cfg.set_now_int registrar use_expired_contacts 0\n            \n\n"
 },
 "db_perlvdb": {},
 "enum": {
  "domain_suffix": "### domain_suffix (string)\n\nThe domain suffix to be added to the domain name obtained from the\ndigits of an E164 number. Can be overridden by a parameter to\nenum_query.\n\nDefault value is \u201ce164.arpa.\u201d\n\n    modparam(\"enum\", \"domain_suffix\", \"e1234.arpa.\")\n\n",
  "tel_uri_params": "### tel_uri_params (string)\n\nA string whose contents is appended to each new tel URI in the request\nas tel URI parameters.\n\n<div class=\"note\">\n\nCurrently SIP Router does not support tel URIs. This means that at\npresent tel_uri_params is appended as URI parameters to every URI.\n\n</div>\n\nDefault value is \u201c\u201d\n\n    modparam(\"enum\", \"tel_uri_params\", \";npdi\")\n\n",
  "i_enum_suffix": "### i_enum_suffix (string)\n\nThe domain suffix to be used for i_enum_query() lookups. Can be\noverridden by a parameter to i_enum_query.\n\nDefault value is \u201ce164.arpa.\u201d\n\n    modparam(\"enum\", \"i_enum_suffix\", \"e1234.arpa.\")\n\n",
  "branchlabel": "### branchlabel (string)\n\nThis parameter determines which label i_enum_query() will use to branch\noff to the infrastructure ENUM tree.\n\nDefault value is \u201c\"i\"\u201d\n\n    modparam(\"enum\", \"branchlabel\", \"i\")\n\n",
  "bl_algorithm": "### bl_algorithm (string)\n\nThis parameter determines which algorithm the `i_enum_query()` function\nwill use to select the position in the DNS tree where the infrastructure\ntree branches off the user ENUM tree.\n\nIf set to \"cc\", i_enum_query() will always insert the label at the\ncountry-code level. Examples: i.1.e164.arpa, i.3.4.e164.arpa,\ni.2.5.3.e164.arpa\n\nIf set to \"txt\", i_enum_query() will look for a TXT record at\n\\[branchlabel\\].\\[reverse-country-code\\].\\[i_enum_suffix\\] to indicate\nafter how many digits the label should in inserted.\n\n    i.1.e164.arpa.                     IN TXT   \"4\"\n    9.9.9.8.7.6.5.i.4.3.2.1.e164.arpa. IN NAPTR \"NAPTR content for  +1 234 5678 999\"\n\nIf set to \"ebl\", i_enum_query() will look for an EBL (ENUM Branch Label)\nrecord at \\[branchlabel\\].\\[reverse-country-code\\].\\[i_enum_suffix\\].\nSee\nhttp://www.ietf.org/internet-drafts/draft-lendl-enum-branch-location-record-00.txt\nfor a description of that record and the meaning of the fields. The RR\ntype for the EBL has not been allocated yet. This version of the code\nuses 65300. See resolve.h.\n\n    i.1.e164.arpa.     TYPE65300  \\# 14 (\n                                  04    ; position\n                                  01 69 ; separator\n                                  04 65 31 36 34 04 61 72 70 61 00 ; e164.arpa\n    ;                               )\n    9.9.9.8.7.6.5.i.4.3.2.1.e164.arpa. IN NAPTR \"NAPTR content for  +1 234 5678 999\"\n\nDefault value is \u201ccc\u201d\n\n    modparam(\"enum\", \"bl_algorithm\", \"txt\")\n\n"
 },
 "timer": {
  "declare_timer": "### declare_timer (string)\n\nDeclares timer route which will be called in specific interval.\n\nThe format is:\n\n                declare_timer = declare_timer_syntax\n                \n\n- timer_id\n  is timer identifier.\n- route\n  is handler to be called when timer is triggered. It has to be a route\n  block name when native scripting is used, or Kemi function name. The\n  Kemi function name receives one string parameter (for now it has a\n  static value, respectively the module name).\n- interval\n  is timer interval in milliseconds,\n- slow_fast\n  determines if handler will be hooked in slow or fast timer queue, fast\n  timer handler returns as quickly as possible, slow timer handler may\n  spend longer time, see kamailio/doc/timers.txt documentation.\n- enable\n  \\- enable timer when Kamailio is starting, otherwise use\n  timer_enable\n  to start it later.\n\n<!-- -->\n\n    ...\n    modparam(\"timer\", \"declare_timer\", \"MY_TIMER=MY_TIMER_ROUTE,10,slow,enable\");\n    ...\n                    \n\n"
 },
 "mqueue": {
  "db_url": "### db_url (str)\n\nThe URL to connect to database for loading values in mqueue table at\nstart up and/or saving values at shutdown.\n\n*Default value is NULL (do not connect).*\n\n    ...\n    modparam(\"mqueue\", \"db_url\", \"mysql://kamailio:kamailiorw@localhost/kamailio\")\n\n    # Example of table in sqlite, you have the set the fields to support the length according to the data that will be present in the mqueue\n    CREATE TABLE mqueue_name (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    key character varying(64) DEFAULT \"\" NOT NULL,\n    val character varying(4096) DEFAULT \"\" NOT NULL\n    );\n    ...\n\n",
  "mqueue": "### mqueue (string)\n\nDefinition of a memory queue\n\n*Default value is \u201cnone\u201d.*\n\nValue must be a list of parameters: attr=value;...\n\n- Mandatory attributes:\n\n  - *name*: name of the queue.\n\n- Optional attributes:\n\n  - *size*: size of the queue. Specifies the maximum number of items in\n    queue. If exceeded the oldest one is removed. If not set the queue\n    will be limitless.\n\n  - *dbmode*: If set to 1, the content of the queue is read from\n    database at startup and is written to database table when the SIP\n    server is stopped (i.e., ensure persistency over restarts). If set\n    to 2, it is read at startup but not written at shutdown. If set to\n    3, it is written at shutdown but not read at startup. Default value\n    is 0 (no db table interaction).\n\n  - *addmode*: how to add new (key,value) pairs.\n\n    - *0*: Will push all new (key,value) pairs at the end of the queue.\n      (default)\n\n    - *1*: Will keep oldest (key,value) pair in the queue, based on the\n      key.\n\n    - *2*: Will keep newest (key,value) pair in the queue, based on the\n      key.\n\nThe parameter can be set many times, each holding the definition of one\nqueue.\n\n    ...\n    modparam(\"mqueue\", \"mqueue\", \"name=myq;size=20;\")\n    modparam(\"mqueue\", \"mqueue\", \"name=myq;size=10000;addmode=2\")\n    modparam(\"mqueue\", \"mqueue\", \"name=qaz\")\n    modparam(\"mqueue\", \"mqueue\", \"name=qaz;addmode=1\")\n    ...\n\n",
  "mqueue_name": "### mqueue_name (string)\n\nDefinition of a memory queue, just by name.\n\n*Default value is \u201cnone\u201d.*\n\nValue must be a string.\n\nThe parameter can be set many times, each holding the definition of one\nqueue. The max size of each queue defined this way will be equal to\nmqueue_size(if mqueue_size configured), or limitless (if mqueue_size not\nconfigured).\n\n    ...\n    modparam(\"mqueue\", \"mqueue_name\", \"my_own_queue\")\n    ...\n            \n\n",
  "mqueue_size": "### mqueue_size (int)\n\nDefinition of the size of all memory queues defined via \"mqueue_name\"\nparameter.\n\n*Default value is \u201c0\u201d.*\n\nValue must be an int.\n\nThe parameter should be set before defining any \"mqueue_name\". If not\nset, the queues defined via \"mqueue_name\" will be limitless.\n\n    ...\n    modparam(\"mqueue\", \"mqueue_size\", 1024)\n    ...\n            \n\n",
  "mqueue_addmode": "### mqueue_addmode (int)\n\nSets the mode to be used when adding a new (key,value) pair in the\nmqueue.\n\n- *0* Add all new (key,value) at the end of mqueue\n\n- *1* Unique key, keep oldest (key,value)\n\n- *2* Unique key, keep newest(key,value)\n\n*Default value is \u201c0\u201d.*\n\nValue must be an int.\n\nThe parameter should be set before defining any \"mqueue_name\". If not\nset, the queues defined via \"mqueue_name\" will have default addmode 0.\n\n    ...\n    modparam(\"mqueue\", \"mqueue_addmode\", 2)\n    ...\n            \n\n"
 },
 "dispatcher": {
  "list_file": "### list_file (string)\n\nPath to the file with destination sets (destination groups).\n\n*Default value is \u201c/etc/kamailio/dispatcher.list\u201d or\n\u201c/usr/local/etc/kamailio/dispatcher.list\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"list_file\", \"/run/kamailio/dispatcher.list\")\n    ...\n\n",
  "db_url": "### db_url (string)\n\nIf you want to load the list of gateways from the database you must set\nthis parameter.\n\n*Default value is \u201cNULL\u201d (disable DB support).*\n\n    ...\n    modparam(\"dispatcher\", \"db_url\", \"mysql://user:passwd@localhost/database\")\n    ...\n\n",
  "table_name": "### table_name (string)\n\nIf you want to load the list of gateways from the database you must set\nthis parameter as the database name.\n\n*Default value is \u201cdispatcher\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"table_name\", \"my_dispatcher\")\n    ...\n\n",
  "setid_col": "### setid_col (string)\n\nThe column's name in the database storing the gateway's set (group) id.\n\n*Default value is \u201csetid\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"setid_col\", \"groupid\")\n    ...\n\n",
  "destination_col": "### destination_col (string)\n\nThe column's name in the database storing the destination sip URI.\n\n*Default value is \u201cdestination\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"destination_col\", \"uri\")\n    ...\n\n",
  "flags_col": "### flags_col (string)\n\nThe column's name in the database storing the flags for the destination\nURI.\n\n*Default value is \u201cflags\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"flags_col\", \"dstflags\")\n    ...\n\n",
  "priority_col": "### priority_col (string)\n\nThe column's name in the database storing the priority for destination\nURI.\n\n*Default value is \u201cpriority\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"priority_col\", \"dstpriority\")\n    ...\n\n",
  "attrs_col": "### attrs_col (string)\n\nThe column's name in the database storing the attributes for destination\nURI.\n\n*Default value is \u201cattrs\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"attrs_col\", \"dstattrs\")\n    ...\n\n",
  "force_dst": "### force_dst (int)\n\nIf set to 1, force overwriting of destination address (outbound proxy)\nwhen that is already set. If set to 0, will return error when the\ndestination address is already set.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"force_dst\", 1)\n    ...\n\n",
  "flags": "### flags (int)\n\nVarious flags that affect dispatcher's behaviour. The flags are defined\nas a bitmask on an integer value. If flag 1 is set only the username\npart of the URI will be used when computing an URI based hash. If no\nflags are set the username, hostname and port will be used. The port is\nused only if different from 5060 (normal sip URI) or 5061 (in the sips:\ncase).\n\nIf flag 2 is set, then failover support is enabled. The functions\nexported by the module will store the rest of addresses from the\ndestination set in XAPVs, and use these XAVPs to try next address if the\ncurrent-tried destination fails.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"flags\", 3)\n    ...\n\n",
  "use_default": "### use_default (int)\n\nIf the parameter is set to 1, the last address in destination set is\nused as a final option to send the request to. For example, it is useful\nwhen wanting to send the call to an announcement server saying: \"the\ngateways are full, try later\".\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"use_default\", 1)\n    ...\n\n",
  "xavp_dst": "### xavp_dst (str)\n\nThe name of the XAVP which will hold the list with addresses and\nassociated properties, in the order they have been selected by the\nchosen algorithm. If use_default is 1, the values of last XAVP\ncorrespond to the last address in destination set. In case of using\ndispatcher.list file, you have to set the priority field for each\ndestination to ensure a particular order there. The first XAVP is the\ncurrent selected destination. All the other addresses from the\ndestination set will be added in the XAVP list to be able to implement\nserial forking.\n\n<div class=\"note\">\n\nYou must set this parameter if you want to do load balancing fail over.\n\n</div>\n\n*Default value is \u201c\\_dsdst\\_\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"xavp_dst\", \"_dsdst_\")\n    ...\n\n",
  "xavp_dst_mode": "### xavp_dst_mode (int)\n\nControl what fields are added to the XAVP specified by xavp_dst\nparameter.\n\nThe addeded fields are:\n\n- grp - the set id (group id).\n\n- uri - the URI address.\n\n- sock - the socket pointer.\n\n- socket - the socket string - it is added only if xavp_dst_mode has bit\n  2 set (value 2).\n\n- sockname - the sockname string - it is added only if xavp_dst_mode has\n  bit 3 set (value 3).\n\n- dstid - the destination unique id (in case of call load distribution\n  algorithm).\n\n- attrs - the attributes - they are added if xavp_dst_mode does not have\n  the bit 1 set (value 1).\n\n*Default value is \u201c0\u201d (add all fields).*\n\n    ...\n        modparam(\"dispatcher\", \"xavp_dst_mode\", 1)\n    ...\n        modparam(\"dispatcher\", \"xavp_dst_mode\", 2)\n    ...\n\n",
  "xavp_ctx": "### xavp_ctx (str)\n\nThe name of the XAVP which will hold some attributes specific to\ndispatcher routing context. The XAVP can hold the next fields: cnt - the\nnumber of addresses selected for routing.\n\n*Default value is \u201c\\_dsctx\\_\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"xavp_ctx\", \"_dsctx_\")\n    ...\n\n",
  "xavp_ctx_mode": "### xavp_ctx_mode (int)\n\nControl what fields are added to the XAVP specified by xavp_ctx\nparameter. The cnt field is added if xavp_cnt_mode does not have the bit\n1 set.\n\n*Default value is \u201c0\u201d (add all fields).*\n\n    ...\n    modparam(\"dispatcher\", \"xavp_ctx_mode\", 1)\n    ...\n\n",
  "hash_pvar": "### hash_pvar (str)\n\nString with PVs used for the hashing algorithm 7.\n\n<div class=\"note\">\n\nYou must set this parameter if you want do hashing over custom message\nparts.\n\n</div>\n\n*Default value is \u201cnull\u201d - disabled.*\n\n    ...\n    modparam(\"dispatcher\", \"hash_pvar\", \"$avp(hash)\")\n    ...\n\n    ...\n    modparam(\"dispatcher\", \"hash_pvar\", \"hash the $fU@$ci\")\n    ...\n\n",
  "setid_pvname": "### setid_pvname (str)\n\nThe name of the PV where to store the set ID (group ID) when calling\nds_is_from_list() with no parameter.\n\n*Default value is \u201cnull\u201d - don't set PV.*\n\n    ...\n    modparam(\"dispatcher\", \"setid_pvname\", \"$var(setid)\")\n    ...\n\n",
  "attrs_pvname": "### attrs_pvname (str)\n\nThe name of the PV where to store the attributes of matching address\nwhen calling ds_is_from_list().\n\n*Default value is \u201cnull\u201d - don't set PV.*\n\n    ...\n    modparam(\"dispatcher\", \"attrs_pvname\", \"$var(attrs)\")\n    ...\n\n",
  "ds_ping_method": "### ds_ping_method (string)\n\nWith this method you can define, with which method you want to probe the\ngateways. Pinging gateways feature depends on ds_ping_interval\nparameter.\n\n*Default value is \u201cOPTIONS\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"ds_ping_method\", \"INFO\")\n    ...\n\n",
  "ds_ping_from": "### ds_ping_from (string)\n\nWith this Method you can define the \"From:\"-Line for the request, sent\nto the failed gateways. This method is only available, if compiled with\nthe probing of failed gateways enabled.\n\n*Default value is \u201csip:dispatcher@localhost\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"ds_ping_from\", \"sip:proxy@sip.somehost.com\")\n    ...\n\n",
  "ds_ping_interval": "### ds_ping_interval (int)\n\nWith this parameter you can define the interval for sending a request to\na gateway marked as inactive upon a failed request routing to it. This\nparameter is only used, when the TM-Module is loaded. If set to \u201c0\u201d, the\npinging of inactive gateway is disabled.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"ds_ping_interval\", 30)\n    ...\n\n",
  "ds_probing_threshold": "### ds_probing_threshold (int)\n\nIf you want to set a gateway into inactive mode, there can be a specific\nnumber of failed requests until it will change from \"active\" to\n\"inactive\". It is using the state \"trying\", that allows selection of\ngateway but indicates there was a failure previously with the gateway.\nThe number of attempts can be set with this parameter. This parameter\ncan be modified via ser config framework.\n\n*Default value is \u201c1\u201d (set inactive with first failure).*\n\n    ...\n    modparam(\"dispatcher\", \"ds_probing_threshold\", 10)\n    ...\n\n",
  "ds_inactive_threshold": "### ds_inactive_threshold (int)\n\nIf you want to set a gateway into active mode (after being inactive),\nthere can be a specific number of successful requests until it will\nchange from \"inactive\" to \"active\". The number of attempts can be set\nwith this parameter. This parameter can be modified via ser config\nframework.\n\n*Default value is \u201c1\u201d (set active with first success).*\n\n    ...\n    modparam(\"dispatcher\", \"ds_inactive_threshold\", 10)\n    ...\n\n",
  "ds_ping_reply_codes": "### ds_ping_reply_codes (string)\n\nThis parameter defines the valid response codes, which are accepted as a\nvalid reply to the PING-Method. It is a list separated by colons, where\nyou may define either a single code (e.g. \"code=202\" would accept 202 as\nan additional, valid response) or a class of responses, you want to\naccept (e.g. \"class=2\" would accept everything from 200 to 299 as valid\nresponse). This parameter can be modified via config framework.\n\nPlease note that the response codes the module accepts as valid reply to\nthe PING-Method are not only the ones generated from the remote servers,\nbut also those that are generated locally. E.g.: setting code=408 or\nclass=400 will never set a backend down even if it is, because\ninternally the Kamailio transaction layer generates a 408 in the case of\nno response from the remote server, and this internal code 408 is\naccepted as valid value.\n\n*Default value is \u201c\u201d (only 200 OK is accepted).*\n\n    ...\n    modparam(\"dispatcher\", \"ds_ping_reply_codes\", \"class=2;code=403;code=488;class=3\")\n    ...\n\n",
  "ds_probing_mode": "### ds_probing_mode (int)\n\nControls what gateways are tested to see if they are reachable.\n\n- Value 0: If set to 0, only the gateways with state PROBING are tested.\n  After a gateway is probed, the PROBING state is cleared in this mode.\n  This means that no probing will be executed at all only if flag in\n  config file is set to 8/PROBING (please check destination list file\n  syntaxis for more details), it will probe only one time at startup or\n  after dispatcher reload.\n\n- Value 1: If set to 1, all gateways are tested. If set to 1 and there\n  is a failure of keepalive to an active gateway, then it is set to\n  TRYING state. This means that probing will be executed all the time,\n  but you can skip some servers with flag 4 in destination list file,\n  for example.\n\n- Value 2: if set to 2, only gateways in INACTIVE state with PROBING\n  mode set are tested.\n\n- Value 3: If set to 3, any gateway with state PROBING is continually\n  probed without modifying/removing the PROBING state. This allows\n  selected gateways to be probed continually, regardless of state\n  changes.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"ds_probing_mode\", 1)\n    ...\n\n",
  "ds_ping_latency_stats": "### ds_ping_latency_stats (int)\n\nEnable latency measurement when pinging nodes The estimator can be\ninitialized at startup and reload using the attribute latency.\n\n- If set to 0, disable latency measurement.\n\n- If set to 1, enable latency measurement.\n\n*Default value is \u201c0\u201d.*\n\n    # using the command :\n    kamcmd dispatcher.list\n    ...\n    DEST: {\n        URI: sip:1.2.3.4\n        FLAGS: AX\n        PRIORITY: 9\n        ATTRS: {\n            BODY: latency=24\n        }\n        LATENCY: {\n            AVG: 24.250000 # weighted moving average for the last few weeks\n            STD: 1.035000  # standard deviation of AVG\n            EST: 25.000000 # short term estimate, see parameter: ds_latency_estimator_alpha\n            MAX: 26        # maximum value seen\n            TIMEOUT: 0     # count of ping timeouts\n        }\n    }\n    ...\n\n    ...\n    modparam(\"dispatcher\", \"ds_ping_latency_stats\", 1)\n    ...\n\n",
  "ds_latency_estimator_alpha": "### ds_latency_estimator_alpha (int)\n\nThe value to be used to control the memory of the estimator EWMA\n\"exponential weighted moving average\" or \"the speed at which the older\nsamples are dampened\" a good explanation can be found here :\nhttp://www.itl.nist.gov/div898/handbook/pmc/section3/pmc324.htm Because\nKamailio doesn't support float parameter types, the value in the\nparameter is divided by 1000 and stored as float. For example, if you\nwant to set the alpha to be 0.75, use value 750 here.\n\n*Default value is \u201c900 =\\> 0.9\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"ds_latency_estimator_alpha\", 900)\n    ...\n\n",
  "ds_hash_size": "### ds_hash_size (int)\n\nThe value to be used as power of two to set the number of slots to hash\ntable storing data for call load dispatching (e.g., value 8 will create\na hash table with 256 slots). It must be greater than 0 to enable call\nload dispatching feature (alg 10).\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"ds_hash_size\", 9)\n    ...\n\n",
  "ds_hash_expire": "### ds_hash_expire (int)\n\nExpiration time in seconds to remove the load on a destination if no BYE\nwas received meanwhile.\n\n*Default value is \u201c7200\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"ds_hash_expire\", 3600)\n    ...\n\n",
  "ds_hash_initexpire": "### ds_hash_initexpire (int)\n\nExpiration time in seconds to remove the load on a destination if no 200\nfor INVITE was received meanwhile and state updated with\nds_load_update().\n\n*Default value is \u201c7200\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"ds_hash_initexpire\", 60)\n    ...\n\n",
  "ds_hash_check_interval": "### ds_hash_check_interval (int)\n\nTime interval in seconds to scan internal hash table with call load\ndispatching data for expired items.\n\n*Default value is \u201c30\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"ds_hash_check_interval\", 60)\n    ...\n\n",
  "outbound_proxy": "### outbound_proxy (str)\n\nSIP URI of outbound proxy to be used when sending pings.\n\n*By default no outbound proxy is defined.*\n\n    ...\n    modparam(\"dispatcher\", \"outbound_proxy\", \"sip:outbound.example.com\")\n    ...\n\n",
  "ds_default_socket": "### ds_default_socket (str)\n\nDefault socket to be used for sending pings and dispatching requests\nwhen a gateway has no send socket configured.\n\n*By default no default socket is defined, the first configuration script\n*listen* directive is used.*\n\nIf parameter \"ds_default_sockname\" is set, then this parameter is\nignored.\n\n    ...\n    modparam(\"dispatcher\", \"ds_default_socket\", \"udp:192.168.0.125:5060\")\n    ...\n\n",
  "ds_default_sockname": "### ds_default_sockname (str)\n\nDefault socket name to be used for sending pings and dispatching\nrequests when a gateway has no send socket configured.\n\n*By default no default socket is defined, the first configuration script\n*listen* directive is used.*\n\nThis parameter is used even if \"ds_default_socket\" parameter is set\n(this parameter has higher priority).\n\n    ...\n     listen=udp:1.2.3.4:5060 name \"sock1\"\n    ...\n    modparam(\"dispatcher\", \"ds_default_sockname\", \"sock1\")\n    ...\n\n",
  "ds_timer_mode": "### ds_timer_mode (int)\n\nSpecify the timer process to be used by the module for keepalives and\nactive dialogs tracking.\n\nIt can be set to:\n\n- 0 - use main timer process.\n\n- 1 - use secondary timer process.\n\nOn a server with a lot of traffic, using secondary timer can help with\nperformances, because the main timer can be overloaded by taking care of\ntransactions retransmissions and expirations of items in memory.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"ds_timer_mode\", 1)\n    ...\n\n",
  "event_callback": "### event_callback (str)\n\nThe name of the function in the kemi configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[...\\] blocks.\n\nThe function receives a string parameter with the name of the event, the\nvalues are: 'dispatcher:dst-down', 'dispatcher:dst-up'.\n\n*Default value is 'empty' (no function is executed for events).*\n\n    ...\n    modparam(\"dispatcher\", \"event_callback\", \"ksr_dispatcher_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_dispatcher_event(evname)\n        KSR.info(\"===== dispatcher module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n    ...\n\n",
  "ds_attrs_none": "### ds_attrs_none (int)\n\nIf set to 1, \"none=yes\" is set in the attrs for those records that have\nno attrs value, to ensure that corresponding XAVP fields for records do\nnot get mixed up.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"ds_attrs_none\", 1)\n    ...\n\n",
  "ds_db_extra_attrs": "### ds_db_extra_attrs (str)\n\nSet a list of column names to be loaded from database dispatcher table\nand be concatenated to 'attrs' field. The format is:\n'aname1=cname1;aname2=cname2;...;anameN=cnameN'.\n\nThe 'anameX' is the attribute name and 'cnameX' is column name. The\nadditional columns must be added to database dispatcher table and their\ntype must be VARCHAR (string).\n\n*Default value is \u201cempty\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"ds_db_extra_attrs\", \"socket=socket;pref=prefix\")\n    ...\n\n",
  "ds_load_mode": "### ds_load_mode (int)\n\nIf set to 1, the module throws error when failing to add a destination\naddress (e.g., invalid URI). If set to 0, it skips the failing address\nand continues with the next ones.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"ds_load_mode\", 1)\n    ...\n\n",
  "reload_delta": "### reload_delta (int)\n\nThe number of seconds that have to be waited before executing a new\nreload of dispatcher records. By default there is a rate limiting of\nmaximum one reload in five seconds.\n\nIf set to 0, no rate limit is configured. Note carefully: use this\nconfiguration only in tests environments because executing many RPC\nreload commands at the same time can cause unexpected behavior.\n\n*Default value is \u201c5\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"reload_delta\", 1)\n    ...\n            \n\n",
  "ds_dns_mode": "### ds_dns_mode (int)\n\nSpecify the how DNS resolving is done for destination addresses.\n\nIt is a bitwise flag and can be set to one or the sum of:\n\n- 1 - do it at startup and reload (previous behaviour).\n\n- 2 - do it always when the address is matched with ds_is_from_list().\n\n- 4 - do it startup/reload and refresh on the timer interval specified\n  by ds_dns_interval.\n\n- 8 - do SRV (and NAPTR if enabled in core) query instead of A/AAAA\n  lookup. NAPTR is done if protocol and port are not set. SRV is done if\n  port is not set.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"ds_dns_mode\", 2)\n    ...\n\n",
  "ds_dns_interval": "### ds_dns_interval (int)\n\nThe interval in seconds to periodically refresh the DNS queries for\ndestination addresses if ds_dns_mode has value 4 set.\n\n*Default value is \u201c600\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"ds_interval_mode\", 1800)\n    ...\n\n",
  "ds_dns_ttl": "### ds_dns_ttl (int)\n\nThe interval in seconds to set TTL for DNS results received for queries\ndones inside this module. If 0, this TTL is not set, result and core\nvalues are used.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dispatcher\", \"ds_interval_mode\", 7200)\n    ...\n\n"
 },
 "async": {
  "workers": "### workers (int)\n\nNumber of worker processes to be started to handle the asynchronous\ntasks for async_route() and async_sleep().\n\n*Default value is 1.*\n\n    ...\n    modparam(\"async\", \"workers\", 2)\n    ...\n\n",
  "ms_timer": "### ms_timer (int)\n\nEnables millisecond timer for async_ms_sleep() and async_ms_route()\nfunctions. The integer value is the timer resolution in milliseconds. A\nsmaller timer resolution will generate a higher load on the system. If\nyou set ms_timer to 1 you will get a timer with 1 millisecond\nresolution, a setting of 20 provides a resolution of 20ms.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"async\", \"ms_timer\", 10)\n    ...\n\n",
  "return": "### return (int)\n\nThe value to be returned by async functions on success. It does not\napply for async data functions, only for those that suspend the SIP\ntransaction.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"async\", \"return\", 1)\n    ...\n\n"
 },
 "pua_bla": {
  "default_domain": "### default_domain(str)\n\nThe default domain for the registered users to be used when constructing\nthe uri for the registrar callback.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"pua_bla\", \"default_domain\", \"kamailio.org\")\n    ...\n\n",
  "header_name": "### header_name(str)\n\nThe name of the header to be added to Publish requests. It will contain\nthe uri of the user agent that sent the Notify that is transformed into\nPublish. It stops sending a Notification with the same information to\nthe sender.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"pua_bla\", \"header_name\", \"Sender\")\n    ...\n\n",
  "outbound_proxy": "### outbound_proxy(str)\n\nThe outbound_proxy uri to be used when sending Subscribe requests.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"pua_bla\", \"outbound_proxy\", \"sip:proxy@kamailio.org\")\n    ...\n\n",
  "server_address": "### server_address(str)\n\nThe IP address of the server.\n\n    ...\n    modparam(\"pua_bla\", \"server_address\", \"sip:bla@160.34.23.12\")\n    ...\n\n"
 },
 "xhttp_prom": {
  "xhttp_prom_buf_size": "### xhttp_prom_buf_size (integer)\n\nSpecifies the maximum length of the buffer (in bytes) used to write the\nmetric reply information in order to build the HTML response.\n\n*Default value is 0 (auto set to 1/3 of the size of the configured pkg\nmem).*\n\n    ...\n    modparam(\"xhttp_prom\", \"xhttp_prom_buf_size\", 1024)\n    ...\n            \n\n",
  "xhttp_prom_timeout": "### xhttp_prom_timeout (integer)\n\nSpecifies a timeout in minutes. A metric not used during this timeout is\nautomatically deleted. Listing metrics does not count as using them.\n\n*If set to 0 timeout is disabled.* Negative values are not allowed.\n\n*Default value is 60 minutes.*\n\n    ...\n    # Set timeout to 10 hours\n    modparam(\"xhttp_prom\", \"xhttp_prom_timeout\", 600)\n    ...\n            \n\n",
  "xhttp_prom_stats": "### xhttp_prom_stats (str)\n\nSpecifies which internal statistics from Kamailio to show. Possible\nvalues:\n\n- *all* - Show whole Kamailio statistics\n\n- *group_name:* - Show all statistics for a group\n\n- *statistic_name* - Show a specific statistic. It automatically finds\n  the group.\n\n*Default value is \"\", meaning do not display any Kamailio statistics.*\n\n*IMPORTANT: Kamailio internal statistics are parsed to convert - into\n\\_, so they accomplish with Prometheus guidelines for metric names.\n<https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels>*\nUser generated statistics and label names are not parsed.\n\n    ...\n    # show all kamailio statistics.\n    modparam(\"xhttp_prom\", \"xhttp_prom_stats\", \"all\")\n\n    # show statistics for sl group.\n    modparam(\"xhttp_prom\", \"xhttp_prom_stats\", \"sl:\")\n\n    # Show statistic for 200_replies in sl group.\n    modparam(\"xhttp_prom\", \"xhttp_prom_stats\", \"200_replies\")\n\n    # Do not display internal Kamailio statistics. This is the default option.\n    modparam(\"xhttp_prom\", \"xhttp_prom_stats\", \"\")\n    ...\n            \n\n",
  "xhttp_prom_beginning": "### xhttp_prom_beginning (str)\n\nSpecifies beginning of string the metrics are build with.\n\n*It defaults to \"kamailio\\_\"*, so if not specified every metric will\nstart with \"kamailio\\_\".\n\nVoid string \"\" is also allowed, meaning no prefix string for every\nmetric name.\n\n    ...\n    # All metrics will start with \"my_metric_\".\n    modparam(\"xhttp_prom\", \"xhttp_prom_beginning\", \"my_metric_\")\n\n    # No string at the beginning.\n    modparam(\"xhttp_prom\", \"xhttp_prom_beginning\", \"\");\n    ...\n            \n\n",
  "prom_counter": "### prom_counter (str)\n\nCreate a counter metric.\n\nThis function declares a counter but the actual counter is only created\nwhen using it (by adding to or resetting it)\n\nIt takes a list of attribute=value separated by semicolon, the\nattributes can be name and label.\n\n- *name* - name of the counter. This attribute is mandatory. It is used\n  to generate the metric name. Each name is unique, no metric shall\n  repeat a name.\n\n- *label* - names of labels in the counter. Optional. Only one label\n  parameter at most allowed in counters. Each label name is separated by\n  *:* without spaces. At most only three label names allowed in each\n  label parameter.\n\n      # Create two labels called method and handler\n      label = method:handler\n      This would generate  {method=\"whatever\", handler=\"whatever2\"} when building\n      the metric.\n                  \n\n<!-- -->\n\n    ...\n\n    # Create cnt_first counter with no labels.\n    modparam(\"xhttp_prom\", \"prom_counter\", \"name=cnt_first;\");\n\n    # Create cnt_second counter with no labels.\n    modparam(\"xhttp_prom\", \"prom_counter\", \"name=cnt_second;\");\n\n\n    # Create cnt_third counter with label method\n    modparam(\"xhttp_prom\", \"prom_counter\", \"name=cnt_third; label=method\");\n\n    These lines declare the counter but the actual metric will be created when\n    using it by prom_counter_inc or prom_counter_reset functions.\n\n    ...\n            \n\n",
  "prom_gauge": "### prom_gauge (str)\n\nCreate a gauge metric.\n\nThis function declares the gauge but the actual gauge is only created\nwhen using it (by setting or resetting it)\n\nIt takes a list of attribute=value separated by semicolon, the\nattributes can be name and value.\n\n- *name* - name of the gauge. This attribute is mandatory. It is used to\n  generate the metric name. Each name is unique, no metric shall repeat\n  a name.\n\n- *label* - names of labels in the gauge. Optional. Only one label\n  parameter at most allowed in gauges. Each label name is separated by\n  *:* without spaces. At most only three label names allowed inside each\n  label parameter.\n\n      # Create two labels called method and handler\n      label = method:handler\n      This would generate  {method=\"whatever\", handler=\"whatever2\"} when building\n      the metric.\n                  \n\n<!-- -->\n\n    ...\n\n    # Create gg_first gauge with no labels\n    modparam(\"xhttp_prom\", \"prom_gauge\", \"name=gg_first;\");\n\n    # Create gg_second gauge with no labels\n    modparam(\"xhttp_prom\", \"prom_gauge\", \"name=gg_second;\");\n\n\n    # Create gg_third gauge with two labels method and handler:\n    modparam(\"xhttp_prom\", \"prom_gauge\", \"name=gg_third; label=method:handler;\");\n\n    ...\n            \n\n",
  "prom_histogram": "### prom_histogram (str)\n\nCreate a histogram metric.\n\nThis function declares a histogram but the actual histogram is only\ncreated when observing it.\n\nIt takes a list of attribute=value separated by semicolon, the\nattributes can be name, label and buckets.\n\n- *name* - name of the histogram. This attribute is mandatory. It is\n  used to generate the metric name. Each name is unique, no metric shall\n  repeat a name.\n\n- *label* - names of labels in the histogram. Optional. Only one label\n  parameter at most allowed in histograms. Each label name is separated\n  by *:* without spaces. At most only three label names allowed in each\n  label parameter.\n\n      # Create two labels called method and handler\n      label = method:handler\n      This would generate  {method=\"whatever\", handler=\"whatever2\"} when building\n      the metric.\n                  \n\n- *buckets* - specifies upper bounds for buckets in the histogram. This\n  attribute is optional.\n\n  Bucket values are separated by \":\". Each value has to be a number.\n\n  \"+Inf\" upper bucket is always automatically included.\n\n  At least one bucket value is needed (other than +Inf).\n\n  Every bucket value has to increase in the list.\n\n  If no buckets specified, default bucket list is set to these values:\n\n  \\[0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10\\]\n\n<!-- -->\n\n    ...\n\n    # Create my_histo histogram with no labels and default buckets.\n    modparam(\"xhttp_prom\", \"prom_histogram\", \"name=my_histo;\");\n\n    # Create second_histo histogram with one label and default buckets.\n    # modparam(\"xhttp_prom\", \"prom_histogram\", \"name=second_histo; label=my_lbl\");\n\n    # Create a histogram with no labels and buckets 3.1, 5, 6.5\n    modparam(\"xhttp_prom\", \"prom_histogram\", \"name=histo_third; buckets=3.1:5:6.5\");\n\n    # Create a histogram with a label and buckets 3.1, 5, 6.5\n    modparam(\"xhttp_prom\", \"prom_histogram\", \"name=histo_fourth; label=lbl; buckets=3.1:5:6.5\");\n\n    These lines declare the histogram but the actual metric will be created when\n    using it by prom_histogram_observe function.\n\n    ...\n            \n\n"
 },
 "ims_isc": {
  "my_uri": "### my_uri (string)\n\nThis is the SIP URI of server on which the SCSCF is hosted.\n\n*Default value is 'sip:scscf.ims.smilecoms.com:6060'.*\n\n    ...\n    modparam(\"ims_isc\", \"my_uri\", \"sip:scscf.ims.smilecoms.com:6060\")\n    ...\n            \n\n",
  "expires_grace": "### expires_grace (integer)\n\nThis is the expires value to add to the expires during 3rd party\nregistration to prevent expiration in Application Server.\n\n*Default value is 120.*\n\n    ...\n    modparam(\"ims_isc\", \"expires_grace\", 120)\n    ...\n            \n\n",
  "isc_fr_timeout": "### isc_fr_timeout (integer)\n\nThis is the time in ms that we will wait for an AS response before we\nconsider it dead. It has to be lower than the SIP transaction timeout to\nprevent downstream timeouts. But not too small as ASs tend to take a\nlong time to respond.\n\n*Default value is 5000.*\n\n    ...\n    modparam(\"ims_isc\", \"isc_fr_timeout\", 5000)\n    ...\n            \n\n",
  "isc_fr_inv_timeout": "### isc_fr_inv_timeout (integer)\n\nThis is the time in ms that we will wait for an AS INVITE response\nbefore we consider it dead. It has to be lower than the SIP transaction\ntimeout to prevent downstream timeouts. But not too small as ASs tend to\ntake a long time to respond.\n\n*Default value is 20000*\n\n    ...\n    modparam(\"ims_isc\", \"isc_fr_inv_timeout\", 20000)\n    ...\n            \n\n",
  "add_p_served_user": "### add_p_served_user (integer)\n\nThis boolean indicates if a P-Served-User should be added on the ISC\ninterface, according to RFC 5502.\n\n*Default value is 0 (false)*\n\n    ...\n    modparam(\"ims_isc\", \"add_p_served_user\", 1)\n    # p-served user header will be enabled\n    ...\n            \n\n"
 },
 "erlang": {
  "no_cnodes": "### no_cnodes (int)\n\nNumber of erlang C node processes to be started to handle the\ncommunication tasks. A C node is a C program written to act as a hidden\nnode in a distributed Erlang system.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"erlang\", \"no_cnodes\", 2)\n    ...\n                    \n\n",
  "cnode_alivename": "### cnode_alivename (str)\n\n*alivename* is the registered name of the Kamailio process.\n\n*Note,* if the `no_cnodes` is greater than 1, then *alivename* of\nKamailio process will be suffixed with number.\n\n    ...\n    modparam(\"erlang\", \"cnode_alivename\", \"proxy\")\n    ...\n                    \n\n",
  "cnode_host": "### cnode_host (str)\n\nC node *host* is the name of the machine we're running on. If long names\nare to be used, it should be fully qualified.\n\n    ...\n    modparam(\"erlang\", \"cnode_host\", \"kamailio.lan\")\n    ...\n                    \n\n",
  "erlang_nodename": "### erlang_nodename (str)\n\nThe format of the node name is a *name@host* where name is the name\ngiven by the user and host is the full host name if long names are used,\nor the first part of the host name if short names are used.\n\n    ...\n    modparam(\"erlang\", \"erlang_nodename\", \"node1@erlang.lan\")\n    ...\n                    \n\n",
  "cookie": "### cookie (str)\n\nEach node has its own magic cookie. When a nodes tries to connect to\nanother node, the magic cookies are compared If they do not match, the\nconnected node rejects the connection.\n\n    ...\n    modparam(\"erlang\", \"cookie\", \"secretcookie\")\n    ...\n                    \n\n",
  "trace_level": "### trace_level (int)\n\nUsed to set tracing on the distribution. The parameter is different\nverbosity level. A higher level means more information. Useful in\ndevelopment, but in production should be disabled.\n\nThe different tracelevels has the following messages:\n\nDefault value is 0, no verbose is set.\n\nTo see trace log on stdout, Kamailio must be started with\n\n-E\n\noption.\n\n    ...\n    modparam(\"erlang\", \"trace_level\", 5)\n    ...\n                    \n\n",
  "rpc_reply_with_struct": "### rpc_reply_with_struct (int)\n\nPrepend Erlang atom struct in RPC Kamailio reply where RPC struct is\ngenerated. Some libraries for converting erlang term in JSON require\natom struct as first element in tuple to convert list of properties into\njavscript object.\n\nDefault value is 0 (disabled).\n\n"
 },
 "secsipid_proc": {},
 "sipjson": {},
 "app_ruby_proc": {},
 "app_mono": {
  "load": "### load (string)\n\nSet the path to the Mono assembly to be loaded at startup. You can use\nmono_run(param) to execute the assembly at runtime.\n\n*Default value is \u201cnull\u201d.*\n\n    ...\n    modparam(\"app_mono\", \"load\", \"/usr/local/etc/kamailio/mono/myscript.exe\")\n    ...\n\n"
 },
 "app_lua_sr": {
  "register": "### register (string)\n\nNOTE: Since Kamailio v5.0, KEMI exports are available in Lua script\nunder KSR module exposed by 'app_lua'. These exports cover most of the\nmodules, a lot more than those listed next. The KEMI exports are the\nrecommended to be used, the old 'sr' module might be obsoleted soon. To\nread more about KEMI exports and available KSR submodules, see:\n\n- <https://kamailio.org/docs/tutorials/devel/kamailio-kemi-framework/>\n\nUse this parameter to register optional Kamailio submodules to Lua.\nAvailable submodules are:\n\n- *alias_db* - register functions from alias_db module under\n  'sr.alias_db'.\n\n- *auth* - register functions from auth module under 'sr.auth'.\n\n- *auth_db* - register functions from auth_db module under 'sr.auth_db'.\n\n- *dispatcher* - register functions from dispatcher module under\n  'sr.dispatcher'.\n\n- *maxfwd* - register functions from maxfwd module under 'sr.maxfwd'.\n\n- *msilo* - register functions from msilo module under 'sr.msilo'.\n\n- *presence* - register functions from presence module under\n  'sr.presence'.\n\n- *presence_xml* - register functions from presence_xml module under\n  'sr.presence_xml'.\n\n- *pua_usrloc* - register functions from pua_usrloc module under\n  'sr.pua_usrloc'.\n\n- *registrar* - register functions from registrar module under\n  'sr.registrar'.\n\n- *rls* - register functions from rls module under 'sr.rls'.\n\n- *rr* - register functions from rr module under 'sr.rr'.\n\n- *sanity* - register functions from sanity module under 'sr.sanity'.\n\n- *sdpops* - register functions from sdpops module under 'sr.sdpops'.\n\n- *siputils* - register functions from siputils module under\n  'sr.siputils'.\n\n- *sl* - register functions from sl module under 'sr.sl'.\n\n- *sqlops* - register functions from sqlops module under 'sr.sqlops'.\n\n- *textops* - register functions from textops module under 'sr.textops'.\n\n- *tm* - register functions from tm module under 'sr.tm'.\n\n- *xhttp* - register functions from xhttp module under 'sr.xhttp'.\n\nNote that 'sr', 'sr.hdr' and 'sr.pv' modules are always registered to\nLua.\n\n*Default value is \u201cnull\u201d.*\n\n    ...\n    modparam(\"app_lua_sr\", \"register\", \"sl\")\n    ...\n"
 },
 "rr": {
  "enable_full_lr": "### enable_full_lr (integer)\n\nIf set to 1 then \u201c;lr=on\u201d instead of just \u201c;lr\u201d will be used. This is to\novercome problems with broken UAs which strip \u201c;lr\u201d parameter when\ngenerating Route header fields from Record-Route (\u201c;lr=on\u201d seems to\nhelp).\n\n*Default value is 0 (no).*\n\n    ...\n    modparam(\"rr\", \"enable_full_lr\", 1)\n    ...\n\n",
  "append_fromtag": "### append_fromtag (integer)\n\nIf turned on, request's from-tag is appended to record-route; that's\nuseful for understanding whether subsequent requests (such as BYE) come\nfrom caller (route's from-tag==BYE's from-tag) or callee (route's\nfrom-tag==BYE's to-tag)\n\n*Default value is 1 (yes).*\n\n    ...\n    modparam(\"rr\", \"append_fromtag\", 0)\n    ...\n\n",
  "enable_double_rr": "### enable_double_rr (integer)\n\nThere are some situations when the server needs to insert two\nRecord-Route header fields instead of one. For example when using two\ndisconnected networks or doing cross-protocol forwarding from UDP-\\>TCP.\nThis parameter enables inserting of 2 Record-Routes. The server will\nlater remove both of them.\n\nDouble record-routing does not occur when outbound is used for a\nrequest.\n\n*Default value is 1 (yes).*\n\n    ...\n    modparam(\"rr\", \"enable_double_rr\", 0)\n    ...\n\nSome useragents (e. g. Linphone) incorrectly use UDP transport for\nsubsequent requests in dialog, despite being configured to use another\nSIP transport protocol. This can be worked around by setting\nRecord-Route header with explicit transport attribute. But\nenable_double_rr enabled in default mode omits transport attribute from\nbeing added to header if it detects that both sender and receiver use\nsame protocol (e. g. TCP or TLS), and this results in UDP being used by\nsuch broken clients. Set enable_double_rr to value 2 to always have two\nRR headers with transport attributes explicitly set.\n\n    ...\n    modparam(\"rr\", \"enable_double_rr\", 2)\n    ...\n\n",
  "add_username": "### add_username (integer)\n\nIf set to a non 0 value (which means yes), the username part will be\nalso added in the Record-Route URI.\n\nThis option cannot be set when the \u201coutbound\u201d module is loaded before\nthis module as outbound uses the username part of Record-Route URIs to\nstore flow-tokens.\n\n*Default value is 0 (no).*\n\n    ...\n    modparam(\"rr\", \"add_username\", 1)\n    ...\n\n",
  "enable_socket_mismatch_warning": "### enable_socket_mismatch_warning (integer)\n\nWhen a preset record-route header is forced in Kamailio config and the\nhost from the record-route header is not the same as the host server, a\nwarning will be printed out in the logs. The\n'enable_socket_mismatch_warning' parameter enables or disables the\nwarning. When Kamailio is behind a NATed firewall, we don't want this\nwarning to be printed for every bridged call.\n\n*Default value is 1 (yes).*\n\n    ...\n    modparam(\"rr\", \"enable_socket_mismatch_warning\", 0)\n    ...\n\n",
  "custom_user_avp": "### custom_user_avp (avp string)\n\nWhen add_username is enabled, a call to record_route will add the\nusername of the RequestURI to the Record-Route URI. This parameter\nallows you to setup an AVP with which you can customise the username to\nbe added in the Record-Route URI.\n\n*Default value: if not set, the std add_username behaviour is used -\ni.e. Request URI username.*\n\n    ...\n    modparam(\"rr\", \"custom_user_avp\", \"$avp(RR_CUSTOMER_USER_AVP)\")\n\n    #usage in cfg file\n    $avp(RR_CUSTOM_USER_AVP)=\"mo\";\n    record_route();\n    ...\n\n",
  "force_send_socket": "### force_send_socket (int)\n\nIf set to 1, local socket is forced even for single Record-Route,\notherwise is done on double Record-Route (should that be enabled).\n\nWhen use of \u201coutbound\u201d is enabled, the socket is not forced.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"rr\", \"force_send_socket\", 1)\n    ...\n\n",
  "ignore_sips": "### ignore_sips (int)\n\nIf set to 1, the Record-Route header are build with 'sip' schema always,\nignoring the presence of 'sips' schema in request URI.\n\n*Default value is 0 (use 'sips' if present in R-URI).*\n\n    ...\n    modparam(\"rr\", \"ignore_sips\", 1)\n    ...\n\n",
  "sockname_mode": "### sockname_mode (int)\n\nIf set to 1, the Record-Route URI is built to contain socket name in\n'sn' parameter and then it is used to lookup the local socket for Route\nheader processing.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"rr\", \"sockname_mode\", 1)\n    ...\n\n"
 },
 "app_python": {
  "load": "### load (string)\n\nThe path to the file with Python code to be executed from configuration\nfile.\n\n*Default value is \u201c/usr/local/etc/kamailio/handler.py\u201d.*\n\n    ...\n    modparam(\"app_python\", \"load\", \"/usr/local/etc/kamailio/myscript.py\")\n    ...\n\n",
  "script_name": "### script_name (string)\n\nThis is same as \"load\" parameter, kept for backward compatibility with\nthe older versions of the module.\n\n",
  "mod_init_function": "### mod_init_function (string)\n\nThe Python function to be executed by this module when it is initialized\nby Kamailio.\n\n*Default value is \u201cmod_init\u201d.*\n\n    ...\n    modparam(\"app_python\", \"mod_init_function\", \"my_mod_init\")\n    ...\n\n",
  "child_init_method": "### child_init_method (string)\n\nThe Python function to be executed by this module when a new worker\nprocess (child) is initialized by Kamailio.\n\n*Default value is \u201cchild_init\u201d.*\n\n    ...\n    modparam(\"app_python\", \"child_init_method\", \"my_child_init\")\n    ...\n\n"
 },
 "kex": {},
 "geoip": {
  "path": "### path (string)\n\nPath to the GeoIP database file.\n\n*Default value is \u201cnull\u201d.*\n\n    ...\n    modparam(\"geoip\", \"path\", \"/usr/local/share/GeoLiteCity.dat\")\n    ...\n\n"
 },
 "pdt": {
  "db_url": "### db_url (string)\n\nURL of the database table to be used.\n\n*Default value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"pdt\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "db_table": "### db_table (string)\n\nTable name.\n\n*Default value is \u201cpdt\u201d.*\n\n    ...\n    modparam(\"pdt\", \"db_table\", \"pdt\")\n    ...\n\n",
  "sdomain_column": "### sdomain_column (string)\n\nName of 'sdomain' column.\n\n*Default value is \u201csdomain\u201d.*\n\n    ...\n    modparam(\"pdt\", \"domain_column\", \"source_domain\")\n    ...\n\n",
  "prefix_column": "### prefix_column (string)\n\nName of 'prefix' column.\n\n*Default value is \u201cprefix\u201d.*\n\n    ...\n    modparam(\"pdt\", \"prefix_column\", \"prefix\")\n    ...\n\n",
  "domain_column": "### domain_column (string)\n\nName of 'domain' column.\n\n*Default value is \u201cdomain\u201d.*\n\n    ...\n    modparam(\"pdt\", \"domain_column\", \"hostname\")\n    ...\n\n",
  "prefix": "### prefix (string)\n\nDefault leading prefix who denotes what URI needs to be translated - if\nit is NULL the module will not check the R-URI against it and the PDT\nprefix is considered starting from the first digit. Otherwise, the\nmodule will check first if the R-URI starts with it and will skip it to\nlook up the domain.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"pdt\", \"prefix\", \"00\")\n    ...\n\n",
  "fetch_rows": "### fetch_rows (integer)\n\nNumber of rows to be loaded in one step from database.\n\n*Default value is 1000.*\n\n    ...\n    modparam(\"pdt\", \"fetch_rows\", 4000)\n    ...\n\n",
  "char_list": "### char_list (string)\n\nThe list with characters allowed in prefix.\n\n*Default value is \u201c0123456789\u201d.*\n\n    ...\n    modparam(\"pdt\", \"char_list\", \"0123456789*+\")\n    ...\n\n",
  "check_domain": "### check_domain (integer)\n\nModule will check if destination domain is duplicated for same source\ndomain (1 - check; 0 - don't check).\n\n*Default value is 1.*\n\n    ...\n    modparam(\"pdt\", \"check_domain\", 0)\n    ...\n\n"
 },
 "mohqueue": {
  "db_url": "### db_url (str)\n\nThe URL to connect to the database for the mohqueue tables.\n\n*Default is the same value used by Kamailio.*\n\n    ...\n    modparam (\"mohqueue\", \"db_url\", \"mysql://kamailio:kamailiorw@localhost/kamailio\")\n    ...\n            \n\n",
  "db_ctable": "### db_qtable and db_ctable (str)\n\n`db_qtable` is the name of the table that defines the queues and\n`db_ctable` is the table that maintains the call status.\n\n*Default is \"MOHQUEUES\" for `db_qtable` and \"MOHQCALLS\" for\n`db_ctable`.*\n\n    ...\n    modparam (\"mohqueue\", \"db_qtable\", \"mqueues\")\n    modparam (\"mohqueue\", \"db_ctable\", \"mcalls\")\n    ...\n            \n\n",
  "mohdir": "### mohdir (str)\n\nPath to the directory where the audio files are stored. Audio files are\nusually relative to this directory although the value can be overridden\nby a directory specified in the queues table.\n\n*Default is None. If not set by the module it must be defined in the\nqueues table.*\n\n    ...\n    modparam (\"mohqueue\", \"mohdir\", \"/var/kamailio/MOH\")\n    ...\n            \n\n",
  "moh_maxcalls": "### moh_maxcalls (integer)\n\nDefines the maximum number of calls that can be placed in queue. It is\nthe sum of all calls in all queues. It must be in the range of 1 to\n5000. *NOTE:* it may be limited by the processing power of the server or\nthe number of available rtpproxy ports.\n\n*Default value is 50.*\n\n    ...\n    modparam (\"mohqueue\", \"moh_maxcalls\", 200)\n    ...\n            \n\n"
 },
 "utils": {
  "forward_active": "### forward_active (int)\n\nDefines if the forwarding callback should be installed.\n\n*Default value is \u201c0\u201d - disabled.*\n\n                        ...\n                        modparam(\"utils\", \"forward_active\", 1)\n                        ...\n                    \n\n",
  "pres_db_url": "### pres_db_url (string)\n\nDefines presence server database URL. If not given, the xcap_auth_status\nfunction is disabled.\n\n*There is no default value.*\n\n    ...\n    modparam(\"utils\", \"pres_db_url\", \"mysql://foo:secret@localhost/pres\")\n    ...\n                    \n\n",
  "xcap_table": "### xcap_table (string)\n\nDefines the name of the xcap table in the presence server database. See\nthe xcap_server module documentation for more information.\n\n*Default value is \u201cxcap\u201d.*\n\n    ...\n    modparam(\"utils\", \"xcap_table\", \"pres_xcap\")\n    ...\n                    \n\n"
 },
 "rabbitmq": {
  "url": "### url (string)\n\nThe amqp connection url.\n\n*Default value is \u201camqp://guest:guest@localhost:5672/%2F\u201d.*\n\n    ...\n    modparam(\"rabbitmq\", \"url\", \"amqp://kamailio:kamailio@localhost:5672/%2Fkamailio\")\n    ...\n                    \n\n",
  "timeout_sec": "### timeout_sec (int)\n\nThe timeout in seconds. The timeout_sec + timeout_usec combination gives\nthe time to wait for an amqp reply, when rabbitmq_publish_consume() is\nused.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"rabbitmq\", \"timeout_sec\", 1)\n    ...\n                    \n\n",
  "timeout_usec": "### timeout_usec (int)\n\nThe timeout in micro seconds. The timeout_sec + timeout_usec combination\ngives the time to wait for an amqp reply, when\nrabbitmq_publish_consume() is used.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"rabbitmq\", \"timeout_usec\", 0)\n    ...\n                    \n\n",
  "direct_reply_to": "### direct_reply_to (int)\n\nSetting this parameter to 1, enables rabbitmq direct reply-to feature.\nMore info about this, can be found at\nhttps://www.rabbitmq.com/direct-reply-to.html.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"rabbitmq\", \"direct_reply_to\", 1)\n    ...\n                    \n\n"
 },
 "xcap_client": {
  "db_url": "### db_url(str)\n\nThe database url.\n\n*Default value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"xcap_client\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "xcap_table": "### xcap_table(str)\n\nThe name of the db table where XCAP documents are stored.\n\n*Default value is \u201cxcap\u201d.*\n\n    ...\n    modparam(\"xcap_client\", \"xcap_table\", \"xcaps\")\n    ...\n\n",
  "periodical_query": "### periodical_query(int)\n\nA flag to disable periodical query as an update method for the documents\nthe module is responsible for. It could be disabled when the XCAP server\nis capable to send the exported management command when a change occurs\nor when another module in Kamailio handles updates.\n\nTo disable it set this parameter to 0.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"xcap_client\", \"periodical_query\", 0)\n    ...\n\n",
  "query_period": "### query_period(int)\n\nShould be set if periodical query is not disabled. Represents the time\ninterval the XCAP servers should be queried for an update.\n\nTo disable it set this parameter to 0.\n\n*Default value is \u201c100\u201d.*\n\n    ...\n    modparam(\"xcap_client\", \"query_period\", 50)\n    ...\n\n"
 },
 "app_python3": {
  "load": "### load (string)\n\nThe path to the file with Python code to be executed from configuration\nfile.\n\n*Default value is \u201c/usr/local/etc/kamailio/handler.py\u201d.*\n\n    ...\n    modparam(\"app_python3\", \"load\", \"/usr/local/etc/kamailio/myscript.py\")\n    ...\n\n",
  "script_name": "### script_name (string)\n\nThis is same as \"load\" parameter, kept for backward compatibility with\nthe older versions of the module.\n\n",
  "mod_init_function": "### mod_init_function (string)\n\nThe Python function to be executed by this module when it is initialized\nby Kamailio.\n\n*Default value is \u201cmod_init\u201d.*\n\n    ...\n    modparam(\"app_python3\", \"mod_init_function\", \"my_mod_init\")\n    ...\n\n",
  "child_init_method": "### child_init_method (string)\n\nThe Python function to be executed by this module when a new worker\nprocess (child) is initialized by Kamailio.\n\n*Default value is \u201cchild_init\u201d.*\n\n    ...\n    modparam(\"app_python3\", \"child_init_method\", \"my_child_init\")\n    ...\n\n"
 },
 "corex": {
  "alias_subdomains": "### alias_subdomains (string)\n\nRegister a domain and all its sub-domains to match the \u201cmyself\u201d\ncondition. It can be set many times. Its full format is:\n'proto:domain:port', allowing to set restrictions on protocol and port\nas well. Protocol and port are optional.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"corex\", \"alias_subdomains\", \"kamailio.org\")\n    modparam(\"corex\", \"alias_subdomains\", \"udp:sip-router.org:5060\")\n    ...\n\n",
  "dns_cache": "### dns_cache (string)\n\nAdd A or AAAA records to internal DNS cache at startup. It can be set\nmany times to add more than one record.\n\nThe format of the value follows the SIP params style:\n\"attr1=val1;attr2=val2;...\". The attributes can be:\n\n- *type* - it can be \"A\" (IPv4), \"AAAA\" (IPv6) or \"SRV\"\n\n- *name* - the domain name\n\n- *addr* - the IP address\n\n- *ttl* - TTL value\n\n- *priority* - priority value for SRV record\n\n- *weight* - weight value for SRV record\n\n- *port* - port value for SRV record\n\n- *flags* - can be: 1 - the domain is unresolvable (like blocklisted);\n  2 - the record is permanent (never times out, never deleted, never\n  overwritten)\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"corex\", \"dns_cache\", \"type=A;name=kamailio.org;addr=193.22.119.66;ttl=3600000;flags=0\")\n    modparam(\"corex\", \"dns_cache\", \"type=AAAA;name=kamailio.org;addr=2a00:d60:0:400::2;ttl=3600000;flags=0\")\n    ...\n\n",
  "evcb_reply_out": "### evcb_reply_out (string)\n\nName of KEMI callback function to be executed instead of\nevent_route\\[corex:reply-out\\].\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"corex\", \"evcb_reply_out\", \"ksr_corex_reply_out\")\n    ...\n\n",
  "nio_intercept": "### nio_intercept (int)\n\nIf set to non-zero then raw data received from a remote host or about to\nbe sent to a remote host is made available in\nevent_route\\[network:msg\\]. The script writer may modify this and save\nto msg_avp, which will then be processed by SIP worker as normal.\n\n*Default value is 0, i.e. do not allow access to network io data.*\n\n    ...\n    modparam(\"corex\", \"nio_intercept\", 1)\n    ...\n\n",
  "nio_min_msg_len": "### nio_min_msg_len (int)\n\nMinimum content length of the packet to execute the\nevent_route\\[network:msg\\]. This only works if nio_intercept parameter\nis set to non-zero.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"corex\", \"nio_min_msg_len\", 32)\n    ...\n\n",
  "nio_msg_avp": "### nio_msg_avp (string)\n\nAVP name to store modified content to be set in the packet. If not set\nin event_route\\[network:msg\\], then all changes are lost and original\ncontents are used. This only works if nio_intercept parameter is to set\nnon-zero.\n\n*Default value is empty.*\n\n    ...\n    modparam(\"corex\", \"nio_msg_avp\", \"$avp(msg)\")\n    ...\n\n"
 },
 "mtree": {
  "db_url": "### db_url (string)\n\nURL of the database server to be used.\n\n*Default value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"mtree\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "db_table": "### db_table (string)\n\nName of database table where data for many trees is stored. It is\nignored if a 'mtree' parameter is defined. The SQL scripts creates a\ntable named 'mtrees' that can be used for this parameter.\n\n*Default value is \u201c\u201d (no table name).*\n\n    ...\n    modparam(\"mtree\", \"db_table\", \"mtrees\")\n    ...\n\n",
  "mtree": "### mtree (string)\n\nDefinition of memory tree with using a parameters format string. The\nparameter names can be:\n\n- name - the name of the tree to be used for referencing inside\n  configuration file.\n\n- dbtable - the name of the database table from where to load the\n  records stored in the tree.\n\n- cols - the column names of the database table. They must be enclosed\n  in quotes in order to form a valid SIP parameter value and be\n  separated by comma. The first column corresponds to tprefix. When\n  specified, there must be at least two columns. If this attribute is\n  not specified, then the global module parameters for tprefix and\n  tvalue are used. If more than one value columns are specified, the\n  tree will pack the column values in a comma separated string, which\n  will be associated with the prefix (string transformation\n  {s.select,...) can be used in configuration file to extract a specific\n  column value).\n\n- type - the type of tree elements (0 = string, 1 = d:w, 2 = integer).\n  None-zero is valid only when the (tprefix, tvalue) pairs are loaded\n  (not for multi-column values).\n\n  When the type is 1, the value in database has to be two integers\n  separated by colon, the first one (d - dstid) will be stored in\n  pv_dstid AVP and the second (w - weight) will be stored in pv_weight\n  AVP. If in the matching records are many with the same dstid, it will\n  keep only the one with the longest prefix. Then the records are\n  ordered by the weight and stored in the specified AVPs. The number of\n  stored records is saved in pv_count variable.\n\n- multi - tells if dbtable can contain more than one tree (0 = one tree,\n  1 = more than one tree identified by tname column). It is valid only\n  when the (tprefix, tvalue) pairs are loaded (not for multi-column\n  values).\n\nThis parameter can be set many times to add more trees in memory.\n\n*Default value is \u201cnone\u201d.*\n\n    ...\n    modparam(\"mtree\", \"mtree\", \"name=mytree1;dbtable=routes1;type=0\")\n    modparam(\"mtree\", \"mtree\", \"name=mytree2;dbtable=routes2;type=0;multi=1\")\n    modparam(\"mtree\", \"mtree\",\n        \"name=mytree1;dbtable=routes1;cols='key1,val1,val2,val3'\")\n    ...\n\n",
  "tname_column": "### tname_column (string)\n\nName of 'tname' column.\n\n*Default value is \u201ctname\u201d.*\n\n    ...\n    modparam(\"mtree\", \"tname_column\", \"name\")\n    ...\n\n",
  "tprefix_column": "### tprefix_column (string)\n\nName of 'tprefix' column.\n\n*Default value is \u201ctprefix\u201d.*\n\n    ...\n    modparam(\"mtree\", \"tprefix_column\", \"prefix\")\n    ...\n\n",
  "tvalue_column": "### tvalue_column (string)\n\nName of 'tvalue' column.\n\n*Default value is \u201ctvalue\u201d.*\n\n    ...\n    modparam(\"mtree\", \"tvalue_column\", \"ipaddr\")\n    ...\n\n",
  "fetch_rows": "### fetch_rows (integer)\n\nNumber of rows to be loaded in one step from database.\n\n*Default value is 1000.*\n\n    ...\n    modparam(\"mtree\", \"fetch_rows\", 4000)\n    ...\n\n",
  "char_list": "### char_list (string)\n\nThe list with characters allowed in prefix.\n\n*Default value is \u201c0123456789\u201d.*\n\n    ...\n    modparam(\"mtree\", \"char_list\", \"0123456789*+\")\n    ...\n\n",
  "pv_value": "### pv_value (string)\n\nThe PV spec where to store the matched value. It can be any writable PV.\n\n*Default value is \u201c\\$avp(s:tvalue)\u201d.*\n\n    ...\n    modparam(\"mtree\", \"pv_value\", \"$var(mtval)\")\n    ...\n\n",
  "pv_values": "### pv_values (string)\n\nThe AVP where to store the matched values when mtree is of type 0 or 2\nand mode of mt_match() call has value 2.\n\n*Default value is \u201c\\$avp(s:tvalues)\u201d.*\n\n    ...\n    modparam(\"mtree\", \"pv_values\", \"$avp(mtvals)\")\n    ...\n\n",
  "pv_dstid": "### pv_dstid (string)\n\nThe AVP name where to store the first integer value when tree type is 1.\n\n*Default value is \u201c\\$avp(tdstid)\u201d.*\n\n    ...\n    modparam(\"mtree\", \"pv_dstid\", \"$var(dstid)\")\n    ...\n\n",
  "pv_weight": "### pv_weight (string)\n\nThe AVP name where to store the second integer value when tree type is\n1.\n\n*Default value is \u201c\\$avp(tweight)\u201d.*\n\n    ...\n    modparam(\"mtree\", \"pv_dstid\", \"$var(weight)\")\n    ...\n\n",
  "pv_count": "### pv_count (string)\n\nThe PV spec where to store the count of matched values when tree type\nis 1. It can be any writable PV.\n\n*Default value is \u201c\\$avp(tcount)\u201d.*\n\n    ...\n    modparam(\"mtree\", \"pv_count\", \"$var(count)\")\n    ...\n\n",
  "mt_tree_type": "### mt_tree_type (integer)\n\nDefault payload type for trees data stored in 'db_table'. Documented\nvalues are 0 for string payloads and 2 for integer payloads.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"mtree\", \"mt_tree_type\", 2)\n    ...\n\n",
  "mt_ignore_duplicates": "### mt_ignore_duplicates (integer)\n\nIgnore duplicated prefixes when loading data.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"mtree\", \"mt_ignore_duplicates\", 1)\n    ...\n\n",
  "mt_allow_duplicates": "### mt_allow_duplicates (integer)\n\nAllow duplicate prefixes when loading data.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"mtree\", \"mt_allow_duplicates\", 1)\n    ...\n\n"
 },
 "db_mongodb": {},
 "statsd": {
  "ip": "### ip(string)\n\nStatsd server IP address.\n\nDefaults to 127.0.0.1\n\n    ...\n    modparam(\"statsd\", \"ip\", \"127.0.0.1\")\n    ...\n                    \n\n",
  "port": "### port(string)\n\nStatsd server port number\n\nDefaults to 8125\n\n    ...\n    modparam(\"statsd\", \"port\", \"8125\")\n    ...\n                    \n\n"
 },
 "tlsa": {},
 "ipops": {},
 "uid_domain": {
  "db_url": "### db_url (string)\n\nThis is URL of the database to be used.\n\nDefault value is \"mysql://serro:47serro11@localhost/ser\"\n\n    modparam(\"domain\", \"db_url\", \"mysql://ser:pass@db_host/ser\")\n                \n\n",
  "db_mode": "### db_mode (integer)\n\nDatabase mode. Value 0 means non-caching, 1 means caching is enabled. It\nis highly recommended to enable caching if you want to use domain-level\nattributes.\n\nDefault value is 1 (caching).\n\n    modparam(\"domain\", \"db_mode\", 0)   # Do not use caching\n                \n\n",
  "domain_table": "### domain_table (string)\n\nName of table containing names of local domains that the proxy is\nresponsible for. Local users must have in their SIP URI a host part that\nis equal to one of the domains stored in this table.\n\nDefault value is \"domain\".\n\n    modparam(\"domain\", \"domain_table\", \"new_name\")\n                \n\n",
  "did_col": "### did_col (string)\n\nThis is the name of the column in domain table that contains the unique\nidentifiers of virtual domains. Domains names found in this table are\narranged into virtual domains. Each virtual domain must have a unique\nidentifier and it can contain one or more domain names.\n\nDefault value is \"did\".\n\n    modparam(\"domain\", \"did_col\", \"did\")\n                \n\n",
  "domain_col": "### domain_col (string)\n\nName of column containing domain names in the domain table.\n\nDefault value is \"domain\".\n\n    modparam(\"domain\", \"domain_col\", \"domain\")\n                \n\n",
  "flags_col": "### flags_col (string)\n\nThis is the name of the column in domain table which stores various\nflags. Each row in the table has a bunch of generic flags that can be\nused mark the row disabled, deleted, etc. The flags allow for more\nflexible administration of the data in the database and they are present\nin several other tables too.\n\nDefault value is \"flags\".\n\n    modparam(\"domain\", \"flags_col\", \"domain\")\n                \n\n",
  "domattr_table": "### domattr_table (string)\n\nThis parameter can be used to configure the name of the table that is\nused to store domain-level attributes. Domain level attributes are\nattributes that are associated with a particular virtual domain. They\nare typically used to store additional domain-wide settings that should\napply to all users who belong to the domain.\n\nDefault value is \"domain_attrs\".\n\n    modparam(\"domain\", \"domattr_table\", \"domain_attrs\")\n                \n\n",
  "domattr_did": "### domattr_did (string)\n\nUse this parameter to configure the name of the column in domain_attrs\ntable that is used to store the did of the virtual domain the attribute\nbelongs to. Normally there is no need to configure this parameter,\nunless you want adapt to module to a different database schema.\n\nDefault value is \"did\".\n\n    modparam(\"domain\", \"domattr_did\", \"did\")\n                \n\n",
  "domattr_name": "### domattr_name (string)\n\nUse this parameter to configure the name of the column in domain_attrs\ntable that is used to store the name of the attribute. Normally there is\nno need to configure this parameter, unless you want adapt to module to\na different database schema.\n\nDefault value is \"name\".\n\n    modparam(\"domain\", \"domattr_name\", \"name\")\n                \n\n",
  "domattr_type": "### domattr_type (string)\n\nUse this parameter to configure the name of the column in domain_attrs\ntable that is used to store the type of the attribute. Normally there is\nno need to configure this parameter, unless you want adapt to module to\na different database schema.\n\nDefault value is \"type\".\n\n    modparam(\"domain\", \"domattr_type\", \"type\")\n                \n\n",
  "domattr_value": "### domattr_value (string)\n\nUse this parameter to configure the name of the column in domain_attrs\ntable that is used to store the value of the attribute. Normally there\nis no need to configure this parameter, unless you want adapt to module\nto a different database schema.\n\nDefault value is \"value\".\n\n    modparam(\"domain\", \"domattr_value\", \"value\")\n                \n\n",
  "domattr_flags": "### domattr_flags (string)\n\nThis is the name of the column in domain_attrs table which stores\nvarious flags. Each row in the table has a bunch of generic flags that\ncan be used mark the row disabled, deleted, etc. The flags allow for\nmore flexible administration of the data in the database and they are\npresent in several other tables too. You do not have to touch this\nparameter under normal circumstances.\n\nDefault value is \"flags\".\n\n    modparam(\"domain\", \"domattr_flags\", \"flags\")\n                \n\n",
  "load_domain_attrs": "### load_domain_attrs (integer)\n\nThis parameter can be used to enable/disable user of domain-level\nattributes. Domain-level attributes are variables that can be used to\nstore additional configuration that applies to the whole virtual domain\nand all users within the virtual domain. Domain-level attributes are\nstored in domain_attrs. If you set this parameter to a non-zero value\nthen the server will make domain-level attributes available to the\nscript every time you call function `lookup_domain`. If you set the\nparameter to 0 then domain-level attributes will be ignored, the domain\nmodule will not load them from the database and the lookup function will\nnot make them available to the script.\n\nDefault value is 0.\n\n    modparam(\"domain\", \"load_domain_attrs\", 1)\n                \n\n"
 },
 "tm": {
  "fr_timer": "### fr_timer (integer)\n\nTimer which hits if no final reply for a request or ACK for a negative\nINVITE reply arrives (in milliseconds).\n\nDefault value is 30000 ms (30 seconds).\n\nSee also: `t_set_fr()`, `max_noninv_lifetime`.\n\n    ...\n    modparam(\"tm\", \"fr_timer\", 10000)\n    ...\n            \n\n",
  "fr_inv_timer": "### fr_inv_timer (integer)\n\nTimer which hits if no final reply for an INVITE arrives after a\nprovisional message was received (in milliseconds).\n\nNote: This timer can be restarted when a provisional response is\nreceived. For more details see `restart_fr_on_each_reply`.\n\nDefault value is 120000 ms (120 seconds).\n\nSee also: `t_set_fr()`, `max_inv_lifetime`.\n\n    ...\n    modparam(\"tm\", \"fr_inv_timer\", 180000)\n    ...\n            \n\n",
  "max_inv_lifetime": "### max_inv_lifetime (integer)\n\nMaximum time an INVITE transaction is allowed to be active (in\nmilliseconds). After this interval has passed from the transaction\ncreation, the transaction will be either moved into the wait state or in\nthe final response retransmission state, irrespective of the transaction\n`fr_inv_timer` and `fr_timer` values.\n\nAn INVITE transaction will be kept in memory for maximum:\n`max_inv_lifetime`+`fr_timer`(from the ACK to the final reply\nwait)+`wt_timer`.\n\nThe main difference between this timer and `fr_inv_timer` is that the\n`fr_inv_timer` is per branch, while `max_inv_lifetime` is per the whole\ntransaction. Even on a per branch basis `fr_inv_timer` could be\nrestarted. For example, by default if `restart_fr_on_each_reply` is not\ncleared, the `fr_inv_timer` will be restarted for each received\nprovisional reply. Even if `restart_fr_on_each_reply` is not set the\n`fr_inv_timer` will still be restarted for each increasing reply (e.g.\n180, 181, 182, ...). Another example when a transaction can live\nsubstantially more than its `fr_inv_timer` and where `max_inv_lifetime`\nwill help is when DNS failover is used (each failed DNS destination can\nintroduce a new branch).\n\nThe default value is 180000 ms (180 seconds - the rfc3261 timer C\nvalue).\n\nSee also: `max_noninv_lifetime`, `t_set_max_lifetime()` (allows changing\n`max_inv_lifetime` on a per transaction basis), `t_reset_max_lifetime`\n`fr_timer`, `wt_timer`, `restart_fr_on_each_reply`.\n\n    ...\n    modparam(\"tm\", \"max_inv_lifetime\", 150000)\n    ...\n            \n\n",
  "max_noninv_lifetime": "### max_noninv_lifetime (integer)\n\nMaximum time a non-INVITE transaction is allowed to be active (in\nmilliseconds). After this interval has passed from the transaction\ncreation, the transaction will be either moved into the wait state or in\nthe final response retransmission state, irrespective of the transaction\n`fr_timer` value. It's the same as `max_inv_lifetime`, but for\nnon-INVITEs.\n\nA non-INVITE transaction will be kept in memory for a maximum of:\n`max_noninv_lifetime`+`wt_timer`.\n\nThe main difference between this timer and `fr_timer` is that the\n`fr_timer` is per branch, while `max_noninv_lifetime` is per the whole\ntransaction. An example when a transaction can live substantially more\nthen its `fr_timer` and where `max_noninv_lifetime` will help is when\nDNS failover is used (each failed DNS SRV destination can introduce a\nnew branch).\n\nThe default value is 32000 ms (32 seconds - the RFC3261 timer F value).\n\nSee also: `max_inv_lifetime`, `t_set_max_lifetime()` (allows changing\n`max_noninv_lifetime` on a per transaction basis),\n`t_reset_max_lifetime` `fr_timer`, `wt_timer`.\n\n    ...\n    modparam(\"tm\", \"max_noninv_lifetime\", 30000)\n    ...\n            \n\n",
  "wt_timer": "### wt_timer (integer)\n\nTime for which a transaction stays in memory to absorb delayed messages\nafter it completed (in milliseconds); also, when this timer hits,\nretransmission of local CANCEL requests is stopped (a puristic but\ncomplex behavior would be not to enter wait state until local branches\nare finished by a final reply or FR timer--we simplified).\n\nDefault value is 5000 ms (5 seconds).\n\n    ...\n    modparam(\"tm\", \"wt_timer\", 1000)\n    ...\n            \n\n",
  "retr_timer1": "### retr_timer1 (integer)\n\nInitial retransmission period (in milliseconds).\n\nDefault value is 500 milliseconds.\n\n    ...\n    modparam(\"tm\", \"retr_timer1\", 1000)\n    ...\n            \n\n",
  "retr_timer2": "### retr_timer2 (integer)\n\nMaximum retransmission period (in milliseconds). The retransmission\ninterval starts with `retr_timer1` and increases until it reaches this\nvalue. After this it stays constant at `retr_timer2`.\n\nDefault value is 4000 milliseconds.\n\n    ...\n    modparam(\"tm\", \"retr_timer2\", 2000)\n    ...\n            \n\n",
  "noisy_ctimer": "### noisy_ctimer (integer)\n\nIf set, INVITE transactions that time-out (FR INV timer) will be always\nreplied. If it's not set, the transaction has only one branch and no\nresponse was ever received on this branch, it will be silently dropped\n(no 408 reply will be generated) This behavior is overridden if a\nrequest is forked, the transaction has a failure route or callback, or\nsome functionality explicitly turned it on for a transaction (like the\nACC module does to avoid unaccounted transactions due to expired timer).\nTurn this off only if you know the client UACs will timeout and their\ntimeout interval for INVITEs is lower or equal than tm's `fr_inv_timer`.\n\nDefault value is 1 (on).\n\n    ...\n    modparam(\"tm\", \"noisy_ctimer\", 1)\n    ...\n            \n\n",
  "restart_fr_on_each_reply": "### restart_fr_on_each_reply (integer)\n\nIf set (default), the `fr_inv_timer` for an INVITE transaction will be\nrestarted for each provisional reply received (rfc3261 mandated\nbehaviour). If not set, the `fr_inv_timer` will be restarted only for\nthe first provisional replies and for increasing replies greater or\nequal 180 (e.g. 180, 181, 182, 185, ...).\n\nSetting it to 0 is especially useful when dealing with bad UAs that\ncontinuously retransmit 180s, not allowing the transaction to timeout\n(and thus making impossible the implementation of certain services, like\nautomatic voicemail after x seconds).\n\nDefault value is 1 (on).\n\nSee also: `fr_inv_timer`, `max_inv_lifetime`.\n\n    ...\n    modparam(\"tm\", \"restart_fr_on_each_reply\", 0)\n    ...\n            \n\n",
  "auto_inv_100": "### auto_inv_100 (integer)\n\nIf set (default) tm will automatically send a 100 reply to INVITEs.\n\nSetting it to 0 can be used to enable first running some tests or\npre-processing on the INVITE and only if some conditions are met\nmanually send a 100 (using `t_reply()`). Note however that in this case\nall the 100s have to be sent \"by hand\". `t_set_auto_inv_100()` might\nhelp to selectively turn off this feature only for some specific\ntransactions.\n\nDefault value is 1 (on).\n\nSee also: `t_set_auto_inv_100()` `auto_inv_100_reason`.\n\n    ...\n    modparam(\"tm\", \"auto_inv_100\", 0)\n    ...\n            \n\n",
  "auto_inv_100_reason": "### auto_inv_100_reason (string)\n\nSet reason text of the automatically sent 100 to an INVITE.\n\nDefault value is \"trying -- your call is important to us\".\n\nSee also: `auto_inv_100`.\n\n    ...\n    modparam(\"tm\", \"auto_inv_100_reason\", \"Trying\")\n    ...\n            \n\n",
  "unix_tx_timeout": "### unix_tx_timeout (integer)\n\nUnix socket transmission timeout, in milliseconds.\n\nIf UNIX sockets are used (e.g.: to communicate with sems) and sending a\nmessage on a UNIX socket takes longer than `unix_tx_timeout`, the send\nwill fail.\n\nThe default value is 500 milliseconds.\n\n    ...\n    modparam(\"tm\", \"unix_tx_timeout\", 250)\n    ...\n            \n\n",
  "aggregate_challenges": "### aggregate_challenges (integer)\n\nIf set (default) and the final response is a 401 or a 407 and more than\none branch received a 401 or 407, then all the WWW-Authenticate and\nProxy-Authenticate headers from all the 401 and 407 replies will be\naggregated in a new final response. If only one branch received the\nwinning 401 or 407 then this reply will be forwarded (no new one will be\nbuilt).\n\nIf disabled (set to 0) only the first 401, or if no 401 was received the\nfirst 407, will be forwarded (no header aggregation).\n\nDefault value is 1 (required by RFC 3261).\n\n    ...\n    modparam(\"tm\", \"aggregate_challenges\", 0)\n    ...\n            \n\n",
  "reparse_invite": "### reparse_invite (integer)\n\nIf set (default), the CANCEL and negative ACK requests are constructed\nfrom the INVITE message which was sent out instead of building them from\nthe received request. The disadvantage is that the outgoing INVITE has\nto be partially re-parsed, the advantage is that the CANCEL/ACK is\nalways RFC 3261-compliant, it always contains the same route-set as the\nINVITE message. Do not disable the INVITE re-parsing for example in the\nfollowing cases:\n\n\\- The INVITE contains a preloaded route-set, and Kamailio forwards the\nmessage to the next hop according to the \"Route\" header. The \"Route\"\nheader is not removed in the CANCEL without `reparse_invite`=1.\n\n\\- Kamailio record-routes, thus an in-dialog INVITE contains a \"Route\"\nheader which is removed during loose routing. If the in-dialog INVITE is\nrejected, the negative ACK still contains the \"Route\" header without\n`reparse_invite`=1.\n\nDefault value is 1.\n\n    ...\n    modparam(\"tm\", \"reparse_invite\", 0)\n    ...\n            \n\n",
  "ac_extra_hdrs": "### ac_extra_hdrs (string)\n\nHeader fields prefixed by this parameter value are included in the\nCANCEL and negative ACK messages if they were present in the outgoing\nINVITE.\n\nNote, that the parameter value effects only those headers which are not\ncovered by RFC 3261 (which are neither mandatory nor prohibited in\nCANCEL and ACK), and the parameter can be used only together with\n`reparse_invite`=1.\n\nDefault value is \"\".\n\n    ...\n    modparam(\"tm\", \"ac_extra_hdrs\", \"myfavoriteheaders-\")\n    ...\n            \n\n",
  "blst_503": "### blst_503 (integer)\n\nIf set and the Kamailio blocklist support is enabled, every 503 reply\nsource is added to the blocklist. The initial blocklist timeout (or ttl)\ndepends on the presence of a \"Retry-After\" header in the reply and the\nvalues of the following tm parameters: `blst_503_def_timeout`,\n`blst_503_min_timeout` and `blst_503_max_timeout`.\n\n*WARNING:*blindly allowing 503 blocklisting could be very easily\nexploited for DOS attacks in most network setups.\n\nThe default value is 0 (disabled due to the reasons above).\n\n    ...\n    modparam(\"tm\", \"blst_503\", 1)\n    ...\n            \n\n",
  "blst_503_def_timeout": "### blst_503_def_timeout (integer)\n\nBlocklist interval in seconds for a 503 reply with no \"Retry-After\"\nheader. See also `blst_503`, `blst_503_min_timeout` and\n`blst_503_max_timeout`.\n\nThe default value is 0, which means that if no \"Retry-After\" header is\npresent, the 503 reply source will not be blocklisted (RFC 3261\nconformant behaviour).\n\n    ...\n    modparam(\"tm\", \"blst_503_def_timeout\", 120)\n    ...\n            \n\n",
  "blst_503_min_timeout": "### blst_503_min_timeout (integer)\n\nMinimum blocklist interval in seconds for a 503 reply with a\n\"Retry-After\" header. It will be used if the \"Retry-After\" value is\nsmaller than this value.\n\nSee also `blst_503`, `blst_503_def_timeout` and `blst_503_max_timeout`.\n\nThe default value is 0\n\n    ...\n    modparam(\"tm\", \"blst_503_min_timeout\", 30)\n    ...\n            \n\n",
  "blst_503_max_timeout": "### blst_503_max_timeout (integer)\n\nMaximum blocklist interval in seconds for a 503 reply with a\n\"Retry-After header\". It will be used if the \"Retry-After\" value is\ngreater than this limit.\n\nSee also `blst_503`, `blst_503_def_timeout` and `blst_503_min_timeout`.\n\nThe default value is 3600\n\n    ...\n    modparam(\"tm\", \"blst_503_max_timeout\", 604800)\n    ...\n            \n\n",
  "blst_methods_add": "### blst_methods_add (unsigned integer)\n\nBitmap of method types that trigger blocklisting on transaction\ntimeouts. (This setting has no effect on blocklisting because of send\nfailures.)\n\nThe following values are associated to the request methods: INVITE=1,\nCANCEL=2, ACK=4 (not retransmitted, thus, never times-out), BYE=8,\nINFO=16, REGISTER=32, SUBSCRIBE=64, NOTIFY=126, OTHER=256 (all the\nunknown types). Check parser/msg_parser.h for farther details.\n\nChange the value carefully, because requests that don't get a\nprovisional response (everything but INVITE) can easily cause the next\nhop to be inserted into the blocklist by mistake. For example the next\nhop is a proxy, it is alive, but waiting for the response of the UAS,\nand has higher fr_timer value.\n\nThe default value is 1, only INVITEs trigger blocklisting\n\n    ...\n    # INVITEs and REGISTERs trigger blocklisting\n    modparam(\"tm\", \"blst_methods_add\", 33)\n    ...\n            \n\n",
  "blst_methods_lookup": "### blst_methods_lookup (unsigned integer)\n\nBitmap of method types that are looked-up in the blocklist before being\nforwarded statefully. See also `blst_methods_add`\n\nThe default value is 4294967287, every method type except BYE. (We try\nto deliver BYEs no matter what)\n\n    ...\n    # lookup only INVITEs\n    modparam(\"tm\", \"blst_methods_lookup\", 1)\n    ...\n            \n\n",
  "cancel_b_method": "### cancel_b_method (integer)\n\nMethod used when attempting to CANCEL an unreplied transaction branch (a\nbranch where no response was received). The possible values are 0, 1,\nand 2.\n\n\\- *0* will immediately stop the request (INVITE) retransmission on the\nbranch and it will behave as if the branch was immediately replied with\na 487 (a fake internal 487 reply). The advantage is the unreplied\nbranches will be terminated immediately. However it introduces a race\nrisk with a possible slightly delayed 2xx reply. In this case we could\nhave an UA receiving a 2xx after a 487. Moreover this risk is greatly\namplified by packet loss (e.g. if an 180 is lost the branch will look as\nunreplied and a CANCEL will silently drop the branch, but a 2xx can\nstill come at a later time). This is the behaviour for SER versions\nolder than 2.1.\n\n\\- *1* will keep retransmitting the request on unreplied branches. If a\nprovisional answer is received a CANCEL will be immediately sent back\n(attempting to quickly trigger a 487). This approach is race free and\navoids the 2xx after 487 problem, but it's more resource intensive:\nfaced with a branch towards and UA that doesn't answer, a CANCEL attempt\nwill keep the transaction alive for the whole timeout interval\n(`fr_timer`).\n\n\\- *2* will send and retransmit CANCEL even on unreplied branches,\nstopping the request retransmissions. This has the same advantages as\n*1* and also avoids the extra roundtrip in the case of the provisional\nreply, but it's not RFC 3261 conforming (the RFC allows sending CANCELs\nonly on pending branches).\n\nThe default value is 1.\n\n    ...\n    modparam(\"tm\", \"cancel_b_method\", 1)\n    ...\n            \n\n",
  "reparse_on_dns_failover": "### reparse_on_dns_failover (integer)\n\nIf set to 1, the SIP message after a DNS failover is constructed from\nthe outgoing message buffer of the failed branch instead of from the\nreceived request.\n\nIt must be set if multiple branches are installed, the SIP message is\nmodified differently in them, and at least one of them can result in DNS\nfailover. If the parameter is not set the per-branch modifications are\nlost after the failover.\n\nNote: If the parameter is set, branch route block and TMCB_REQUEST_FWDED\ncallback are not called in case of the failover.\n\nDisadvantage: only the via header is replaced in the message buffer, so\nthe outgoing socket address is not corrected in any other part of the\nmessage. It is dangerous on multihomed hosts: when the new SIP request\nafter the DNS failover is sent via different interface than the first\nrequest, the message can contain incorrect IP address in the\nRecord-Route header.\n\nDefault value is 1.\n\n    ...\n    modparam(\"tm\", \"reparse_on_dns_failover\", 0)\n    ...\n            \n\n",
  "on_sl_reply": "### on_sl_reply (string)\n\nSets reply route block, to which control is passed when a reply is\nreceived that has no associated transaction. The reply is passed to the\ncore for stateless forwarding after the route block execution unless\ndrop is executed (or it returns 0).\n\nIf KEMI is used, the parameter has to be the KEMI function name, which\nreceives a string parameter with the event name, respectively\n\"on_sl_reply\".\n\n    ...\n    modparam(\"tm\", \"on_sl_reply\", \"stateless_replies\")\n    ...\n\n    onreply_route[\"stateless_replies\"] {\n        # do not allow stateless replies to be forwarded\n        return 0;\n    }\n            \n\n    ...\n    modparam(\"tm\", \"on_sl_reply\", \"ksr_slreply\")\n    ...\n    -- event callback function implemented in javascript\n    function ksr_slreply(evname) {\n        # the evname is set to \"on_sl_reply\"\n        # do not allow stateless replies to be forwarded\n        KSR.x.drop();\n    }\n            \n\n",
  "contacts_avp": "### contacts_avp (string)\n\nThis is the name of an XAVP that the `t_load_contacts()` function uses\nto store contacts of the destination set and that `t_next_contacts()`\nfunction uses to restore those contacts.\n\n*Default value is \"NULL\" (t_load_contacts()/t_next_contacts() functions\nare disabled).*\n\n    ...\n    modparam(\"tm\", \"contacts_avp\", \"tm_contacts\")\n    ...\n\n",
  "contact_flows_avp": "### contact_flows_avp (string)\n\nThis is the name of an XAVP that the `t_next_contacts()` function uses\nto store contacts (if any) that it skipped, because they contained same\n+sip.instance value than some other contact, and that\n`t_next_contact_flows()` function uses to restore those contacts.\n\n*Default value is \"NULL\". This parameter MUST be set if variable\ncontacts_avp is set.*\n\n    ...\n    modparam(\"tm\", \"contact_flows_avp\", \"tm_contact_flows\")\n    ...\n\n",
  "fr_timer_avp": "### fr_timer_avp (string)\n\nThe value of fr_timer timer can be overriden on per-transaction basis.\nThe administrator can provide a value to be used for a particular\ntransaction in an AVP. This parameter contains the name of the AVP that\nwill be checked. If the AVP exists then its value will be used for the\nfr_timer timer, effectively overriding the value configured in\n`fr_timer` parameter for the current transaction.\n\n<div class=\"note\">\n\nThe value of the AVP is expected to be expressed in *seconds* and not\nmilliseconds (unlike the rest of the timers).\n\n</div>\n\nThis parameter is kept for backwards compatibility (hence its value\nexpressed in seconds instead of milliseconds and its arcane way of\nspecifying the avps). The recommended replacement is using `t_set_fr()`\non a per transaction basis.\n\nSee also: `t_set_fr()`, `fr_timer`.\n\nIn Kamailio compatibility mode (defined by \\#!KAMAILIO), the value of\nthe parameter must be the name of an AVP in pseudo-variable format:\n\\$avp(name). In SER compatibility mode it must be just AVP name.\n\n    ...\n    # Kamailio mode\n    modparam(\"tm\", \"fr_timer_avp\", \"$avp(i:708)\")\n    # Old SER mode\n    modparam(\"tm\", \"fr_timer_avp\", \"i:708\")\n    ...\n                \n\n",
  "fr_inv_timer_avp": "### fr_inv_timer_avp (string)\n\nThe value of fr_inv_timer timer can be overriden on per-transaction\nbasis. The administrator can provide a value to be used for a particular\ntransaction in an AVP. This parameter contains the name of the AVP that\nwill be checked. If the AVP exists, is non-empty and non-zero then its\nvalue will be used for the fr_inv_timer timer, effectively overriding\nthe value configured in `fr_inv_timer` parameter for the current\ntransaction.\n\n<div class=\"note\">\n\nThe value of the AVP is expected to be expressed in *seconds* and not\nmilliseconds (unlike the rest of the timers).\n\n</div>\n\nThis parameter is kept for backwards compatibility (hence its value\nexpressed in seconds instead of milliseconds and its arcane way of\nspecifying the avps). The recommended replacement is using `t_set_fr()`\non a per transaction basis.\n\nSee also: `t_set_fr()`, `fr_inv_timer`.\n\nIn Kamailio compatibility mode (defined by \\#!KAMAILIO), the value of\nthe parameter must be the name of an AVP in pseudo-variable format:\n\\$avp(name). In SER compatibility mode it must by just AVP name.\n\n    ...\n    # Kamailio mode\n    modparam(\"tm\", \"fr_inv_timer_avp\", \"$avp(my_fr_inv_timer)\")\n    # Old SER mode\n    modparam(\"tm\", \"fr_inv_timer_avp\", \"my_fr_inv_timer\")\n    ...\n                \n\n",
  "unmatched_cancel": "### unmatched_cancel (integer)\n\nThis parameter selects between forwarding CANCELs that do not match any\ntransaction statefully (0, default value), statelessly (1) or dropping\nthem (2). Note that the stateful forwarding has an additional hidden\nadvantage: the tm module will be able to recognize INVITEs that arrive\nafter their CANCEL. Note also that this feature could be used to try a\nmemory exhaustion DOS attack against a proxy that authenticates all\nrequests, by continuously flooding the victim with CANCELs to random\ndestinations (since the CANCEL cannot be authenticated, each received\nbogus CANCEL will create a new transaction that will live by default\n30s).\n\nDefault value is 0.\n\n    ...\n    modparam(\"tm\", \"unmatched_cancel\", 2)\n    ...\n                \n\n",
  "ruri_matching": "### ruri_matching (integer)\n\nIf set the TM module will try to match the request URI when doing SIP\n1.0 (pre-RFC 3261) transaction matching (the \"Via\" header branch\nparameter does not contain the 3261 cookie).\n\nThe only reason to have it not set is for interoperability with old,\nbroken implementations.\n\nDefault value is 1 (on).\n\nCan be set at runtime, e.g.:\n\n        $ kamcmd cfg.set_now_int tm ruri_matching 0\n            \n\n    ...\n    modparam(\"tm\", \"ruri_matching\", 1)\n    ...\n            \n\n",
  "via1_matching": "### via1_matching (integer)\n\nIf set the TM module will try to match the topmost \"Via\" header when\ndoing SIP 1.0 (pre-RFC 3261) transaction matching (the \"Via\" header\nbranch parameter does not contain the 3261 cookie).\n\nThe only reason to have it not set is for interoperability with old,\nbroken implementations.\n\nDefault value is 1 (on).\n\nCan be set at runtime, e.g.:\n\n        $ kamcmd cfg.set_now_int tm via1_matching 0\n            \n\n    ...\n    modparam(\"tm\", \"via1_matching\", 1)\n    ...\n            \n\n",
  "callid_matching": "### callid_matching (integer)\n\nIf set the TM module will try to match the callid when doing transaction\nmatching.\n\nTurn on if you don't want replies/requests from broken clients who send\na mangled Call-ID to match the transaction. For example when the other\nside won't recognise the response anyway because of a changed Call-ID,\nthis setting will prevent accounting records to be created or\nfailure_route to be skipped.\n\nDefault value is 0 (off).\n\nCan be set at runtime, e.g.:\n\n        $ kamcmd cfg.set_now_int tm callid_matching 0\n            \n\n    ...\n    modparam(\"tm\", \"callid_matching\", 1)\n    ...\n            \n\n",
  "callid_cseq_matching": "### callid_cseq_matching (int)\n\nIf set to something other than 0, will do transaction matching using\ncallid and cseq header values instead of via branch md5 value. *Note\nthat this behavior is non-RFC conpliant!*\n\n*Default value is 0.*\n\n    ...\n    modparam(\"tm\", \"callid_cseq_matching\", 0)\n    ...\n\n    kamcmd cfg.set_now_int tm callid_cseq_matching 1\n            \n\n",
  "pass_provisional_replies": "### pass_provisional_replies (integer)\n\nIf set, TMCB_LOCAL_RESPONSE_OUT tm registered callbacks will be called\nalso for provisional replies.\n\nDefault value is 0 (off).\n\nCan be set at runtime, e.g.:\n\n        $ kamcmd cfg.set_now_int tm pass_provisional_replies 1\n            \n\n    ...\n    modparam(\"tm\", \"pass_provisional_replies\", 1)\n    ...\n            \n\n",
  "default_code": "### default_code (integer)\n\nDefault response code sent by `t_reply()` if it cannot retrieve its\nparameters (e.g. inexistent avp). Valid values are between 400 and 699.\n\nDefault value is 500.\n\nCan be set at runtime, e.g.:\n\n        $ kamcmd cfg.set_now_int tm default_code 505\n            \n\n    ...\n    modparam(\"tm\", \"default_code\", 501)\n    ...\n            \n\n",
  "default_reason": "### default_reason (string)\n\nDefault SIP reason phrase sent by `t_reply()` if it cannot retrieve its\nparameters (e.g. inexistent avp).\n\nDefault value is \"Server Internal Error\".\n\nCan be set at runtime, e.g.:\n\n        $ kamcmd cfg.set_now_string tm default_reason \"Unknown error\"\n            \n\n    ...\n    modparam(\"tm\", \"default_reason\", \"Unknown reason\")\n    ...\n            \n\n",
  "disable_6xx_block": "### disable_6xx_block (integer)\n\nIf set the TM module will treat all the 6xx replies like normal replies\n(warning: this would be non-RFC conformant behaviour).\n\nIf not set (default) receiving a 6xx will cancel all the running\nparallel branches, will stop DNS failover and forking. However serial\nforking using `append_branch()` in the `failure_route` will still work.\n\nIt can be overwritten on a per transaction basis using\n`t_set_disable_6xx()`.\n\nDefault value is 0 (off, rfc conformant behaviour).\n\nCan be set at runtime, e.g.:\n\n        $ kamcmd cfg.set_now_int tm disable_6xx_block 0\n            \n\nSee also: `t_set_disable_6xx()`.\n\n    ...\n    modparam(\"tm\", \"disable_6xx_block\", 1)\n    ...\n            \n\n",
  "local_ack_mode": "### local_ack_mode (integer)\n\nThis setting controls where locally generated ACKs for 2xx replies to\nlocal transactions (transactions created via `t_uac*()` either through\nthe TM api or via RPC/mi/fifo) are sent.\n\nIt has 3 possible values:\n\n- *0* - the ACK destination is choosen according to the RFC: the next\n  hop is found using the contact and the route set and then DNS\n  resolution is used on it.\n\n- *1* - the ACK is sent to the same address as the corresponding INVITE\n  branch.\n\n- *2* - the ACK is sent to the source of the 2xx reply.\n\n<div class=\"note\">\n\nMode 1 and 2 does not follow RFC 3261, but are useful to deal with some\nsimple UAs behind a NAT (no different routing for the ACK and the\ncontact contains an address behind the NAT).\n\n</div>\n\nThe default value is 0 (RFC conformant behaviour).\n\nCan be set at runtime, e.g.:\n\n        $ kamcmd cfg.set_now_int tm local_ack_mode 0\n            \n\n    ...\n    modparam(\"tm\", \"local_ack_mode\", 1)\n    ...\n            \n\n",
  "failure_reply_mode": "### failure_reply_mode (integer)\n\nThis parameter controls how branches are managed and replies are\nselected for failure_route handling: keep all, drop all, drop last\nbranches in SIP serial forking handling.\n\nTo control per transaction see `t_drop_replies()`.\n\nIt has 4 possible values:\n\n- *0* - all branches are kept, no matter a new leg of serial forking has\n  been started. Beware that if the new leg fails, you may get in\n  failure_route a reply code from a branch of previous serial forking\n  legs (e.g., if in first leg you got a 3xx, then you handled the\n  redirection in failure route, sent to a new destination and this one\n  timeout, you will get again the 3xx). Use t_drop_replies() on per\n  transaction fashion to control the behavior you want. It is the\n  default behaviour coming from SER 2.1.x.\n\n- *1* - all branches are discarded by default. You can still overwrite\n  the behaviour via t_drop_replies()\n\n- *2* - by default only the branches of previous leg of serial forking\n  are discarded\n\n- *3* - all previous branches are discarded if there is a new serial\n  forking leg. This is the default behaviour coming from Kamailio 1.5.x.\n  Use this mode if you don't want to handle in a per transaction fashion\n  with t_drop_replies(). It ensures that you will get the winning reply\n  from the branches of last serial forking step (e.g., if in first step\n  you get 3xx, then you forward to a new destination, you will get in\n  failure_route the reply coming from that destination or a local\n  timeout).\n\nThe default value is 3.\n\n    ...\n    modparam(\"tm\", \"failure_reply_mode\", 0)\n    ...\n            \n\n",
  "faked_reply_prio": "### faked_reply_prio (integer)\n\nIt controls how branch selection is done. It allows to give a penalty to\nfaked replies such as the infamous 408 on branch timeout.\n\nInternally, every reply is assigned a priority between 0 (high prio) and\n32000 (low prio). With this parameter the priority of fake replies can\nbe adjusted.\n\n- *0* - disabled (default)\n\n- *\\< 0* - priority is increased by given amount.\n\n- *\\> 0* - priority is decreased by given amount. Do not make it higer\n  than 10000 or faked replies will even loose from 1xx clsss replies.\n\nThe default value is 0.\n\nTo let received replies win from a locally generated 408, set this value\nto 2000.\n\n    ...\n    modparam(\"tm\", \"faked_reply_prio\", 2000)\n    ...\n            \n\n",
  "local_cancel_reason": "### local_cancel_reason (boolean)\n\nEnables/disables adding reason headers (RFC 3326) for CANCELs generated\ndue to receiving a final reply. The reason header added will look like:\n\"Reason: SIP;cause=\\<final_reply_code\\>\".\n\nDefault value is 1 (enabled).\n\nCan be set at runtime, e.g.:\n\n        $ kamcmd cfg.set_now_int tm local_cancel_reason 0\n                \n\nSee also: `e2e_cancel_reason`.\n\n    ...\n    modparam(\"tm\", \"local_cancel_reason\", 0)\n    ...\n                \n\n",
  "e2e_cancel_reason": "### e2e_cancel_reason (boolean)\n\nEnables/disables adding reason headers (RFC 3326) for CANCELs generated\ndue to a received CANCEL. If enabled the reason headers from received\nCANCELs will be copied into the generated hop-by-hop CANCELs.\n\nDefault value is 1 (enabled).\n\nCan be changed at runtime, e.g.:\n\n        $ kamcmd cfg.set_now_int tm e2e_cancel_reason 0\n                \n\nSee also: `t_set_no_e2e_cancel_reason()` and `local_cancel_reason`.\n\n    ...\n    modparam(\"tm\", \"e2e_cancel_reason\", 0)\n    ...\n                \n\n",
  "remap_503_500": "### remap_503_500 (boolean)\n\nEnables/disables conversion of 503 response code to 500. By default it\nis enabled, based on the SIP RFC requirement. This is global setting for\nall received replies handled by TM. To do it per transaction basis, let\nthis option disabled, set a failure route and then do t_reply(\"500\",\n\"...\") inside it.\n\nDefault value is 1 (enabled).\n\n    ...\n    modparam(\"tm\", \"remap_503_500\", 0)\n    ...\n                \n\n",
  "failure_exec_mode": "### failure_exec_mode (boolean)\n\nAdd local failed branches in timer to be considered for failure routing\nblocks. If disabled, relay functions will return false in case the\nbranch could not be forwarded (default behaviour before v4.1.0).\n\nDefault value is 0 (disabled).\n\n    ...\n    modparam(\"tm\", \"failure_exec_mode\", 1)\n    ...\n                \n\n",
  "dns_reuse_rcv_socket": "### dns_reuse_rcv_socket (boolean)\n\nControl reuse of the receive socket for additional branches added by DNS\nfailover. If set to 1, the receive socket is used for sending out the\nnew branches, unless the socket is forced explicitely in configuration\nfile. If set to 0, selected socket is done depending on value of global\nparameter \"mhomed\" (if mhomed=0, then the first listen socket is used,\notherwise the socket is selected based on routing rules).\n\nDo enable it with caution, it might create troubles on DNS results with\ndifferent transport layer. Better let it be disabled and enable\n\"mhomed\".\n\nDefault value is 0 (disabled).\n\n    ...\n    modparam(\"tm\", \"dns_reuse_rcv_socket\", 1)\n    ...\n                \n\n",
  "xavp_contact": "### xavp_contact (string)\n\nThe name of XAVP storing the attributes per contact. This must be the\nsame as the usrloc parameter `xavp_contact`.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"tm|usrloc\", \"xavp_contact\", \"ulattrs\")\n    ...\n\n",
  "event_callback": "### event_callback (str)\n\nThe name of the function in the kemi configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[tm:local-request\\] block. The function receives a string\nparameter with the name of the event, respectively \"tm:local-request\".\n\n*Default value is 'empty' (no function is executed for events).*\n\n    ...\n    modparam(\"tm\", \"event_callback\", \"ksr_tm_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_tm_event(evname)\n        KSR.info(\"===== tm module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n    ...\n\n",
  "event_callback_lres_sent": "### event_callback_lres_sent (str)\n\nThe name of the function in the kemi configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[tm:local-response\\] block. The function receives a string\nparameter with the name of the event, respectively \"tm:local-response\".\n\n*Default value is 'empty' (no function is executed for events).*\n\n    ...\n    modparam(\"tm\", \"event_callback_lres_sent\", \"ksr_tm_event_response_sent\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_tm_event_response_sent(evname)\n        KSR.info(\"===== tm module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n    ...\n\n",
  "relay_100": "### relay_100 (str)\n\nThis parameter controls whether or not a SIP 100 response is proxied.\nNote that this is not valid behavior when operating in stateful mode per\nRFC 3261 Section 21.1.1, and therefore is useful only when operating as\na stateless proxy. When using this feature, it is possible to control\nwhich 100 responses are proxied and which are not by detecting whether\nthey are part of an existing transaction and setting up the appropriate\nlogic in onreply_route.\n\n*Default value is 0 (disabled).*\n\n    ...\n    modparam(\"tm\", \"relay_100\", 1)\n    ...\n\n",
  "rich_redirect": "### rich_redirect (int)\n\nWhen sending a 3xx class reply, include additional branch info to the\ncontacts such as path vector and branch flags.\n\n- *0* - no extra info is added (default)\n\n- *1* - include branch flags as contact header parameter\n\n- *2* - include path as contact uri Route header\n\nValues may be combined (added).\n\n    ...\n    modparam(\"tm\", \"rich_redirect\", 3)\n    ....\n                \n\n",
  "exec_time_check": "### exec_time_check (int)\n\nDuration in milliseconds for executing transaction failure callbacks and\nfailure_route block after which to do a safety check if transaction is\nstill active.\n\nSet it to 0 in order to disable this check.\n\n*Default value is 5000 (5 seconds).*\n\n    ...\n    modparam(\"tm\", \"exec_time_check\", 0)\n    ...\n\n",
  "reply_relay_mode": "### reply_relay_mode (int)\n\nIf set to 1, a received 200 OK response that was suspeneded is no longer\nforwarded in the transactional context if another final response was\nforward while 200 OK was suspended. Forwarding the 200 OK, even it was\nreceived first, results in overwritting the transaction response buffer\nthat can impact matching of incoming ACKs.\n\nSet it to 0 in order to disable this behaviour and attempt to forward\nsuspended 200 OK in the transaction context. This was the behaviour\nbefore the commit 18410da0.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"tm\", \"reply_relay_mode\", 0)\n    ...\n\n",
  "enable_uac_fr": "### enable_uac_fr (int)\n\nEnable failure route trigger, for uac. This will copy the tm uac into\nuas. Thus, failure route can be triggered even for uac messages.\n\n    ...\n    modparam(\"tm\", \"enable_uac_fr\", 1)\n    ....\n                \n\n",
  "failover_reply_codes": "### failover_reply_codes (string)\n\nThis parameter defines the response codes (only codes \\>= 300 and class\n\\>= 3), which enable dns failover to continue to try next ips when\nprevious one fail. It is a list separated by colons, where you may\ndefine either a single code (e.g. \"code=408\" would accept 408 as an\nadditional response code) or a class of responses, you want to accept\n(e.g. \"class=3\" would accept everything from 300 to 999 as valid\nresponse). (with default behaviour only 503 code or no response from\nprevious one will try next ip).\n\n*Default value is \u201c\u201d*\n\n    ...\n    modparam(\"tm\", \"failover_reply_codes\", \"code=403;code=488;class=5\")\n    ...\n\n"
 },
 "statsc": {
  "interval": "### interval (int)\n\nTimer interval when to record the value for statistics.\n\n*Default value is 900 (15min).*\n\n    ...\n    modparam(\"statsc\", \"interval\", 300)\n    ...\n\n",
  "items": "### items (int)\n\nHow many items to store for each statistic.\n\nNote: it must be set before any 'track' parameter.\n\n*Default value is 100.*\n\n    ...\n    modparam(\"statsc\", \"items\", 200)\n    ...\n\n",
  "track": "### track (str)\n\nSpecify the statistics to track. The parameter can be set many times and\none value can specify many statistics.\n\nThe format is \"rname=sname\", where the rname is the name for report and\nsname is internal Kamailio statistic name.\n\nNext statistics are tracked by default:\n\n- *shm.free* - the internal statistic 'free_size' (from group 'shmem').\n\n- *shm.used* - the internal statistic 'used_size' (from group 'shmem').\n\n- *shm.real_used* - the internal statistic 'real_used_size' (from group\n  'shmem').\n\n*Default value is \"\".*\n\n    ...\n    modparam(\"statsc\", \"track\", \"req.received=rcv_requests\")\n    modparam(\"statsc\", \"track\", \"req.received=rcv_requests;rpl.received=rcv_replies\")\n    ...\n\n"
 },
 "pua_xmpp": {
  "server_address": "### server_address(str)\n\nThe SIP URI specifying the address of the SIP server.\n\n    ...\n    modparam(\"pua_xmpp\", \"server_address\", \"sip:160.23.23.10\")\n    ...\n\n"
 },
 "topos": {
  "storage": "### storage (str)\n\nType of storage, valid types are:\n\n- *db* - Database Backend\n\n- *redis* - Redis Backend\n\n*Default value is \u201cdb\u201d.*\n\n    ...\n    modparam(\"topos\", \"storage\", \"redis\")\n    ...\n\n",
  "db_url": "### db_url (str)\n\nDatabase URL.\n\n*Default value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"topos\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "mask_callid": "### mask_callid (int)\n\nWhether to encode the Call-id: header. Some SIP extensions include the\nCall-id in the SIP message payload or header, so it is safe to not\nencode Call-id in such cases. Well-known extensions such as call\ntransfer or conference join will be added to work with encoded Call-id.\nTopoh module should be loaded with use_mode paramerter set to 1\n\n*Default value is 0 (do not mask).*\n\n    ...\n    modparam(\"topos\", \"mask_callid\", 1)\n    ...\n\n",
  "sanity_checks": "### sanity_checks (int)\n\nIf set to 1, topos module will bind to sanity module in order to perform\nsanity checks over received SIP request. Default sanity checks are done.\nIt is useful to check if received request is well formatted before\nproceeding to encoding/decoding.\n\n*Default value is 0 (do not bind to sanity module).*\n\n    ...\n    modparam(\"topos\", \"sanity_checks\", 1)\n    ...\n\n",
  "branch_expire": "### branch_expire (int)\n\nInterval in seconds after which the branch records are deleted.\n\n*Default value is 180 (3 min).*\n\n    ...\n    modparam(\"topos\", \"branch_expire\", 300)\n    ...\n\n",
  "dialog_expire": "### dialog_expire (int)\n\nInterval in seconds after which the dialog records are deleted. Keep in\nmind that the module does not update the dialog timestamp after the\ninitial call setup on re-INVITEs or other in-dialog messages. So set a\nlarge enough value (according your longest call duration) to prevent\nproblems in re-writing messages. This key is only relevant for INVITE\ndialog. SUBSCRIBE dialog records lifetime are based on value set in\nexpires header. Moreover each re-SUBSCRIBEs update the dialog timestamp.\n\n*Default value is 10800 (3 hours).*\n\n    ...\n    modparam(\"topos\", \"dialog_expire\", 3600)\n    ...\n\n",
  "clean_interval": "### clean_interval (int)\n\nInterval in seconds to run the clean up of stored records.\n\n*Default value is 60 (1 min).*\n\n    ...\n    modparam(\"topos\", \"clean_interval\", 30)\n    ...\n\n",
  "event_callback": "### event_callback (str)\n\nThe name of the function in the KEMI configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[...\\] blocks.\n\nThe function receives a string parameter with the name of the event.\n\n*Default value is 'empty' (no function is executed for events).*\n\n    ...\n    modparam(\"topos\", \"event_callback\", \"ksr_topos_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_topos_event(evname)\n        KSR.info(\"===== topos module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n    ...\n\n",
  "event_mode": "### event_mode (int)\n\nControl what event_route blocks to be executed. It is a bitmask of: 1 -\nexecute event_route\\[topos:msg-outgoing\\]; 2 - execute\nevent_route\\[topos:msg-sending\\]; 4 execute\nevent_route\\[topos:msg-incoming\\]; 8 execute\nevent_route\\[topos:msg-receiving\\];.\n\n*Default value is 3 (execute both event_route blocks).*\n\n    ...\n    modparam(\"topos\", \"event_mode\", 2)\n    ...\n\n",
  "contact_host": "### contact_host (str)\n\nYou may need to control the host part of the Contact header added by\ntopos. If the xavu_field_contact_host parameter is set, this value is\nignored. For example when using TLS with TOPOS the remote UAS must be\nable to open a new TLS socket to the contact header. In this case, the\ncontact header must contain a domain name with a trusted CA signed\ncertitificate.\n\n*Default value is taken from the Record-Route URI.*\n\n    ...\n    modparam(\"topos\", \"contact_host\", \"proxy.domain.com\")\n    ...\n\n",
  "contact_mode": "### contact_mode (int)\n\nControl the mode where the key to lookup the message data from the\ndatabase or redis server is stored. The default is to use the Contact\nuser (0), alternatively a Contact URI parameter can be used (1) with\nvalues from the SIP message, or from AVP variables (2). This can be\nuseful for interoperating which gateways that need a certain user part\nin the Contact URI.\n\nIn mode (1) the a-side contact user is taken from the request URI and\nthe b-side contact user from the Contact header of the processed initial\nSIP request.\n\nIf you use the mode (2), you need to configure the\n*xavu_field_a_contact* and *xavu_field_b_contact* parameter. Furthermore\nyou need to assign values to them during the processing of the initial\nSIP request.\n\nThe name of the Contact URI parameter can be customized with the\n*cparam_name* parameter.\n\n*Default value is 0 - use the Contact user*\n\n    ...\n    modparam(\"topos\", \"contact_mode\", 1)\n    ...\n\n",
  "cparam_name": "### cparam_name (int)\n\nName of the Contact URI parameter to store the database or redis server\nkey for message lookup.\n\nThis parameter is only used when the *contact_mode* parameter is set to\n*1* or *2*.\n\n*Default value is \u201ctps\u201d.*\n\n    ...\n    modparam(\"topos\", \"cparam_name\", \"xyz\")\n    ...\n\n",
  "xavu_cfg": "### xavu_cfg (str)\n\nName of root XAVU to hold config-specific values to be used by module at\nruntime.\n\nNote: this parameter must be set if any other parameter prefixed with\n\\`xavu_field\\_\\` is used.\n\n*Default value is \u201cNULL\u201d (disabled).*\n\n    ...\n    modparam(\"topos\", \"xavu_cfg\", \"_tps_\")\n    modparam(\"topos\", \"xavu_field_a_contact\", \"a_contact\")\n    ...\n        $xavu(_tps_=>a_contact) = \"...\";\n    ...\n\n",
  "xavu_field_a_contact": "### xavu_field_a_contact (str)\n\nName of the field inside root XAVU specifed by \\`xavu_cfg\\` to evaluate\nfor the A-side Contact Header user part. This parameter is only\nnecessary in contact_mode (2).\n\n*Default value is \u201cNULL\u201d (disabled).*\n\n    ...\n    modparam(\"topos\", \"xavu_cfg\", \"_tps_\")\n    modparam(\"topos\", \"xavu_field_a_contact\", \"a_contact\")\n    ...\n        $xavu(_tps_=>a_contact) = \"...\";\n    ...\n\n",
  "xavu_field_b_contact": "### xavu_field_b_contact (str)\n\nName of the field inside root XAVU specifed by \\`xavu_cfg\\` to evaluate\nfor the B-side Contact Header user part. This parameter is only\nnecessary in contact_mode (2).\n\n*Default value is \u201cNULL\u201d (disabled).*\n\n    ...\n    modparam(\"topos\", \"xavu_cfg\", \"_tps_\")\n    modparam(\"topos\", \"xavu_field_b_contact\", \"b_contact\")\n    ...\n        $xavu(_tps_=>b_contact) = \"...\";\n\n    ...\n\n",
  "xavu_field_contact_host": "### xavu_field_contact_host (str)\n\nControl from where to take the host part of the Contact header added by\ntopos. This parameter allows to take the value from an XAVU during\nrun-time, it specifies the field inside XAVU \"xavu_cfg\". If this\nparameter is set, the contact_host parameter is ignored. For example\nwhen using TLS with TOPOS the remote UAS must be able to open a new TLS\nsocket to the contact header. In this case, the contact header must\ncontain a domain name with a trusted CA signed certitificate.\n\n*Default value is empty, not set.*\n\n    ...\n    modparam(\"topos\", \"xavu_cfg\", \"_tps_\")\n    modparam(\"topos\", \"xavu_field_contact_host\", \"contact_host\")\n    ...\n        $xavu(_tps_=>contact_host) = \"kamailio.org\";\n    ...\n\n",
  "rr_update": "### rr_update (int)\n\nIf set to 1, topos module will track and update record route changes on\nre-invite.\n\n*Default value is 0 (do not update record route changes within dialog).*\n\n    ...\n    modparam(\"topos\", \"rr_update\", 1)\n    ...\n\n",
  "context": "### context (str)\n\nSet the global context for topos instance.\n\nThe value has to be maximum 12 characters.\n\n*Default value is \u201cNULL\u201d (disabled).*\n\n    ...\n    modparam(\"topos\", \"context\", \"srvone\")\n    ...\n\n",
  "methods_nocontact": "### methods_nocontact (str)\n\nList of SIP methods to skip adding Contact header for.\n\n*Default value is \u201cBYE,CANCEL,PRACK\u201d.*\n\n    ...\n    modparam(\"topos\", \"methods_nocontact\", \"CANCEL,PRACK\")\n    ...\n\n",
  "header_mode": "### header_mode (int)\n\nList of headers to disable multiple comma separated values inserted in\ncompact form. Altough compact form is RFC compliant this paramter gives\npossibilty to disable compact form header values for UA that don't\nsupport or can't handle it. The following options are available: (1) -\ndisable multiple comma separated values for Via header (2) - disable\nmultiple comma separated values for Record-Route header (4) - disable\nmultiple comma separated values for Route header\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"topos\", \"header_mode\", 1)\n    ...\n\n",
  "methods_noinitial": "### methods_noinitial (str)\n\nList of SIP methods to skip doing topos if it is an intial request (no\nTo-tag).\n\n*Default value is \u201c\u201d (no method).*\n\n    ...\n    modparam(\"topos\", \"methods_noinitial\", \"OPTIONS,NOTIFY\")\n    ...\n\n"
 },
 "msilo": {
  "db_url": "### db_url (string)\n\nDatabase URL.\n\n*Default value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"msilo\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "db_table": "### db_table (string)\n\nThe name of table where to store the messages.\n\n*Default value is \u201csilo\u201d.*\n\n    ...\n    modparam(\"msilo\", \"db_table\", \"silo\")\n    ...\n\n",
  "sc_mid": "### sc_mid (string)\n\nThe name of the column in silo table used to store the message id.\n\nDefault value is \u201cmid\u201d.\n\n    ...\n    modparam(\"msilo\", \"sc_mid\", \"other_mid\")\n    ...\n\n",
  "sc_from": "### sc_from (string)\n\nThe name of the column in silo table, storing the source address.\n\nDefault value is \u201csrc_addr\u201d.\n\n    ...\n    modparam(\"msilo\", \"sc_from\", \"source_address\")\n    ...\n\n",
  "sc_to": "### sc_to (string)\n\nThe name of the column in silo table, storing the destination address.\n\nDefault value is \u201cdst_addr\u201d.\n\n    ...\n    modparam(\"msilo\", \"sc_to\", \"destination_address\")\n    ...\n\n",
  "sc_uri_user": "### sc_uri_user (string)\n\nThe name of the column in silo table, storing the user name.\n\nDefault value is \u201cusername\u201d.\n\n    ...\n    modparam(\"msilo\", \"sc_uri_user\", \"user\")\n    ...\n\n",
  "sc_uri_host": "### sc_uri_host (string)\n\nThe name of the column in silo table, storing the domain.\n\nDefault value is \u201cdomain\u201d.\n\n    ...\n    modparam(\"msilo\", \"sc_uri_host\", \"domain\")\n    ...\n\n",
  "sc_body": "### sc_body (string)\n\nThe name of the column storing the message body in silo table.\n\nDefault value is \u201cbody\u201d.\n\n    ...\n    modparam(\"msilo\", \"sc_body\", \"message_body\")\n    ...\n\n",
  "sc_ctype": "### sc_ctype (string)\n\nThe name of the column in silo table, storing content type.\n\nDefault value is \u201cctype\u201d.\n\n    ...\n    modparam(\"msilo\", \"sc_ctype\", \"content_type\")\n    ...\n\n",
  "sc_exp_time": "### sc_exp_time (string)\n\nThe name of the column in silo table, storing the expire time of the\nmessage.\n\nDefault value is \u201cexp_time\u201d.\n\n    ...\n    modparam(\"msilo\", \"sc_exp_time\", \"expire_time\")\n    ...\n\n",
  "sc_inc_time": "### sc_inc_time (string)\n\nThe name of the column in silo table, storing the incoming time of the\nmessage.\n\nDefault value is \u201cinc_time\u201d.\n\n    ...\n    modparam(\"msilo\", \"sc_inc_time\", \"incoming_time\")\n    ...\n\n",
  "sc_snd_time": "### sc_snd_time (string)\n\nThe name of the column in silo table, storing the send time for the\nreminder.\n\nDefault value is \u201csnd_time\u201d.\n\n    ...\n    modparam(\"msilo\", \"sc_snd_time\", \"send_reminder_time\")\n    ...\n\n",
  "sc_stored_hdrs": "### sc_stored_hdrs (string)\n\nThe name of the column in silo table, storing the extra headers.\n\nDefault value is \u201cextra_hdrs\u201d.\n\n    ...\n    modparam(\"msilo\", \"sc_stored_hdrs\", \"extra_headers\")\n    ...\n\n",
  "from_address": "### from_address (string)\n\nThe SIP address used to inform users that destination of their message\nis not online and the message will be delivered next time when that user\ngoes online. If the parameter is not set, the module will not send any\nnotification. This parameter may contain pseudo-variables.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"msilo\", \"from_address\", \"sip:registrar@example.org\")\n    modparam(\"msilo\", \"from_address\", \"sip:$rU@example.org\")\n    ...\n\n",
  "contact_hdr": "### contact_hdr (string)\n\nThe value of the \u201cContact\u201d header (including header name and ending\n\\r\\n) to be added in notification messages. It can contain\npseudo-variables.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"msilo\", \"contact_hdr\", \"Contact: <sip:null@example.com>\\r\\n\")\n    ...\n\n",
  "extra_hdrs": "### extra_hdrs (string)\n\nExtra headers (each ending with \\r\\n) to be added in messages sent from\nsilo by m_dump. It can contain pseudo-variables.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"msilo\", \"extra_hdrs\", \"X-Extra: $tu\\r\\nY-Extra: foo\\r\\n\")\n    ...\n\n",
  "offline_message": "### offline_message (string)\n\nThe body of the notification message. It can contain pseudo-variables.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"msilo\", \"offline_message\", \"*** User $rU is offline!\")\n    modparam(\"msilo\", \"offline_message\", \"<em>I am offline!</em>\")\n    ...\n\n",
  "content_type_hdr": "### content_type_hdr (string)\n\nThe value of the Content-Type header (including header name and ending\n\\r\\n) to be added in notification messages. It must reflect what the\n'offline_message' contains. It can contain pseudo-variables.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"msilo\", \"content_type_hdr\", \"Content-Type: text/plain\\r\\n\")\n    modparam(\"msilo\", \"content_type_hdr\", \"Content-Type: text/html\\r\\n\")\n    ...\n\n",
  "reminder": "### reminder (string)\n\nThe SIP address used to send reminder messages. If this value is not\nset, the reminder feature is disabled.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"msilo\", \"reminder\", \"sip:registrar@example.org\")\n    ...\n\n",
  "outbound_proxy": "### outbound_proxy (string)\n\nThe SIP address used as next hop when sending the message. Very useful\nwhen using Kamailio with a domain name not in DNS, or when using a\nseparate Kamailio instance for msilo processing. If not set, the message\nwill be sent to the address in destination URI.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"msilo\", \"outbound_proxy\", \"sip:kamailio.org;transport=tcp\")\n    ...\n\n",
  "expire_time": "### expire_time (int)\n\nExpire time of stored messages - seconds. When this time passed, the\nmessage is silently discarded from database.\n\n*Default value is \u201c259200 (72 hours = 3 days)\u201d.*\n\n    ...\n    modparam(\"msilo\", \"expire_time\", 36000)\n    ...\n\n",
  "check_time": "### check_time (int)\n\nTimer interval to check if dumped messages are sent OK - seconds. The\nmodule keeps each request send by itself for a new online user and if\nthe reply is 2xx then the message is deleted from database.\n\n*Default value is \u201c60\u201d.*\n\n    ...\n    modparam(\"msilo\", \"check_time\", 10)\n    ...\n\n",
  "send_time": "### send_time (int)\n\nTimer interval in seconds to check if there are reminder messages. The\nmodule takes all reminder messages that must be sent at that moment or\nbefore that moment.\n\nIf the value is 0, the reminder feature is disabled.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"msilo\", \"send_time\", 60)\n    ...\n\n",
  "clean_period": "### clean_period (int)\n\nNumber of \u201ccheck_time\u201d cycles when to check if there are expired\nmessages in database.\n\n*Default value is \u201c10\u201d.*\n\n    ...\n    modparam(\"msilo\", \"clean_period\", 3)\n    ...\n\n",
  "use_contact": "### use_contact (int)\n\nTurns on/off the usage of the \u201cContact\u201d address to send notification\nback to sender whose message is stored by MSILO.\n\n*Default value is \u201c1 (0 = off, 1 = on)\u201d.*\n\n    ...\n    modparam(\"msilo\", \"use_contact\", 0)\n    ...\n\n",
  "snd_time_avp": "### snd_time_avp (str)\n\nThe name of an AVP which may contain the time when to sent the received\nmessage as reminder. The AVP is used ony by m_store().\n\nIf the parameter is not set, the module does not look for this AVP. If\nthe value is set to a valid AVP name, then the module expects in the AVP\nto be a time value in format \u201cYYYYMMDDHHMMSS\u201d (e.g., 20060101201500).\n\n*Default value is \u201cnull\u201d.*\n\n    ...\n    modparam(\"msilo\", \"snd_time_avp\", \"$avp(i:123)\")\n    ...\n\n",
  "add_date": "### add_date (int)\n\nWhether to add as prefix the date when the message was stored.\n\n*Default value is \u201c1\u201d (1==on/0==off).*\n\n    ...\n    modparam(\"msilo\", \"add_date\", 0)\n    ...\n\n",
  "max_messages": "### max_messages (int)\n\nMaximum number of stored message for an AoR. Value 0 equals to no limit.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"msilo\", \"max_messages\", 0)\n    ...\n\n",
  "add_contact": "### add_contact (int)\n\nWhether to add contact header to generated messages. The contact address\nis the From URI.\n\n*Default value is \u201c0\u201d (1==on; 0==off as per RFC3428).*\n\n    ...\n    modparam(\"msilo\", \"add_contact\", 1)\n    ...\n\n",
  "extra_hdrs_avp": "### extra_hdrs_avp (str)\n\nName of an AVP which may contain extra headers that are stored with the\nmessage when m_store() is called. These extra headers (if any) are then\nincluded in MESSAGE request generated by m_dump().\n\nIf the parameter is not set, m_store() does not look for extra headers\nfrom any AVP.\n\n*Default value is \u201cnull\u201d.*\n\n    ...\n    modparam(\"msilo\", \"extra_hdrs_avp\", \"$avp(msilo_extra_hdrs)\")\n    ...\n\n",
  "skip_notification_flag": "### skip_notification_flag (int)\n\nFlag to mark the message for which no notification should be sent back\nto sender when storing in msilo. Valid value is in between 0 and 31.\n\n*Default value is \u201c-1\u201d (feature disabled).*\n\n    ...\n    modparam(\"msilo\", \"skip_notification_flag\", 18)\n    ...\n    setflag(18);\n    m_store(...);\n    ...\n\n"
 },
 "regex": {
  "file": "### file (string)\n\nText file containing the regular expression groups. It must be set in\norder to enable the group matching function.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"regex\", \"file\", \"/etc/kamailio/regex_groups\")\n    ...\n\n",
  "max_groups": "### max_groups (int)\n\nMax number of regular expression groups in the text file.\n\n*Default value is \u201c20\u201d.*\n\n    ...\n    modparam(\"regex\", \"max_groups\", 40)\n    ...\n\n",
  "group_max_size": "### group_max_size (int)\n\nMax content size of a group in the text file.\n\n*Default value is \u201c8192\u201d.*\n\n    ...\n    modparam(\"regex\", \"group_max_size\", 16384)\n    ...\n\n",
  "pcre_caseless": "### pcre_caseless (int)\n\nIf this options is set, matching is done caseless. It is equivalent to\nPerl's /i option, and it can be changed within a pattern by a (?i) or\n(?-i) option setting.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"regex\", \"pcre_caseless\", 1)\n    ...\n\n",
  "pcre_multiline": "### pcre_multiline (int)\n\nBy default, PCRE treats the subject string as consisting of a single\nline of characters (even if it actually contains newlines). The \"start\nof line\" metacharacter (^) matches only at the start of the string,\nwhile the \"end of line\" metacharacter (\\$) matches only at the end of\nthe string, or before a terminating newline.\n\nWhen this option is set, the \"start of line\" and \"end of line\"\nconstructs match immediately following or immediately before internal\nnewlines in the subject string, respectively, as well as at the very\nstart and end. This is equivalent to Perl's /m option, and it can be\nchanged within a pattern by a (?m) or (?-m) option setting. If there are\nno newlines in a subject string, or no occurrences of ^ or \\$ in a\npattern, setting this option has no effect.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"regex\", \"pcre_multiline\", 1)\n    ...\n\n",
  "pcre_dotall": "### pcre_dotall (int)\n\nIf this option is set, a dot metacharacter in the pattern matches all\ncharacters, including those that indicate newline. Without it, a dot\ndoes not match when the current position is at a newline. This option is\nequivalent to Perl's /s option, and it can be changed within a pattern\nby a (?s) or (?-s) option setting.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"regex\", \"pcre_dotall\", 1)\n    ...\n\n",
  "pcre_extended": "### pcre_extended (int)\n\nIf this option is set, whitespace data characters in the pattern are\ntotally ignored except when escaped or inside a character class.\nWhitespace does not include the VT character (code 11). In addition,\ncharacters between an unescaped \\# outside a character class and the\nnext newline, inclusive, are also ignored. This is equivalent to Perl's\n/x option, and it can be changed within a pattern by a (?x) or (?-x)\noption setting.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"regex\", \"pcre_extended\", 1)\n    ...\n\n"
 },
 "permissions": {
  "default_allow_file": "### default_allow_file (string)\n\nDefault allow file used by the functions with no parameters. If you\ndon't specify a full pathname then the directory in which the main\nconfig file is located will be used.\n\n*Default value is \u201cpermissions.allow\u201d.*\n\n    ...\n    modparam(\"permissions\", \"default_allow_file\", \"/etc/permissions.allow\")\n    ...\n\n",
  "default_deny_file": "### default_deny_file (string)\n\nDefault file containing deny rules. The file is used by functions with\nno parameters. If you don't specify a full pathname then the directory\nin which the main config file is located will be used.\n\n*Default value is \u201cpermissions.deny\u201d.*\n\n    ...\n    modparam(\"permissions\", \"default_deny_file\", \"/etc/permissions.deny\")\n    ...\n\n",
  "check_all_branches": "### check_all_branches (integer)\n\nIf set then allow_routing functions will check Request-URI of all\nbranches (default). If disabled then only Request-URI of the first\nbranch will be checked.\n\n<div class=\"warning\">\n\nDo not disable this parameter unless you really know what you are doing.\n\n</div>\n\n*Default value is 1.*\n\n    ...\n    modparam(\"permissions\", \"check_all_branches\", 0)\n    ...\n\n",
  "allow_suffix": "### allow_suffix (string)\n\nSuffix to be appended to basename to create filename of the allow file\nwhen version with one parameter of either `allow_routing` or\n`allow_register` is used.\n\n<div class=\"note\">\n\nIncluding leading dot.\n\n</div>\n\n*Default value is \u201c.allow\u201d.*\n\n    ...\n    modparam(\"permissions\", \"allow_suffix\", \".allow\")\n    ...\n\n",
  "deny_suffix": "### deny_suffix (string)\n\nSuffix to be appended to basename to create filename of the deny file\nwhen version with one parameter of either `allow_routing` or\n`allow_register` is used.\n\n<div class=\"note\">\n\nIncluding leading dot.\n\n</div>\n\n*Default value is \u201c.deny\u201d.*\n\n    ...\n    modparam(\"permissions\", \"deny_suffix\", \".deny\")\n    ...\n\n",
  "address_file": "### address_file (string)\n\nThis is the name of full path to the file that store rules used by\n`allow_address` function (and its variants). If it is only the file\nname, it is expected to be in the same folder as Kamailio.cfg file.\n\nIf set, this parameter has priority over the database backend, so the\naddress matching records are loaded from the file, not from database.\n\nTo see the format of the file see the section \"Address File Format\".\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"permissions\", \"address_file\", \"address.list\")\n    ...\n\n",
  "db_url": "### db_url (string)\n\nThis is URL of the database to be used to store rules used by\n`allow_trusted` or `allow_address` functions.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"permissions\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "address_table": "### address_table (string)\n\nThe name of the database table containing IP subnets and DNS domain\nnames used by `allow_address` and `allow_source_address` functions.\n\n*Default value is \u201caddress\u201d.*\n\n    ...\n    modparam(\"permissions\", \"address_table\", \"addr\")\n    ...\n\n",
  "grp_col": "### grp_col (string)\n\nName of address table column containing the group identifier of the\naddress.\n\n*Default value is \u201cgrp\u201d.*\n\n    ...\n    modparam(\"permissions\", \"grp_col\", \"group_id\")\n    ...\n\n",
  "ip_addr_col": "### ip_addr_col (string)\n\nName of address table column containing the IP address part of the\naddress.\n\n*Default value is \u201cip_addr\u201d.*\n\n    ...\n    modparam(\"permissions\", \"ip_addr_col\", \"ip_address\")\n    ...\n\n",
  "mask_col": "### mask_col (string)\n\nName of address table column containing the network mask of the address.\nPossible values are 0-32 for IPv4 and 0-128 for IPv6 addresses. If the\nvalue is 0, the network mask is set to 32 for IPv4 addresses and to 128\nfor IPv6 addresses.\n\n*Default value is \u201cmask\u201d.*\n\n    ...\n    modparam(\"permissions\", \"mask_col\", \"subnet_length\")\n    ...\n\n",
  "port_col": "### port_col (string)\n\nName of address table column containing the port part of the address.\n\n*Default value is \u201cport\u201d.*\n\n    ...\n    modparam(\"permissions\", \"port_col\", \"port\")\n    ...\n\n",
  "db_mode": "### db_mode (integer)\n\nDatabase mode. 0 means non-caching, 1 means caching. Valid only for the\n`allow_trusted` function.\n\n*Default value is 0 (non-caching).*\n\n    ...\n    modparam(\"permissions\", \"db_mode\", 1)\n    ...\n\n",
  "trusted_table": "### trusted_table (string)\n\nName of database table containing the matching rules used by the\n`allow_trusted` function.\n\n*Default value is \u201ctrusted\u201d.*\n\n    ...\n    modparam(\"permissions\", \"trusted_table\", \"pbx\")\n    ...\n\n",
  "source_col": "### source_col (string)\n\nName of column in the \u201ctrusted\u201d table containing the source IP address\nthat is matched against source IP address of received request.\n\n*Default value is \u201csrc_ip\u201d.*\n\n    ...\n    modparam(\"permissions\", \"source_col\", \"source_ip_address\")\n    ...\n\n",
  "proto_col": "### proto_col (string)\n\nName of column in the \u201ctrusted\u201d table containing the transport protocol\nthat is matched against transport protocol of the received request.\nPossible values that can be stored in proto_col are \u201cany\u201d, \u201cudp\u201d, \u201ctcp\u201d,\n\u201ctls\u201d, \u201csctp\u201d, \u201cws\u201d, \u201cwss\u201d, and \u201cnone\u201d. Value \u201cany\u201d matches always and\nvalue \u201cnone\u201d never.\n\n*Default value is \u201cproto\u201d.*\n\n    ...\n    modparam(\"permissions\", \"proto_col\", \"transport\")\n    ...\n\n",
  "from_col": "### from_col (string)\n\nName of the column trusted table containing a regular expression that is\nmatched against the From URI.\n\n*Default value is \u201cfrom_pattern\u201d.*\n\n    ...\n    modparam(\"permissions\", \"from_col\", \"regexp\")\n    ...\n\n",
  "ruri_col": "### ruri_col (string)\n\nName of the column trusted table containing a regular expression that is\nmatched against the Request URI.\n\n*Default value is \u201cruri_pattern\u201d.*\n\n    ...\n    modparam(\"permissions\", \"ruri_col\", \"regexp\")\n    ...\n\n",
  "tag_col": "### tag_col (string)\n\nName of the column in the \u201caddress\u201d or \u201ctrusted\u201d table containing a\nstring that is added as value to peer_tag AVP if peer_tag AVP has been\ndefined and if the address or peer matches.\n\n*Default value is \u201ctag\u201d.*\n\n    ...\n    modparam(\"permissions\", \"tag_col\", \"peer_tag\")\n    ...\n\n",
  "priority_col": "### priority_col (string)\n\nThe column name used to store the priority of the corresponding rule\nfrom the database row. Priority values should be integer. When db_mode\nis set to 1 (caching), priorities are ordered from highest to lowest. In\nnon-caching mode, priority order (ASC vs DESC) is determined by\ndatabase.\n\n*Default value is \u201cpriority\u201d.*\n\n    ...\n    modparam(\"permissions\", \"priority_col\", \"column_name\")\n    ...\n\n",
  "peer_tag_avp": "### peer_tag_avp (AVP string)\n\nIf defined, the AVP will be set as a side effect of `allow_trusted` call\nto not NULL tag column value of the matching peer.\n\n*Default value is \u201cundefined\u201d.*\n\n    ...\n    modparam(\"permissions\", \"peer_tag_avp\", \"$avp(i:707)\")\n    ...\n\n",
  "peer_tag_mode": "### peer_tag_mode (integer)\n\nTag mode for `allow_trusted`. \u201c0\u201d sets only the tag of the first match.\n\u201c1\u201d adds the tags of all matches to the avp. In addition the return\nvalue of `allow_trusted` is the number of matches. This parameter is not\nused for address table matching functions.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"permissions\", \"peer_tag_mode\", 1)\n    ...\n\n",
  "max_subnets": "### max_subnets (int)\n\nThe maximum number of subnet addresses to be loaded from address table.\n\n*Default value is \u201c512\u201d.*\n\n    ...\n    modparam(\"permissions\", \"max_subnets\", 1024)\n    ...\n\n",
  "load_backends": "### load_backends (int)\n\nControl what backends should be loaded: 1 - address table; 2 - trusted\ntable; 4 - allow file; 8 - deny file.\n\nIt can be a combination (sum) of the options to load many backends\n(e.g., 3 - loads address and trusted tables).\n\n*Default value is \u201c0xffff\u201d (load all backends).*\n\n    ...\n    modparam(\"permissions\", \"load_backends\", 1)\n    ...\n\n",
  "reload_delta": "### reload_delta (int)\n\nThe number of seconds that have to be waited before executing a new RPC\nreload. By default there is a rate limiting of maximum one reload in\nfive seconds.\n\nIf set to 0, no rate limit is configured. Note carefully: use this\nconfiguration only in tests environments because executing two RPC\nreloads of the same table at the same time can cause Kamailio to crash.\n\n*Default value is \u201c5\u201d.*\n\n    ...\n    modparam(\"permissions\", \"reload_delta\", 1)\n    ...\n            \n\n",
  "trusted_cleanup_interval": "### trusted_cleanup_interval (int)\n\nIf module parameter `db_mode` is set to 1 a cleanup timer is set to the\ntrusted_cleanup_interval value in seconds. This process will cleanup the\nprevious values from memory after a RPC reload.\n\n*Default value is \u201c60\u201d.*\n\n    ...\n    modparam(\"permissions\", \"trusted_cleanup_interval\", 120)\n    ...\n            \n\n"
 },
 "presence_mwi": {
  "default_expires": "### default_expires (int)\n\nThe default expires value used when missing from SUBSCRIBE message (in\nseconds).\n\n*Default value is \u201c3600\u201d.*\n\n                ...\n                modparam(\"presence_mwi\", \"default_expires\", 3600)\n                ...\n                \n\n"
 },
 "print": {
  "str_param": "### str_param (string)\n\nNot used, just an example\n\nDefault value is NULL.\n\n    ...\n    modparam(\"print\", \"str_param\", \"foobar\")\n    ...\n            \n\n",
  "int_param": "### int_param (integer)\n\nNot used, just an example.\n\nDefault value is 0.\n\n    ...\n    modparam(\"print\", \"int_param\", 42)\n    ...\n            \n\n"
 },
 "math": {},
 "topoh": {
  "mask_key": "### mask_key (str)\n\nKeyword to mask the headers.\n\n*Default value is \"\\_static_value\\_\".*\n\n    ...\n    modparam(\"topoh\", \"mask_key\", \"some secret here\")\n    ...\n\n",
  "mask_ip": "### mask_ip (str)\n\nIP address to be used in masked headers to build valid SIP URIs. Can be\nany IP address, even a private-space or non-existing IP address (e.g.,\n192.168.1.1, 127.0.0.2), including the SIP server address, but must not\nbe an address potentially used by clients. It is not used at all for SIP\nrouting.\n\n*Default value is \"127.0.0.8\".*\n\n    ...\n    modparam(\"topoh\", \"mask_ip\", \"192.168.0.1\")\n    ...\n\n",
  "mask_callid": "### mask_callid (integer)\n\nWhether to encode the Call-id: header. Some SIP extensions include the\nCall-id in the SIP message payload or header, so it is safe to not\nencode Call-id in such cases. Well-known extensions such as call\ntransfer or conference join will be added to work with encoded Call-id.\n\nNOTE: if you are using dialog module to terminate calls and this\nparameter is enabled, you must set the dialog module parameter\n'lreq_callee_headers' to include the header: 'TH: dlh\\r\\n'.\n\n*Default value is 0 (do not mask).*\n\n    ...\n    modparam(\"topoh\", \"mask_callid\", 1)\n    ...\n\n",
  "mask_mode": "### mask_mode (integer)\n\nControl when and what parts of SIP message are masked.\n\nIt works as a bitmask value. The following options are available: (1) -\nskip masking Contact headers in 3XX (redirect) replies.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"topoh\", \"mask_mode\", 1)\n    ...\n\n",
  "uparam_name": "### uparam_name (str)\n\nName of URI parameter where to store encoded value.\n\n*Default value is \"line\".*\n\n    ...\n    modparam(\"topoh\", \"uparam_name\", \"myparam\")\n    ...\n\n",
  "uparam_prefix": "### uparam_prefix (str)\n\nPrefix to be added in encoded URI parameters.\n\n*Default value is \"sr-\".*\n\n    ...\n    modparam(\"topoh\", \"uparam_prefix\", \"xyz\")\n    ...\n\n",
  "vparam_name": "### vparam_name (str)\n\nName of Via: parameter used to store encoded value.\n\n*Default value is \"branch\".*\n\n    ...\n    modparam(\"topoh\", \"vparam_name\", \"myv\")\n    ...\n\n",
  "vparam_prefix": "### vparam_prefix (str)\n\nPrefix to be added in encoded Via: parameters.\n\n*Default value is \"z9hG4bKsr-\".*\n\n    ...\n    modparam(\"topoh\", \"vparam_prefix\", \"xyz\")\n    ...\n\n",
  "callid_prefix": "### callid_prefix (str)\n\nPrefix to be added in encoded Call-ID: headers.\n\n*Default value is \"!!:\".*\n\n    ...\n    modparam(\"topoh\", \"callid_prefix\", \"***\")\n    ...\n\n",
  "sanity_checks": "### sanity_checks (integer)\n\nIf set to 1, topoh module will bind to sanity module in order to perform\nsanity checks over received SIP request. Default sanity checks are done.\nIt is useful to check if received request is well formatted before\nproceeding to encoding/decoding.\n\n*Default value is 0 (do not bind to sanity module).*\n\n    ...\n    modparam(\"topoh\", \"sanity_checks\", 1)\n    ...\n\n",
  "uri_prefix_checks": "### uri_prefix_checks (integer)\n\nIf set to 1, topoh module will check if URIs to be decoded match the\nexpected prefix composed from mask IP and parameter name prefix. It can\nmake the topoh processing safer by avoiding to try decoding URIs which\nwere not encoded previously by topoh.\n\nNote: do not enable this option if you have SIP devices that can alter\nthe URI values it takes from Contact or Record-Route headers (like\nadding port 5060 when no port is in received URIs, or that introduces\nnew parameters at an unknown position).\n\n*Default value is 0.*\n\n    ...\n    modparam(\"topoh\", \"uri_prefix_checks\", 1)\n    ...\n\n",
  "event_callback": "### event_callback (str)\n\nThe name of the function in the KEMI configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[...\\] blocks.\n\nThe function receives a string parameter with the name of the event.\n\n*Default value is 'empty' (no function is executed for events).*\n\n    ...\n    modparam(\"topoh\", \"event_callback\", \"ksr_topoh_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_topoh_event(evname)\n        KSR.info(\"===== topoh module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n    ...\n\n",
  "event_mode": "### event_mode (int)\n\nControl what event_route blocks to be executed. It is a bitmask of: 1 -\nexecute event_route\\[topoh:msg-outgoing\\]; 2 - execute\nevent_route\\[topoh:msg-sending\\].\n\n*Default value is 3 (execute both event_route blocks).*\n\n    ...\n    modparam(\"topoh\", \"event_mode\", 2)\n    ...\n\n",
  "use_mode": "### use_mode (int)\n\nControl how the module is initialized. If set to 1, the module is only\ninitialized to be used as a library via inter-module API functions. If\nset to 0, the module is initialized for SIP messages processing.\n\n*Default value is 0 (to process SIP messages).*\n\n    ...\n    modparam(\"topoh\", \"use_mode\", 1)\n    ...\n\n"
 },
 "textops": {},
 "peering": {
  "radius_config": "### radius_config (string)\n\nThis is the location of the configuration file of Radius client\nlibraries.\n\nDefault value is \u201c/usr/local/etc/radiusclient-ng/radiusclient.conf\u201d.\n\n    modparam(\"peering\", \"radius_config\", \"/etc/broker/radiusclient.conf\")\n\n",
  "verify_destination_service_type": "### verify_destination_service_type (integer)\n\nThis is the value of the Service-Type Radius attribute to be used, when\nsender of SIP Request verifies the request's destination using\nverify_destination() function.\n\nDefault value is the dictionary value of \u201cSip-Verify-Destination\u201d\nService-Type.\n\n    modparam(\"peering\", \"verify_destination_service_type\", 21)\n\n",
  "verify_source_service_type": "### verify_source_service_type (integer)\n\nThis is the value of the Service-Type Radius attribute to be used, when\nreceiver of SIP Request verifies the request's source using\nverify_source() function.\n\nDefault value is the dictionary value of \u201cSip-Verify-Source\u201d\nService-Type.\n\n    modparam(\"peering\", \"verify_source_service_type\", 22)\n\n"
 },
 "uid_auth_db": {
  "db_url": "### db_url (string)\n\nThis is URL of the database to be used. Value of the parameter depends\non the database module used. For example for mysql and postgres modules\nthis is something like mysql://username:password@host:port/database. For\ndbtext module (which stores data in plaintext files) it is directory in\nwhich the database resides.\n\nDefault value is \"mysql://serro:47serro11@localhost/ser\".\n\n    modparam(\"auth_db\", \"db_url\", \"mysql://foo:bar@foobar.org/ser\")\n            \n\n",
  "user_column": "### user_column (string)\n\nThis is the name of the column holding usernames. Default value is fine\nfor most people. Use the parameter if you really need to change it.\n\nDefault value is \"username\".\n\n    modparam(\"auth_db\", \"user_column\", \"user\")\n            \n\n",
  "domain_column": "### domain_column (string)\n\nThis is the name of the column holding domains of users. Default value\nis fine for most people. Use the parameter if you really need to change\nit.\n\nDefault value is \"domain\".\n\n    modparam(\"auth_db\", \"domain_column\", \"domain\")\n            \n\n",
  "password_column": "### password_column (string)\n\nThis is the name of the column holding passwords. Passwords can be\neither stored as plain text or pre-calculated HA1 strings. HA1 strings\nare MD5 hashes of username, password, and realm. HA1 strings are more\nsafe because the server doesn't need to know plaintext passwords and\nthey cannot be obtained from HA1 strings.\n\nDefault value is \"ha1\".\n\n    modparam(\"auth_db\", \"password_column\", \"password\")\n            \n\n",
  "rpid_column": "### rpid_column (string)\n\nThis is the name of the column holding information for the\nRemote-Party-ID header field. Default value is fine for most people. Use\nthe parameter if you really need to change it.\n\nDefault value is \"rpid\".\n\n    modparam(\"auth_db\", \"rpid_column\", \"remote_party_id\")\n            \n\n",
  "calculate_ha1": "### calculate_ha1 (integer)\n\nThis parameter tells server whether it should read plaintext password\nfrom the database or HA1 string. If the parameter is set to 1 then the\nserver will assume that the column pointed to by `plain_password_column`\ncontains plaintext passwords and it will calculate HA1 strings on the\nfly.\n\nIf the parameter is set to 0 then the server assumes that the database\ncontains HA1 strings directly and will not calculate them. In this case\nit will use value of `password_column` as name of column with HA1\npassword. If username parameter of credentials contains also @domain\n(some user agents put domain in username parameter), then column pointed\nto by `password_column_2` parameter will be used instead. This column\nshould also contain HA1 strings but they should be calculated including\nthe domain in the username parameter (as opposed to `password_column`\nwhich (when containing HA1 strings) should always contains HA1 strings\ncalculated without domain in username.\n\nThis ensures that the authentication will always work when using\npre-calculated HA1 string, not depending on the presence of the domain\nin username.\n\nDefault value of this parameter is 0.\n\n    modparam(\"auth_db\", \"calculate_ha1\", 1)\n            \n\n",
  "plain_password_column": "### plain_password_column (string)\n\nThis parameter holds the name of column holding plain text password.\nThis column is used when calculate_ha1 is set.\n\nDefault value is \"password\".\n\n    modparam(\"auth_db\", \"plain_password_column\", \"password\")\n            \n\n",
  "password_column_2": "### password_column_2 (string)\n\nAs described in the previous section this parameter contains name of\ncolumn holding pre-calculated HA1 string that were calculated including\nthe domain in the username. This parameter is used only when\n`calculate_ha1` is set to 0 and user agent send a credentials containing\nthe domain in the username.\n\nDefault value of the parameter is ha1b.\n\n    modparam(\"auth_db\", \"password_column_2\", \"ha1_2\")\n            \n\n",
  "use_rpid": "### use_rpid (integer)\n\nThis parameter specifies whether the server should fetch a value for the\nRemote-Party-ID header field from the database.\n\nIf the parameter is set to 1 the server expects to find a value for this\nheader in the column specified by the `rpid_column` parameter.\n\nDefault value of this parameter is 0.\n\n    modparam(\"auth_db\", \"use_rpid\", 1)\n            \n\n"
 },
 "maxfwd": {
  "max_limit": "### max_limit (integer)\n\nSet an upper limit for the max-forward value in the outgoing requests.\nIf the header is present, the decremented value is not allowed to exceed\nthis max_limits - if it does, the header value will by decreased to\n\u201cmax_limit\u201d.\n\nNote: This check is done when calling the maxfwd_process() function.\n\nThe range of values stretches from 1 to 256, which is the maximum\nMAX-FORWARDS value allowed by RFC 3261. The value can be changed at\nruntime.\n\n*Default value is \u201c70\u201d.*\n\n    ...\n    modparam(\"maxfwd\", \"max_limit\", 32)\n    ...\n\n"
 },
 "dialplan": {
  "db_url": "### db_url (string)\n\nThe translation rules will be loaded using this database URL.\n\n*Default value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"dialplan\", \"db_url\", \"mysql://user:passwd@localhost/db\")\n    ...\n            \n\n",
  "table_name": "### table_name (string)\n\nThe name of the database table used to load the translation rules.\n\n*Default value is \u201cdialplan\u201d.*\n\n    ...\n    modparam(\"dialplan\", \"table_name\", \"my_table\")\n    ...\n            \n\n",
  "dpid_col": "### dpid_col (string)\n\nThe column name used to store the dialplan group ID.\n\n*Default value is \u201cdpid\u201d.*\n\n    ...\n    modparam(\"dialplan\", \"dpid_col\", \"column_name\")\n    ...\n            \n\n",
  "pr_col": "### pr_col (string)\n\nThe column name used to store the priority of the corresponding rule\nfrom the database row.\n\n*Default value is \u201cpr\u201d.*\n\n    ...\n    modparam(\"dialplan\", \"pr_col\", \"column_name\")\n    ...\n            \n\n",
  "match_op_col": "### match_op_col (string)\n\nThe column name used to store the type of matching of the rule.\n\n*Default value is \u201cmatch_op\u201d.*\n\n    ...\n    modparam(\"dialplan\", \"match_op_col\", \"column_name\")\n    ...\n            \n\n",
  "match_exp_col": "### match_exp_col (string)\n\nThe column name to store the rule match expression.\n\n*Default value is \u201cmatch_exp\u201d.*\n\n    ...\n    modparam(\"dialplan\", \"match_exp_col\", \"column_name\")\n    ...\n            \n\n",
  "match_len_col": "### match_len_col (string)\n\nThe column name to store the length of a string matching the match\nexpression.\n\n*Default value is \u201cmatch_len\u201d.*\n\n    ...\n    modparam(\"dialplan\", \"match_len_col\", \"column_name\")\n    ...\n            \n\n",
  "subst_exp_col": "### subst_exp_col (string)\n\nThe column name to store the rule's substitution expression.\n\n*Default value is \u201csubst_exp\u201d.*\n\n    ...\n    modparam(\"dialplan\", \"subst_exp_col\", \"column_name\")\n    ...\n            \n\n",
  "repl_exp_col": "### repl_exp_col (string)\n\nThe column name to store the rule's replacement expression.\n\n*Default value is \u201crepl_exp\u201d.*\n\n    ...\n    modparam(\"dialplan\", \"repl_exp_col\", \"column_name\")\n    ...\n            \n\n",
  "attrs_col": "### attrs_col (string)\n\nThe column name to store the rule's attributes to be set after match\n(see `attrs_pvar` )\n\n*Default value is \u201cattrs\u201d.*\n\n    ...\n    modparam(\"dialplan\", \"attrs_col\", \"column_name\")\n    ...\n            \n\n",
  "attrs_pvar": "### attrs_pvar (string)\n\nThe pseudovariable used to store the rule's attributes, after\ntranslation (when `dp_translate`() succeeds). This parameter can be an\n\u201cAVP\u201d or a script variable (\u201c\\$var()\u201d)..\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"dialplan\", \"attrs_pvar\", \"$avp(s:dest)\")\n    ...\n            \n\n",
  "fetch_rows": "### fetch_rows (int)\n\nThe number of rows to be fetched at once from database\n\n*Default value is \u201c1000\u201d.*\n\n    ...\n    modparam(\"dialplan\", \"fetch_rows\", 4000)\n    ...\n            \n\n",
  "match_dynamic": "### match_dynamic (int)\n\nIf set to 1, the match and substitution expressions can include script\nvariables and their values are evaluated at runtime.\n\nDuring the loading process, the values that contain variables are no\nlonger pre-compiled to PCRE structure in memory, because the values\nchange at runtime, thus expect slightly slower performances. Values\nwithout script variables are pre-compiled even if this parameter is\nenabled.\n\n*Default value is \u201c0\u201d (disabled).*\n\n    ...\n    modparam(\"dialplan\", \"match_dynamic\", 1)\n    ...\n            \n\n",
  "append_branch": "### append_branch (int)\n\nIf set to 1, the module appends a new outgoing branch when request URI\n(r-uri) or its user part are changed by dp_translate() or dp_replace()\ninside a failure_route block. Set it to 0 if the branch should not be\nadded.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"dialplan\", \"append_branch\", 0)\n    ...\n            \n\n",
  "reload_delta": "### reload_delta (int)\n\nThe number of seconds that have to be waited before executing a new\nreload of dialplan rules. By default there is a rate limiting of maximum\none reload in five seconds.\n\nIf set to 0, no rate limit is configured. Note carefully: use this\nconfiguration only in tests environments because executing two dialplan\nreloads at the same time can cause to kamailio to crash.\n\n*Default value is \u201c5\u201d.*\n\n    ...\n    modparam(\"dialplan\", \"reload_delta\", 1)\n    ...\n            \n\n"
 },
 "ss7ops": {},
 "app_perl": {
  "filename": "### filename (string)\n\nThis is the file name of your script. This may be set once only, but it\nmay include an arbitrary number of functions and \u201cuse\u201d as many Perl\nmodule as necessary.\n\n*Must not be empty!*\n\n    ...\n    modparam(\"app_perl\", \"filename\", \"/home/test/kamailio/myperl.pl\")\n    ...\n\n",
  "modpath": "### modpath (string)\n\nThe path to the Perl modules included (Kamailio.pm et.al). It is not\nabsolutely crucial to set this path, as you *may* install the Modules in\nPerl's standard path, or update the \u201c%INC\u201d variable from within your\nscript. Using this module parameter is the standard behavior, though.\nMultiple paths may be specified by separating them with a \u201c:\u201d character.\nThe maximum is 10 paths.\n\n    ...\n    modparam(\"app_perl\", \"modpath\", \"/usr/local/lib/kamailio/perl/\")\n    ...\n\n",
  "reset_cycles": "### reset_cycles (int)\n\nThe number of execution cycles after which the embedded perl interpreter\nis reset. Sometimes is hard to track the scope of variables in all used\nperl modules and that can result in leaks of system memory. Resetting\nthe interpreter cleans the memory space.\n\nWhen the interpreter is reset, the perl script is loaded again. Note\nthat not all Kamailio processes will reset the interpreter at the same\ntime. Each will do it when it has executed the script for the number of\nreset_cycles. Also, be aware that the reset of the interpreter is taking\na bit of time (in the order of tens of milliseconds).\n\nDefault value is *0* - never reset the interpreter.\n\n    ...\n    modparam(\"app_perl\", \"reset_cycles\", 100000)\n    ...\n\n",
  "perl_destroy_func": "### perl_destroy_func (string)\n\nThe name of Perl function to be executed before the interpreter is\nre-initialized (reset -- see reset_cycles parameter) at runtime. This\ncould be useful to clean global variables or file descriptors from the\nPerl script.\n\n    ...\n    modparam(\"app_perl\", \"perl_destroy_func\", \"my_perl_destroy\")\n    ...\n\n",
  "parse_mode": "### parse_mode (int)\n\nControl how to behave on perl_parse() return code - on some versions it\nis the value for application exit and can break reloading.\n\nIf set to 0, continue even of perl_parse() returns non-zero, logging a\nwarning. If set to 1, reload fails on non-zero return code and triggers\nan exit.\n\nDefault value is *0*.\n\n    ...\n    modparam(\"app_perl\", \"parse_mode\", 1)\n    ...\n\n",
  "warn_mode": "### warn_mode (int)\n\nAllows to enable warning for perl_parse(). If set to 1, \"-w\" is passed\nto perl_parse() and detected warnings in the Perl script should be\nprinted to the log. If set to 1, then \"-W\" is passed to perl_parse().\n\nDefault value is *0*.\n\n    ...\n    modparam(\"app_perl\", \"warn_mode\", 1)\n    ...\n\n"
 },
 "rtp_media_server": {
  "log_file_name": "### log_file_name (string)\n\noRTP and MediaStreamer2 log file settings the log mask is not\nconfigurable : MESSAGE \\| WARNING \\| ERROR \\| FATAL levels are\nactivated.\n\nDefault value is not-set (no logging to file).\n\n    ...\n    modparam(\"rtp_media_server\", \"log_file_name\", \"/var/log/rms/rms_ortp.log\")\n    ...\n            \n\n"
 },
 "auth_ephemeral": {
  "secret": "### secret (string)\n\nThe shared secret to use for generating credentials. This parameter can\nbe set multiple times - this enables the secret used for new credentials\nto be changed without causing existing credentials to stop working. The\nlast secret set is the first that will be tried.\n\n    ...\n    modparam(\"auth_ephemeral\", \"secret\", \"kamailio_rules\")\n    ...\n\n",
  "username_format": "### username_format (integer)\n\nThe format of the username in the web-service response.\n\n- 0 (deprecated - pre IETF draft format) - \\<username parameter from the\n  request\\>:\\<timestamp\\>\n\n- 1 (default - IETF draft format) - \\<timestamp\\>:\\<username parameter\n  from the request\\>\n\n<!-- -->\n\n    ...\n    modparam(\"auth_ephemeral\", \"username_format\", 0)\n    ...\n\n",
  "sha_algorithm": "### sha_algorithm (integer)\n\nThe SHA algorithm to be used for the Hash.\n\n- 0 - SHA1 (default, as per IETF/RFC)\n\n- 1 - SHA256\n\n- 2 - SHA384\n\n- 3 - SHA512\n\n<!-- -->\n\n    ...\n    modparam(\"auth_ephemeral\", \"sha_algorithm\", 2)\n    ...\n\n"
 },
 "dialog": {
  "enable_stats": "### enable_stats (integer)\n\nIf statistics support should be enabled or not. Via statistics\nvariables, the module provides information about the dialog processing.\nSet it to zero to disable or to non-zero to enable it.\n\n*Default value is \u201c1 (enabled)\u201d.*\n\n    ...\n    modparam(\"dialog\", \"enable_stats\", 0)\n    ...\n\n",
  "hash_size": "### hash_size (integer)\n\nThe size of the hash table internally used to keep the dialogs. A larger\ntable is much faster but consumes more memory. The hash size must be a\npower of two.\n\nIMPORTANT: If dialog information should be stored in a database, a\nconstant hash_size should be used, otherwise the restoring process will\nnot take place. If you really want to modify the hash_size, you must\ndelete all table's rows before restarting the server.\n\n*Default value is \u201c4096\u201d.*\n\n    ...\n    modparam(\"dialog\", \"hash_size\", 1024)\n    ...\n\n",
  "rr_param": "### rr_param (string)\n\nName of the Record-Route parameter used to store the dialog cookie. It\nis used for the fast matching of sequential requests to tracked dialogs.\n\n*Default value is \u201cdid\u201d.*\n\n    ...\n    modparam(\"dialog\", \"rr_param\", \"xyz\")\n    ...\n\n",
  "dlg_flag": "### dlg_flag (integer)\n\nFlag to be used for marking if a dialog should be constructed for the\ncurrent request (this makes sense only for initial requests).\n\nNote: it is not needed to set this parameter and its corresponding flag\nfor initial request in case the \u201cdlg_manage()\u201d function is used. In\nother words, using \u201cdlg_manage()\u201d alone is enough.\n\n*Default value is \u201cnone\u201d.*\n\n    ...\n    modparam(\"dialog\", \"dlg_flag\", 4)\n    ...\n\n",
  "timeout_avp": "### timeout_avp (string)\n\nThe specification of an AVP that contains a custom timeout value (in\nseconds) for the dialog. It may be used only in a request (initial or\nsequential) context.\n\n*Default value is \u201cnone\u201d.*\n\n    ...\n    modparam(\"dialog\", \"timeout_avp\", \"$avp(i:10)\")\n    ...\n\n",
  "default_timeout": "### default_timeout (integer)\n\nThe default dialog timeout (in seconds), in the absence of a custom\nvalue provided in an AVP.\n\n*Default value is \u201c43200 (12 hours)\u201d.*\n\n    ...\n    modparam(\"dialog\", \"default_timeout\", 21600)\n    ...\n\n",
  "early_timeout": "### early_timeout (integer)\n\nThe timeout (in seconds) after which the dialogs in unconfirmed or early\nstate (no final response received) are destroyed.\n\n*Default value is \u201c300 (5 minutes)\u201d.*\n\n    ...\n    modparam(\"dialog\", \"early_timeout\", 180)\n    ...\n\n",
  "noack_timeout": "### noack_timeout (integer)\n\nThe timeout (in seconds) after which the dialogs which were answered\nwith 200 OK but didn't receive the ACK are marked for termination (the\nlifetime is set to 10 more seconds).\n\n*Default value is \u201c60 (1 minute)\u201d.*\n\n    ...\n    modparam(\"dialog\", \"noack_timeout\", 90)\n    ...\n\n",
  "end_timeout": "### end_timeout (integer)\n\nThe timeout (in seconds) after which the dialogs in terminated state are\ndestroyed.\n\n*Default value is \u201c300 (5 minutes)\u201d.*\n\n    ...\n    modparam(\"dialog\", \"end_timeout\", 180)\n    ...\n\n",
  "dlg_extra_hdrs": "### dlg_extra_hdrs (string)\n\nA string containing the extra headers (full format, with EOH) to be\nadded to requests generated locally by the module (like BYEs).\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"dialog\", \"dlg_extra_hdrs\", \"Hint: credit expired\\r\\n\")\n    ...\n\n",
  "dlg_match_mode": "### dlg_match_mode (integer)\n\nHow the sequential requests should be matched against the known dialogs.\nThe modes are a combination of matching based on a cookie (DID) stored\nas cookie in Record-Route header and matching based on SIP elements (as\nin RFC 3261).\n\nNote: DID-based matching does not replace callid/fromtag/totag\ncomparison. It will speed up dialog matching by not iterating over the\nwhole dialog list for callid/fromtag/totag comparison, but instead it\nuses a hash table to find the respective dialog and then doing only one\ncallid/fromtag/totag comparison. Thus, there is no security issue when\nusing DID based matching. Use DID_FALLBACK for maximum interoperability\nor use DID_ONLY to reject buggy clients or hacking attempts. DID_NONE is\nonly useful, when you want to hide dialog-tracking from the users\n(preventing the DID Record-Route cookie).\n\nThe supported modes are:\n\n- *0 - DID_ONLY* - the match is done exclusively based on DID;\n\n- *1 - DID_FALLBACK* - the match is first tried based on DID and if not\n  present, it will fall back to SIP matching;\n\n- *2 - DID_NONE* - the match is done exclusively based on SIP elements;\n  no DID information is added in RR.\n\n*Default value is \u201c0 (DID_ONLY)\u201d.*\n\n    ...\n    modparam(\"dialog\", \"dlg_match_mode\", 1)\n    ...\n\n",
  "detect_spirals": "### detect_spirals (integer)\n\nWhether spirals (i.e., messages routed through the proxy multiple times)\nshould be detected.\n\nIf set to 0, spirals will not be detected and result in the generation\nof a new, possibly dangling dialog structure per occurring spiral. If\nset to 1, spirals are detected and internally mapped to existing dialog\nstructures.\n\nDefault value is 1.\n\n    ...\n    modparam(\"dialog\", \"detect_spirals\", 1)\n    ...\n                \n\n",
  "db_url": "### db_url (string)\n\nIn order to store information about dialogs in a database, a database\nURL must be specified.\n\n*Default value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"dialog\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "db_mode": "### db_mode (integer)\n\nMode of synchronisation of dialog information from memory to an\nunderlying database (if desired):\n\nThe supported modes are:\n\n- *0 - NO_DB* - the memory content is not flushed into DB;\n\n- *1 - REALTIME* - any dialog information changes will be reflected into\n  the database immediately.\n\n- *2 - DELAYED* - the dialog information changes will be flushed into DB\n  periodically, based on a timer routine.\n\n- *3 - SHUTDOWN* - the dialog information will be flushed into DB only\n  at shutdown - no runtime updates.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dialog\", \"db_mode\", 1)\n    ...\n\n",
  "db_update_period": "### db_update_period (integer)\n\nThe interval (seconds) at which to update dialogs' information, if the\nserver is configured to store the dialog information at a given\ninterval. A too short interval will generate intensive database\noperations, while an excessively long one will miss dialogs with a short\nlifetime.\n\n*Default value is \u201c60\u201d seconds.*\n\n    ...\n    modparam(\"dialog\", \"db_update_period\", 120)\n    ...\n\n",
  "db_fetch_rows": "### db_fetch_rows (integer)\n\nThe number of the rows to be fetched at once from database when loading\nthe dialog records at startup from the database. This value can be used\nto tune the load time at startup. For 1MB of private memory (default),\nit should be below 400. The database driver must support the\nfetch_result() capability. A value of 0 means the database fetch is not\nlimited.\n\n*Default value is \u201c200\u201d.*\n\n    ...\n    modparam(\"dialog\", \"db_fetch_rows\", 500)\n    ...\n\n",
  "db_skip_load": "### db_skip_load (integer)\n\nSet db_skip_load to 1, to skip the loading of dialog data from the\ndatabase.\n\n*Default value is \u201c0\u201d ( not skipped ).*\n\n    ...\n    modparam(\"dialog\", \"db_skip_load\", 1)\n    ...\n\n",
  "table_name": "### table_name (string)\n\nDatabase table name used for storing dialog information.\n\n*Default value is \u201cdialog\u201d.*\n\n    ...\n    modparam(\"dialog\", \"table_name\", \"my_dialog\")\n    ...\n\n",
  "call_id_column": "### call_id_column (string)\n\nThe column name in the database to store the dialog call-id.\n\n*Default value is \u201ccallid\u201d.*\n\n    ...\n    modparam(\"dialog\", \"call_id_column\", \"callid_c_name\")\n    ...\n\n",
  "from_uri_column": "### from_uri_column (string)\n\nThe column name in the database to store the caller's SIP address (URI).\n\n*Default value is \u201cfrom_uri\u201d.*\n\n    ...\n    modparam(\"dialog\", \"from_uri_column\", \"from_uri_c_name\")\n    ...\n\n",
  "from_tag_column": "### from_tag_column (string)\n\nThe column name in the database to store the From header tag from the\nINVITE request.\n\n*Default value is \u201cfrom_tag\u201d.*\n\n    ...\n    modparam(\"dialog\", \"from_tag_column\", \"from_tag_c_name\")\n    ...\n\n",
  "to_uri_column": "### to_uri_column (string)\n\nThe column name in the database to store the callee's SIP address (URI).\n\n*Default value is \u201cto_uri\u201d.*\n\n    ...\n    modparam(\"dialog\", \"to_uri_column\", \"to_uri_c_name\")\n    ...\n\n",
  "to_tag_column": "### to_tag_column (string)\n\nThe column name in the database to store the To header tag from the 200\nOK response to the INVITE request, if present.\n\n*Default value is \u201cto_tag\u201d.*\n\n    ...\n    modparam(\"dialog\", \"to_tag_column\", \"to_tag_c_name\")\n    ...\n\n",
  "from_cseq_column": "### from_cseq_column (string)\n\nThe column name in the database to store the Cseq from caller side.\n\n*Default value is \u201ccaller_cseq\u201d.*\n\n    ...\n    modparam(\"dialog\", \"from_cseq_column\", \"from_cseq\")\n    ...\n\n",
  "to_cseq_column": "### to_cseq_column (string)\n\nThe column name in the database to store the cseq from callee side.\n\n*Default value is \u201ccallee_cseq\u201d.*\n\n    ...\n    modparam(\"dialog\", \"to_cseq_column\", \"to_cseq\")\n    ...\n\n",
  "from_route_column": "### from_route_column (string)\n\nThe column name in the database to store the route records from caller\nside (proxy to caller).\n\n*Default value is \u201ccaller_route_set\u201d.*\n\n    ...\n    modparam(\"dialog\", \"from_route_column\", \"rroute_from\")\n    ...\n\n",
  "to_route_column": "### to_route_column (string)\n\nThe column name in the database to store the route records from callee\nside (proxy to callee).\n\n*Default value is \u201ccallee_route_set\u201d.*\n\n    ...\n    modparam(\"dialog\", \"to_route_column\", \"rroute_to\")\n    ...\n\n",
  "from_contact_column": "### from_contact_column (string)\n\nThe column name in the database to store the caller's contact uri.\n\n*Default value is \u201ccaller_contact\u201d.*\n\n    ...\n    modparam(\"dialog\", \"from_contact_column\", \"from_contact_uri\")\n    ...\n\n",
  "to_contact_column": "### to_contact_column (string)\n\nThe column name in the database to store the callee's contact uri.\n\n*Default value is \u201ccallee_contact\u201d.*\n\n    ...\n    modparam(\"dialog\", \"to_contact_column\", \"to_contact_uri\")\n    ...\n\n",
  "from_sock_column": "### from_sock_column (string)\n\nThe column name in the database to store the information about the local\ninterface receiving the traffic from caller.\n\n*Default value is \u201ccaller_sock\u201d.*\n\n    ...\n    modparam(\"dialog\", \"from_sock_column\", \"socket_from\")\n    ...\n\n",
  "to_sock_column": "### to_sock_column (string)\n\nThe column name in the database to store information about the local\ninterface receiving the traffic from callee.\n\n*Default value is \u201ccallee_sock\u201d.*\n\n    ...\n    modparam(\"dialog\", \"to_sock_column\", \"socket_to\")\n    ...\n\n",
  "h_id_column": "### h_id_column (string)\n\nThe column name in the database to store the dialogs' hash id\ninformation.\n\n*Default value is \u201chash_id\u201d.*\n\n    ...\n    modparam(\"dialog\", \"h_id_column\", \"hash_id_c_name\")\n    ...\n\n",
  "h_entry_column": "### h_entry_column (string)\n\nThe column name in the database to store the dialog's hash entry\ninformation.\n\n*Default value is \u201chash_entry\u201d.*\n\n    ...\n    modparam(\"dialog\", \"h_entry_column\", \"h_entry_c_name\")\n    ...\n\n",
  "state_column": "### state_column (string)\n\nThe column name in the database to store the dialog's state information.\n\n*Default value is \u201cstate\u201d.*\n\n    ...\n    modparam(\"dialog\", \"state_column\", \"state_c_name\")\n    ...\n\n",
  "start_time_column": "### start_time_column (string)\n\nThe column name in the database to store the dialog's start time\ninformation.\n\n*Default value is \u201cstart_time\u201d.*\n\n    ...\n    modparam(\"dialog\", \"start_time_column\", \"start_time_c_name\")\n    ...\n\n",
  "timeout_column": "### timeout_column (string)\n\nThe column name in the database to store the dialog's timeout.\n\n*Default value is \u201ctimeout\u201d.*\n\n    ...\n    modparam(\"dialog\", \"timeout_column\", \"timeout_c_name\")\n    ...\n\n",
  "sflags_column": "### sflags_column (string)\n\nThe column name in the database to store the dialog script flags.\n\n*Default value is \u201csflags\u201d.*\n\n    ...\n    modparam(\"dialog\", \"sflags_column\", \"s_flags\")\n    ...\n\n",
  "toroute_name_column": "### toroute_name_column (string)\n\nThe column name in the database to store the index of the route to be\nexecuted at timeout.\n\n*Default value is \u201ctoroute_name\u201d.*\n\n    ...\n    modparam(\"dialog\", \"toroute_name_column\", \"timeout_route\")\n    ...\n\n",
  "vars_table_name": "### vars_table_name (string)\n\nIf you want to store the dialog variables (\u201c\\$dlg_var(name)\u201d) for a\ndialog in a database a table name must be specified.\n\n*Default value is \u201cdialog_vars\u201d.*\n\n    ...\n    modparam(\"dialog\", \"vars_table_name\", \"my_dialog_vars\")\n    ...\n\n",
  "vars_h_id_column": "### vars_h_id_column (string)\n\nThe column name in the database to store the dialog's hash id\ninformation (as a reference to the dialog table).\n\n*Default value is \u201chash_id\u201d.*\n\n    ...\n    modparam(\"dialog\", \"vars_h_id_column\", \"vars_h_id_name\")\n    ...\n\n",
  "vars_h_entry_column": "### vars_h_entry_column (string)\n\nThe column name in the database to store the dialog's hash entry\ninformation (as a reference to the dialog table).\n\n*Default value is \u201chash_entry\u201d.*\n\n    ...\n    modparam(\"dialog\", \"vars_h_entry_column\", \"vars_h_entry_name\")\n    ...\n\n",
  "vars_key_column": "### vars_key_column (string)\n\nThe column name in the database to store the names (keys) of a dialog\nvariable.\n\n*Default value is \u201cdialog_key\u201d.*\n\n    ...\n    modparam(\"dialog\", \"vars_key_column\", \"vars_key_name\")\n    ...\n\n",
  "vars_value_column": "### vars_value_column (string)\n\nThe column name in the database to store the values of a dialog\nvariable.\n\n*Default value is \u201cdialog_value\u201d.*\n\n    ...\n    modparam(\"dialog\", \"vars_value_column\", \"vars_value_name\")\n    ...\n\n",
  "profiles_with_value": "### profiles_with_value (string)\n\nList of names for profiles with values, separated with semi-colon \";\".\n\n*Default value is \u201cempty\u201d.*\n\n    ...\n    modparam(\"dialog\", \"profiles_with_value\", \"caller ; my_profile\")\n    ...\n\n",
  "profiles_no_value": "### profiles_no_value (string)\n\nList of names for profiles without values, separated with semi-colon\n\";\".\n\n*Default value is \u201cempty\u201d.*\n\n    ...\n    modparam(\"dialog\", \"profiles_no_value\", \"inbound ; outbound\")\n    ...\n\n",
  "bridge_controller": "### bridge_controller (string)\n\nSIP address to be used in From header when initiating a call bridge.\n\n*Default value is \u201csip:controller@kamailio.org\u201d.*\n\n    ...\n    modparam(\"dialog\", \"bridge_controller\", \"sip:ctd@kamailio.org\")\n    ...\n\n",
  "bridge_contact": "### bridge_contact (string)\n\nSIP address to be used in Contact header when doing a call bridge.\n\n*Default value is \u201csip:controller@kamailio.org:5060\u201d.*\n\n    ...\n    modparam(\"dialog\", \"bridge_contact\", \"sip:ctd@127.0.0.1:5060\")\n    ...\n\n",
  "initial_cbs_inscript": "### initial_cbs_inscript (int)\n\nIf the initial dialog callbacks (i.e., DLGCB_CREATED and DLGCB_SPIRALED)\nshould be executed in-script or post-script. If dlg_manage() is not\nused, the setting of this parameter does not matter; otherwise, initial\ncallbacks will be executed directly after dlg_manage() is called if this\nparameter is enabled. If it is disabled, initial callback execution will\nbe postponed until configuration script execution completes.\n\nThe supported values are:\n\n- *0 - POST-SCRIPT* - execute initial callbacks after the script\n  completes;\n\n- *1 - IN-SCRIPT* - execute initial callbacks during script execution,\n  i.e., right after dlg_manage() is called;\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"dialog\", \"initial_cbs_inscript\", 0)\n    ...\n\n",
  "send_bye": "### send_bye (int)\n\nIf set to 1, BYE requests will be sent out for each dialog that timed\nout. It is an alternative to \\$dlg_ctx(timeout_bye)=1 for all dialogs.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dialog\", \"send_bye\", 1)\n    ...\n\n",
  "dlg_filter_mode": "### dlg_filter_mode (int)\n\nSet dialog fitering mode, which can specify what dialogs are processed.\nIts value can be a combination (the sum) of following flags:\n\n- *1* - do not send keepalives and do not execute timeout function if\n  dialog is not local (if the associated bind address is not a local\n  socket).\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dialog\", \"dlg_filter_mode\", 1)\n    ...\n\n",
  "wait_ack": "### wait_ack (int)\n\nIf set to 1, dialog will be kept a bit longer in memory in order to\nabsorb the ACK negative replies of initial INVITE. If not, the dialog is\ndestroyed when negative reply is sent out (less internal complexity).\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"dialog\", \"wait_ack\", 0)\n    ...\n\n",
  "ka_timer": "### ka_timer (int)\n\nKeep-alive timer step - how often to execute the callback to send dialog\nkeep alives (SIP OPTIONS requests within dialog). The value represents\nthe number of seconds.\n\n*Default value is \u201c0\u201d (no keep alive).*\n\n    ...\n    modparam(\"dialog\", \"ka_timer\", 10)\n    ...\n\n",
  "ka_interval": "### ka_interval (int)\n\nThe interval between keep alives within dialog (SIP OPTIONS requests),\nsent to caller or callee. The keep alive request will be sent by the\nfirst callback fired by KA timer after the ka_interval elapsed from\ndialog setup or previous keep-alive. The value represents the number of\nseconds.\n\nIf the requests times out (generating a 408) or if the UA responds with\n481 the lifetime is set to 10 seconds. When lifetime expires the dialog\nwill be terminated. Any other response (including error responses) will\nreset the timers.\n\n*Default value is \u201c0\u201d (no keep alive). The lowest settable interval is\n30 seconds.*\n\n    ...\n    modparam(\"dialog\", \"ka_interval\", 300)\n    ...\n\n",
  "ka_failed_limit": "### ka_failed_limit (int)\n\nThe number of failed keep-alive requests that is accepted before\ngenerating a dialog timeout.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"dialog\", \"ka_failed_limit\", 5)\n    ...\n\n",
  "timeout_noreset": "### timeout_noreset (int)\n\nIf set to 1, the dialog timeout won't be reset each time a sequential\nrequest is processed. It is an alternative to\ndlg_set_property(\"timeout-noreset\") for all dialogs.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dialog\", \"timeout_noreset\", 1)\n    ...\n\n",
  "timer_procs": "### timer_procs (int)\n\nIf set to 1, the dialog module will start a separate dialog timer\nprocess to execute dialog timeout tasks. The default is to use the core\ntimer process.\n\n*Default value is \u201c0\u201d (use core timer process).*\n\n    ...\n    modparam(\"dialog\", \"timer_procs\", 1)\n    ...\n\n",
  "enable_dmq": "### enable_dmq (int)\n\nIf set to 1, the dialog will be synced via dmq. For now, only very basic\ndialog info is shared, just enough to have synced profiles. Notably, it\nis not possible to send in-dialog requests on any but the original proxy\ninstance.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dialog\", \"enable_dmq\", 1)\n    ...\n\n",
  "track_cseq_updates": "### track_cseq_updates (int)\n\nEnable the callbacks for tracking if CSeq number needs to be updated. It\nis the case when the INVITE has to be authenticated to downstream\nprovider using uac_auth() from uac module.\n\nThis is done only for requests in downstream direction. The CSeq\ndifference is stored in \\$dlg_var(cseq_diff), be sure this variable is\nnot overwritten via config operation.\n\n*Default value is \u201c0\u201d (disabled).*\n\n    ...\n    modparam(\"dialog\", \"track_cseq_updates\", 1)\n    ...\n\n",
  "lreq_callee_headers": "### lreq_callee_headers (string)\n\nSIP headers to be added when sending local generated requests (e.g.,\nBYE) to callee. It can be useful when you use topoh module with call-id\nmasking (see the docs of topoh module).\n\n*Default value is \u201cnull\u201d.*\n\n    ...\n    modparam(\"dialog\", \"lreq_callee_headers\", \"TH: dlh\\r\\n\")\n    ...\n\n",
  "event_callback": "### event_callback (str)\n\nThe name of the function in the kemi configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[...\\] blocks.\n\nThe function receives a string parameter with the name of the event, the\nvalues are: 'dialog:start', 'dialog:end', 'dialog:failed'. It is also\nexecuted if '\\$dlg_ctx(timeout_route)' is set, the callback function\nbeing executed with the variable value as parameter.\n\n*Default value is 'empty' (no function is executed for events).*\n\n    ...\n    modparam(\"dialog\", \"event_callback\", \"ksr_dialog_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_dialog_event(evname)\n        KSR.info(\"===== dialog module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n    ...\n\n",
  "h_id_start": "### h_id_start (int)\n\nSet the offset to be used for generating dialog internal hash id. If set\nto -1, the h_id_start is set to the value of the server_id global\nparameter.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dialog\", \"h_id_start\", 5)\n    ...\n\n",
  "h_id_step": "### h_id_step (int)\n\nSet the step to increment the dialog internal hash id.\n\nIf the value is greater than 1, the internal hash id is generated with\nthe rule: h_id_start + N \\* h_id_step. The first value of N is randomly\nselected at startup, then incremented by 1 for each new dialog. Setting\nh_id_start and h_id_step to non-default values should be done when using\ndlg_db_load_callid(...) or dlg_db_load_extra() to load dialog records\ngenerated by another Kamailio instance. Pay attention to ensure that\nthose Kamailio instances are not going to generate overlapping dialog\nhash id values by using different h_id_start and the same h_id_step\n(h_id_step has to be greater than the maximum value of h_id_start).\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"dialog\", \"h_id_step\", 10)\n    ...\n\n",
  "keep_proxy_rr": "### keep_proxy_rr (string)\n\nWhether to keep the record-route header added by the proxy. When\nenabled, it will keep this proxy's record-route header from the reply.\nThe result is that generated requests like the BYE from the dlg_end_dlg\nmi function will pass through the proxy (looped).\n\nValid values are:\n\n- *0* - Don't keep any proxy Record-Route headers\n\n- *1* - Keep Record-route headers for the callee leg\n\n- *2* - Keep Record-route headers for the caller leg\n\n- *3* - Keep Record-route headers for both legs\n\nDefault value is\n\n0\n\n.\n\n    ...\n    modparam(\"dialog\", \"keep_proxy_rr\", 1)\n    ...\n\n",
  "bye_early_code": "### bye_early_code (int)\n\nThis parameter defines the reply-code being used for dialogs being\nterminated in early stage (e.g. before 200 OK/ACK).\n\nDefault value is\n\n480\n\n.\n\n    ...\n    modparam(\"dialog\", \"bye_early_code\", 503)\n    ...\n\n",
  "bye_early_reason": "### bye_early_reason (string)\n\nThis parameter defines the reply-reason being used for dialogs being\nterminated in early stage (e.g. before 200 OK/ACK).\n\nDefault value is\n\nTemporarily Unavailable\n\n.\n\n    ...\n    modparam(\"dialog\", \"bye_early_reason\", \"Call terminated\")\n    ...\n\n",
  "dlg_ctxiuid_mode": "### dlg_ctxiuid_mode (int)\n\nSet dialog context iuid mode, which can specify additional cases when\nthe internal unique id should be set:\n\n- *1* - set it when processing CANCEL requests.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dialog\", \"dlg_ctxiuid_mode\", 1)\n    ...\n\n",
  "debug_variables": "### debug_variables (int)\n\nActivate additional debugging for printing internal lists for dialog\nvariables. This output is only visible at debug log level and should\nonly be used for debugging. By default it is deactivated.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"dialog\", \"debug_variables\", 1)\n    ...\n\n"
 },
 "sanity": {
  "default_checks": "### default_checks (integer)\n\nThis parameter determines which of the checks from the sanity module are\nexecuted if no parameter was given to the `sanity_check` function call.\nBy default all implemented checks are included in the execution of the\n`sanity_check` function. The integer value is the sum of the check\nnumbers which should be executed by default.\n\nDefault value is \u201c3047\u201d. This resolves to the following list of checks:\nruri_sip_version (1), ruri_scheme (2), required_headers (4), cseq_method\n(32), cseq_value (64), content_length (128), expires_value (256),\nproxy_require (512), digest credentials (2048).\n\n    ...\n    modparam(\"sanity\", \"default_checks\", 1)\n    ...\n            \n\n",
  "uri_checks": "### uri_checks (integer)\n\nThis parameter determines which URIs are going to be checked if the\n'parse uri' will be executed.\n\nDefault value is 7. This resolves to the following list of parsed URIs:\nRequest URI (1), From URI (2) and To URI (4). Additionally the Contact\nURI can be also checked (8).\n\n    ...\n    modparam(\"sanity\", \"uri_checks\", 3)\n    ...\n            \n\n",
  "proxy_require": "### proxy_require (string)\n\nThis parameter sets the list of supported SIP extensions for this\nKamailio. The value is expected as a comma separated list (leading and\ntrailing whitespaces are stripped from each token) of extensions. This\nlist is separated into single tokens. Each token from a proxy require\nheader will be compared with the tokens from this list.\n\n    ...\n    modparam(\"sanity\", \"proxy_require\", \"foo, bar\")\n    ...\n            \n\n",
  "autodrop": "### autodrop (integer)\n\nThis parameter controls whether the module drops the SIP message\nautomatically if the sanity checks fail. Default value is 1 (auto drop).\nIf set to 0, sanity_check() function will return -1 (false) to\nconfiguration file, allowing to write log messages for example - be sure\nyou \u201cexit\u201d execution of config without sending a SIP reply because it is\nsent by module itself.\n\n    ...\n    modparam(\"sanity\", \"autodrop\", 1)\n    ...\n            \n\n",
  "noreply": "### noreply (int)\n\nIf set to 1, then the module does not send a SIP reply internally in\ncase there is an error detected when performing the sanity checks. There\nis the option to send the reply from config file with functions from sl\nor tm module as well as sanity_reply() from this module.\n\nDefault value: 0.\n\n    ...\n    modparam(\"sanity\", \"noreply\", 1)\n    ...\n            \n\n"
 },
 "lwsc": {
  "protocol": "### protocol (str)\n\nThe websocket sub-protocol.\n\n*Default value is \"kmsg\".*\n\n    ...\n    modparam(\"lwsc\", \"protocol\", \"ksr\")\n    ...\n\n",
  "timeout_init": "### timeout_init (int)\n\nThe interval in microseconds to wait for websocket connection to be\ninitialized.\n\n*Default value is 2000000 (2 seconds).*\n\n    ...\n    modparam(\"lwsc\", \"timeout_init\", 4000000)\n    ...\n\n",
  "timeout_read": "### timeout_read (int)\n\nThe interval in microseconds to wait for the response of the\nlwsc_request() group of functions.\n\n*Default value is 2000000 (2 seconds).*\n\n    ...\n    modparam(\"lwsc\", \"timeout_init\", 1000000)\n    ...\n\n",
  "verbosity": "### verbosity (int)\n\nControl the verbosity of debug messages on libwebsockets events, higher\nvalue means more debug messages. It has to be a positive number,\ncurrently 2 or higher results in maximum verbosity.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"lwsc\", \"verbosity\", 1)\n    ...\n\n"
 },
 "memcached": {
  "servers": "### servers (str)\n\nThe servers to connect to. At the moment only one server is supported.\n\n*Default value is \u201clocalhost:11211\u201d.*\n\n    ...\n    modparam(\"memcached\", \"servers\", \"localhost:11211\")\n    ...\n                \n\n",
  "expire": "### expire (integer)\n\nThe default expire value of entries in memcached in seconds. The maximal\nvalue is 2592000 (about 30 days). A value of zero means that no\nautomatic expiration is done, memcached will then delete the least used\nitems when the cache gets full.\n\nPlease note that memcached implements lazy caching, that means items are\nonly deleted when they requested (they are of course not delivered to\nthe client), or on insertion of new entries when the cache is full.\nItems can also be deleted before there expire time when the available\nspace in memory is exhausted.\n\nIt is possible to override this default value when adding a key with the\n*mct* pseudo-variable, or later on by setting a different timeout for an\nexisting key with the *mctex* pseudo-variable.\n\n*Default value is \u201c10800\u201ds (3h).*\n\n    ...\n    modparam(\"memcached\", \"expire\", 10800)\n    ...\n\n",
  "mode": "### mode (integer)\n\nThe used storage mode for the memcached module for write access to the\nhash table. A value of \u201c0\u201d means to set (overwrite) the old value, with\na value of \u201c1\u201d the module will not overwrite it. Here every entry to the\nhash table could be written only once, subsequent inserts will fail.\n\n*Default value is \u201c0\u201d (overwrite).*\n\n    ...\n    modparam(\"memcached\", \"mode\", 0)\n    ...\n\n",
  "timeout": "### timeout (integer)\n\nThe timeout for the memcache servers access in milliseconds.\n\n*Default value is \u201c5000\u201d (5s).*\n\n    ...\n    modparam(\"memcached\", \"timeout\", 10000)\n    ...\n                \n\n",
  "memory": "### memory (integer)\n\nThe memory mode for the memcached client library. The library can use\nthe system memory manager or the internal memory manager from Kamailio.\nThe system memory manager configuration is the default, most\nimplementations (like other projects) probably use this approach as\nwell. The internal memory configuration should be faster and protects\nbetter against memory leaks that could bring down your server, as the\navailable memory pool is limited by the Kamailio configuration.\n\n*Default value is \u201c0\u201d (use system memory manager).*\n\n    ...\n    modparam(\"memcached\", \"memory\", 1)\n    ...\n                \n\n",
  "stringify": "### stringify (integer)\n\nThe string mode for the memcached module. By default the module checks\nthe flags for each returned value from the memcached library to decide\nto evaluate it as string or numerical value. If you need\ninteroperability with existing applications that are not able to set\nthis flag, you can force the module to evaluate all values as strings.\n\n*Default value is \u201c0\u201d (don't force string values).*\n\n    ...\n    modparam(\"memcached\", \"stringify\", 1)\n    ...\n                \n\n"
 },
 "ims_ocs": {},
 "misctest": {
  "memory": "### memory (int)\n\nInitialize for memory testing. Set it to 1 to prepare the memory\ntesting.\n\nDefault: 0 (off).\n\n    ...\n    modparam(\"misctest\", \"memory\", 1)\n    ...\n                \n\n",
  "mem_check_content": "### mem_check_content (int)\n\nWhen doing the tests, check also for the possibility of the memory being\noverwritten. When activated, the allocated memory will be filled with a\nspecial pattern, that will be checked on free.\n\nDefault: 0 (off).\n\nIt can be changed also at runtime, via the rpc interface.\n\n    ...\n    modparam(\"misctest\", \"mem_check_content\", 1)\n    ...\n                \n\n    ...\n    $ kamcmd cfg.seti misctest mem_check_content 1\n    ...\n                \n\n",
  "message": "### message (int)\n\nInitialize and perform message testing.\n\nDefault: 0 (off).\n\n    ...\n    modparam(\"misctest\", \"message\", 1)\n    ...\n                \n\n",
  "message_data": "### message_data (str)\n\nSet SIP message data for testing.\n\nDefault: NULL (not set).\n\n    ...\n    modparam(\"misctest\", \"message_data\", \"...\")\n    ...\n                \n\n",
  "message_file": "### message_file (str)\n\nSet path to file from where to read SIP message data for testing.\n\nDefault: NULL (not set).\n\n    ...\n    modparam(\"misctest\", \"message_file\", \"/tmp/sip-data.txt\")\n    ...\n                \n\n"
 },
 "pv_headers": {
  "xavi_name": "### xavi_name (string)\n\nName of the XAVI where the collected headers are stored.\n\n*Default value is \u201cheaders\u201d.*\n\n    ...\n    modparam(\"pv_headers\", \"xavi_name\", \"headers\")\n    ...\n\nResult: \\$xavi(headers\\[0\\]=\\>From) \\$xavi(headers\\[0\\]=\\>To)\n\\$xavi(headers\\[0\\]=\\>Call-ID)\n\n",
  "header_value_size": "### header_value_size (int)\n\nDefines an internal maximum SIP header value size. Header values longer\nthan this setting will be stripped down when collected or applied.\n\n*Default value is 1024.*\n\n    ...\n    modparam(\"pv_headers\", \"header_value_size\", 512)\n    ...\n\n",
  "header_collect_flag": "### header_collect_flag (int)\n\nUsed to mark that headers are collected for the SIP message, leading to\nsubsequent headers collection on this message to be declined with an\nerror. Should be used only in branches and replies.\n\n*Default value is 27.*\n\n    ...\n    modparam(\"pv_headers\", \"header_collect_flag\", 17)\n    ...\n\n",
  "header_apply_flag": "### header_apply_flag (int)\n\nUsed to mark that headers are applied for the SIP message, leading to\nsubsequent headers applies on this message to be declined with an error.\nShould be used only in branches and replies.\n\n*Default value is 28.*\n\n    ...\n    modparam(\"pv_headers\", \"header_apply_flag\", 18)\n    ...\n\n",
  "skip_headers": "### skip_headers (string)\n\nA comma separated headers list that must be excluded from processing\n(they are skipped when [pvh_apply_headers()](#) changes the SIP message\nheaders).\n\nIf the parameter is set to an empty string then all the SIP message\nheaders are processed.\n\n*Default value is\n\u201cRecord-Route,Via,Route,Content-Length,Max-Forwards,CSeq\u201d.*\n\n    ...\n    modparam(\"pv_headers\", \"skip_headers\", \"Record-Route,Via,Route\")\n    ...\n\n",
  "split_headers": "### split_headers (string)\n\nA comma separated headers list that must be split into multi headers if\ntheir value is a comma separated list.\n\nIf the parameter is set to an empty string then no headers are split.\n\n*Default value is \u201c\u201d.*\n\n    ...\n    modparam(\"pv_headers\", \"split_headers\", \"Diversion\")\n    ...\n\nResult: Received Diversion header: Diversion:\n\\<user1@test.local\\>,\\<user2@test.local\\>,\\<user3@test.local\\> After\nsplit: Diversion: \\<user1@test.local\\> Diversion: \\<user2@test.local\\>\nDiversion: \\<user3@test.local\\>\n\nBecomes handy if used together with [pvh_modify_header()](#) or\n[pvh_remove_header()](#) to change or remove value 2 for instance.\n\n",
  "auto_msg": "### auto_msg (int)\n\nDefines whether the headers are automatically collected for incoming\nmessages, as well as automatically applied for forwarded messages.\n\nIt is enabled by default and requires the 'tm' module to be loaded,\notherwise the mode is disabled and manual invocation of\n[pvh_collect_headers()](#)/[pvh_apply_headers()](#) is required.\n\n*Default value is 1 (enabled).*\n\n    ...\n    modparam(\"pv_headers\", \"auto_msg\", 1)\n    ...\n\n"
 },
 "ratelimit": {
  "timer_interval": "### timer_interval (integer)\n\nThe initial length of a timer interval in seconds. All amounts of\nmessages have to be divided by this timer to get a messages per second\nvalue.\n\nIMPORTANT: A too small value may lead to performance penalties due to\ntimer process overloading.\n\n*Default value is 10.*\n\n    ...\n    modparam(\"ratelimit\", \"timer_interval\", 5)\n    ...\n\n",
  "queue": "### queue (integer:string)\n\nThe format of the queue parameter is \"pipe_no:method\". For each defined\nmethod, the algorithm defined by pipe number \"pipe_no\" will be used.\n\nTo specify a queue that accepts all methods, use \u201c\\*\u201d instead of METHOD.\nAs queues are matched against request methods, you will usually want to\nhave this as the last queue added or other queues with specific methods\nwill never match. At this time, glob or regexp patterns are not\nsupported.\n\n    ...\n    # assign pipe no 0 to method REGISTER\n    # assign pipe no 3 to method INVITE\n    # assign pipe no 2 to all other methods\n    modparam(\"ratelimit\", \"queue\", \"0:REGISTER\")\n    modparam(\"ratelimit\", \"queue\", \"3:INVITE\")\n    modparam(\"ratelimit\", \"queue\", \"2:*\")\n    ...\n\n",
  "pipe": "### pipe (integer:string:integer)\n\nThe format of the pipe param is \"pipe_no:algorithm:limit\". For each\ndefined pipe, the given algorithm with the given limit will be used.\n\nA pipe is characterised by its algorithm and limit (bandwidth, in ipfw\nterms). When specifying a limit, the unit depends on the algorithm used\nand doesn't need to be specified also (eg, for TAILDROP or RED, limit\nmeans packets/sec, whereas with the FEEDBACK algorithm, it means \\[CPU\\]\nload factor).\n\n    ...\n    # define pipe 0 with a limit of 200 pkts/sec using TAILDROP algorithm\n    # define pipe 1 with a limit of 100 pkts/sec using RED algorithm\n    # define pipe 2 with a limit of 50 pkts/sec using TAILDROP algorithm\n    # define pipe 3 with a limit of load factor 80 using FEEDBACK algorithm\n    # define pipe 4 with a limit of 10000 pending bytes in the rx_queue\n    #                                     using NETWORK algorithm\n    modparam(\"ratelimit\", \"pipe\", \"0:TAILDROP:200\")\n    modparam(\"ratelimit\", \"pipe\", \"1:RED:100\")\n    modparam(\"ratelimit\", \"pipe\", \"2:TAILDROP:50\")\n    modparam(\"ratelimit\", \"pipe\", \"3:FEEDBACK:80\")\n    modparam(\"ratelimit\", \"pipe\", \"4:NETWORK:10000\")\n    ...\n\n"
 },
 "prefix_route": {
  "db_url": "### db_url (string)\n\nThis is URL of the database to be used.\n\nDefault value is \"mysql://ser@localhost/ser\"\n\n    ...\n    modparam(\"prefix_route\", \"db_url\", \"mysql://ser:pass@db_host/ser\")\n    ...\n                \n\n",
  "db_table": "### db_table (string)\n\nThe name of table where to read prefix route set.\n\nDefault value is \"prefix_route\".\n\n    ...\n    modparam(\"prefix_route\", \"db_table\", \"new_prefix_route\")\n    ...\n                \n\n",
  "exit": "### exit (int)\n\nIf set, exit the execution of the configuration file when a route block\nis executed upon matching a prefix. Otherwise return 1 (true).\n\nDefault value is 1 (on).\n\n    ...\n    modparam(\"prefix_route\", \"exit\", 0)\n    ...\n                \n\n"
 },
 "mangler": {
  "contact_flds_separator": "### contact_flds_separator (string)\n\nFirst char of this parameter is used as a separator for\nencoding/decoding Contact headers. If you set this parameter to \"-\",\nthen an encoded URI will look like\n\"sip:user-password-ip-port-protocol@PublicIP\"\n\n<div class=\"warning\">\n\nThe first character of this field must be set to a value which is not\nused inside username, password or other fields of contact. Otherwise it\nis possible for the decoding step to fail/produce wrong results.\n\n</div>\n\nDefault value is \"\\*\".\n\n    ...\n    modparam(\"mangler\", \"contact_flds_separator\", \"-\")\n    ...\n            \n\n"
 },
 "ims_registrar_pcscf": {
  "pcscf_uri": "### pcscf_uri (string)\n\nURI of this Proxy-CSCF.\n\n    ...\n    modparam(\"ims_registrar_pcscf\", \"pcscf_uri\", \"pcscf.mnc001.mcc001.3gppnetwork.org\")\n    ...\n            \n\n",
  "pending_reg_expires": "### pending_reg_expires (int)\n\nHow long (in seconds), until pending (uncomplete) Registrations expire\n\n*Default value is 30.*\n\n    ...\n    modparam(\"ims_registrar_pcscf\", \"pending_reg_expires\", 15)\n    ...\n            \n\n",
  "received_avp": "### received_avp (string)\n\nAVP, holding the received information (optional)\n\n    ...\n    modparam(\"ims_registrar_pcscf\", \"received_avp\", \"$avp(i:42)\")\n    ...\n            \n\n",
  "is_registered_fallback2ip": "### is_registered_fallback2ip (int)\n\nDefines, whether a contact should be searched by its Contact: only or\nalternatively by the received IP-Address.\n\nThe option may have the following values:\n\n- *0* Search by Contact-Header only\n\n- *1* Search by Contact-Header, if this fails, search by Received\n  Information (IP, Port, Proto)\n\n- *2* Search by Received Information (IP, Port, Proto), if this fails,\n  Search by Contact Header\n\nThis Parameter is primarily used by the \"is_registered\" function.\n\n*Default value is 0 (Contact only).*\n\n    ...\n    modparam(\"ims_registrar_pcscf\", \"is_registered_fallback2ip\", 2)\n    ...\n            \n\n",
  "publish_reginfo": "### publish_reginfo (int)\n\nIf set to \"1\", the module will send PUBLISH regarding changes of the\nregistration (e.g. due to Rx-Information) towards the network core.\n\n*Default value is 0 (Do not send PUBLISH).*\n\n    ...\n    modparam(\"ims_registrar_pcscf\", \"publish_reginfo\", 1)\n    ...\n            \n\n",
  "subscribe_to_reginfo": "### subscribe_to_reginfo (int)\n\nIf set to \"1\", the module will send a SUBSCRIBE for the registration\nstatus towards the network core.\n\n*Default value is 0 (Do not send SUBSCRIBE).*\n\n    ...\n    modparam(\"ims_registrar_pcscf\", \"subscribe_to_reginfo\", 1)\n    ...\n            \n\n",
  "subscription_expires": "### subscription_expires (int)\n\nHow long should the subscription of reg-info towards the packet-core be\nvalid?\n\n*Default value is 3600.*\n\n    ...\n    modparam(\"ims_registrar_pcscf\", \"subscription_expires\", 7200)\n    ...\n            \n\n",
  "ignore_contact_rxport_check": "### ignore_contact_rxport_check (int)\n\nValidate, if the port, from which the request was received, is the same\nas used during registration.\n\nThis Parameter is primarily used by the \"is_registered\" function.\n\n*Default value is 0 (do not ignore Ports).*\n\n    ...\n    modparam(\"ims_registrar_pcscf\", \"ignore_contact_rxport_check\", 1)\n    ...\n            \n\n",
  "ignore_reg_state": "### ignore_reg_state (int)\n\nValidate, if the found contact is really and completely registered.\n\nThis Parameter is primarily used by the \"is_registered\" function.\n\n*Default value is 0 (do not ignore registration state).*\n\n    ...\n    modparam(\"ims_registrar_pcscf\", \"ignore_reg_state\", 1)\n    ...\n            \n\n",
  "force_icscf_uri": "### force_icscf_uri (string)\n\nInstead of doing a DNS-Lookup on the domain, always send the requests to\na specific I-CSCF.\n\n*Default value is not set, do the DNS-Lookup.*\n\n    ...\n    modparam(\"ims_registrar_pcscf\", \"force_icscf_uri\", \"sip:icscf.mnc001.mcc001.3gppnetwork.org\")\n    ...\n            \n\n",
  "reginfo_queue_size_threshold": "### reginfo_queue_size_threshold (int)\n\nAs reginfo operations are processed asynchronously, this parameter\ndefines at what length of the queue, the length should be logged (in\norder to determine overload)\n\n*Default value is 0 (do not log queue length).*\n\n    ...\n    modparam(\"ims_registrar_pcscf\", \"reginfo_queue_size_threshold\", 42)\n    ...\n            \n\n"
 },
 "gzcompress": {
  "header_name": "### header_name (str)\n\nName of the header that indicates compression or decompression has to be\ndone.\n\n*Default value is \"Content-Encoding\".*\n\n    ...\n    modparam(\"gzcompress\", \"header_name\", \"Encoded\")\n    ...\n\n",
  "header_value": "### header_value (str)\n\nValue of the header that indicates compression or decompression has to\nbe done.\n\n*Default value is \"deflate\".*\n\n    ...\n    modparam(\"gzcompress\", \"header_value\", \"gzip\")\n    ...\n\n",
  "sanity_checks": "### sanity_checks (integer)\n\nIf set to 1, gzcompress module will bind to sanity module in order to\nperform sanity checks over received SIP request. Default sanity checks\nare done. It is useful to check if received request is well formatted\nbefore proceeding to encoding/decoding.\n\n*Default value is 0 (do not bind to sanity module).*\n\n    ...\n    modparam(\"gzcompress\", \"sanity_checks\", 1)\n    ...\n\n"
 },
 "presence": {
  "db_url": "### db_url(str)\n\nThe database url.\n\nIf set, the module is a fully operational presence server. Otherwise, it\nis used as a 'library', for its exported functions.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"presence\", \"db_url\",\n        \"mysql://kamailio:kamailiorw@localhost/kamailio\")\n    ...\n\n",
  "presentity_table": "### presentity_table(str)\n\nThe name of the db table where PUBLISH presence information is stored.\n\n*Default value is \u201cpresentity\u201d.*\n\n    ...\n    modparam(\"presence\", \"presentity_table\", \"presentity\")\n    ...\n\n",
  "active_watchers_table": "### active_watchers_table(str)\n\nThe name of the db table where active subscription information is\nstored.\n\n*Default value is \u201cactive_watchers\u201d.*\n\n    ...\n    modparam(\"presence\", \"active_watchers_table\", \"active_watchers\")\n    ...\n\n",
  "watchers_table": "### watchers_table(str)\n\nThe name of the db table where subscription states are stored.\n\n*Default value is \u201cwatchers\u201d.*\n\n    ...\n    modparam(\"presence\", \"watchers_table\", \"watchers\")\n    ...\n\n",
  "clean_period": "### clean_period (int)\n\nThe period in seconds between checks if there are expired messages\nstored in the database.\n\n*Default value is \u201c100\u201d. A zero or negative value disables this\nactivity.*\n\n    ...\n    modparam(\"presence\", \"clean_period\", 100)\n    ...\n\n",
  "cseq_offset": "### cseq_offset (int)\n\nThe allowed offset between server and client cseq.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"presence\", \"cseq_offset\", 1)\n    ...\n\n",
  "db_update_period": "### db_update_period (int)\n\nThe period at which to synchronize cached subscriber info with the\ndatabase.\n\n*Default value is \u201c100\u201d. A zero or negative value disables\nsynchronization.*\n\n    ...\n    modparam(\"presence\", \"db_update_period\", 100)\n    ...\n\n",
  "waitn_time": "### waitn_time (int)\n\nThe maximum time period that NOTIFY requests will be buffered for. The\nserver will attempt to send NOTIFY requests within many seconds of a\nchange occurring.\n\nNote: this parameter is only used when notifier_processes is greater\nthan 0. When notifier_processes is less than or equal to 0 NOTIFY\nrequests are sent immediately.\n\n*Default value is \u201c5\u201d.*\n\n    ...\n    modparam(\"presence\", \"waitn_time\", 10)\n    ...\n\n",
  "notifier_poll_rate": "### notifier_poll_rate (int)\n\nThe number of times per second that the notifier processes should check\nfor work. Approximately 1/(waitn_time \\* notifier_poll_rate \\*\nnotifier_processes) of the pending updates will be sent each time a\nnotifier process runs.\n\nSeparate notifier processes are only run when subs_db_mode is 3 (DB only\nmode).\n\n*Default value is \u201c10\u201d.*\n\n    ...\n    modparam(\"presence\", \"notifier_poll_rate\", 20)\n    ...\n\n",
  "notifier_processes": "### notifier_processes (int)\n\nThe number of notifier processes that should be started.\n\nSeparate notifier processes are only run when subs_db_mode is 3 (DB only\nmode).\n\nNote: setting this parameter to 0 when subs_db_mode is 3 keeps the old\nbehaviour (sending NOTIFY requests immediately). This (old) behaviour is\ndisabled by default in DB only mode because under load, when lots of\nNOTIFY requests can be sent on a dialog at the same time, there are race\nconditions which result in CSeq re-use.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"presence\", \"notifier_processes\", 2)\n    ...\n\n",
  "force_delete": "### force_delete (int)\n\nEnabling this parameter will delete expired presentity records without\nupdating watchers.\n\nSet this parameter to \u201c1\u201d to enable.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"presence\", \"force_delete\", 1)\n    ...\n\n",
  "startup_mode": "### startup_mode (int)\n\nSetting this parameter to 0 will provide startup related backward\ncompatibility for some modules. Setting to 0 fixes presentity requests\nwith low expires (e.g. time() + 1)\n\nSet this parameter to \u201c0\u201d to enable backward compatibility.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"presence\", \"startup_mode\", 0)\n    ...\n\n",
  "expires_offset": "### expires_offset (int)\n\nThe value in seconds that should be subtracted from the expires value\nwhen sending a 200OK for a publish. It is used for forcing the client to\nsend an update before the old publish expires.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"presence\", \"expires_offset\", 10)\n    ...\n\n",
  "max_expires": "### max_expires (int)\n\nThe maximum admissible expires value for PUBLISH/SUBSCRIBE message (in\nseconds).\n\n*Default value is \u201c3600\u201d.*\n\n    ...\n    modparam(\"presence\", \"max_expires\", 3600)\n    ...\n\n",
  "min_expires": "### min_expires (int)\n\nThe minimum admissible expires value for PUBLISH/SUBSCRIBE message (in\nseconds).\n\nIf \\> 0 then min_expires_action parameter determines the response.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"presence\", \"min_expires\", 1800)\n    ...\n\n",
  "min_expires_action": "### min_expires_action (int)\n\nThe action to take when UA sends an expires value less than min_expires.\n\n- 1 : RFC Compliant, returns \u201c423 Interval Too Brief\u201d\n\n- 2 : forces the min_expires value in the subscription\n\nIf \\> 0 then min_expires_action parameter determines the response.\n\n*Default value is \u201c1\u201d.*\n\n                ...\n                modparam(\"presence\", \"min_expires\", 1800)\n                ...\n            \n\n",
  "server_address": "### server_address (str)\n\nThe presence server address which will become the value of Contact\nheader filed for 200 OK replies to SUBSCRIBE and PUBLISH and in NOTIFY\nmessages.\n\n    ...\n    modparam(\"presence\", \"server_address\", \"sip:10.10.10.10:5060\")\n    ...\n\n",
  "subs_db_mode": "### subs_db_mode (int)\n\nThe presence module can utilize database for persistent subscription\nstorage. If you use database, your subscriptions will survive machine\nrestarts or SW crashes. The disadvantage is that accessing the database\ncan be time consuming. Therefore, presence module implements four\ndatabase accessing modes:\n\n- 0 - This disables database completely. Only memory will be used.\n  Subscriptions will not survive restart. Use this value if you need a\n  really fast presence module and subscription persistence is not\n  necessary or is provided by other means.\n\n- 1 - Write-Through scheme. Subscriptions are updated synchronously in\n  database and in memory(used for read operations). Use this scheme if\n  speed is not top priority, but it's important that no subscriptions\n  will be lost during crash or reboot or if you have an external\n  application that reads the state of the subscriptions from database\n  and they need to be updated synchronously.\n\n- 2 - Write-Back scheme. This is a combination of previous two schemes.\n  All changes are made to memory and database synchronization is done in\n  the timer. The timer deletes all expired contacts and flushes all\n  modified or new subscriptions to database. Use this scheme if you\n  encounter high-load peaks and want them to process as fast as\n  possible. Latency of this mode is much lower than latency of mode 1,\n  but slightly higher than latency of mode 0. To control the interval at\n  which data is flushed to database, set the *db_update_period*\n  parameter.\n\n- 3 - DB-Only scheme. No memory cache is kept, all operations being\n  directly performed with the database. The timer deletes all expired\n  subscriptions from database. The mode is useful if you configure more\n  servers sharing the same DB without any replication at SIP level. The\n  mode may be slower due the high number of DB operation.\n\n*Default value is 2 (Write-Back scheme).*\n\n    ...\n    modparam(\"presence\", \"subs_db_mode\", 1)\n    ...\n\n",
  "publ_cache": "### publ_cache (int)\n\nTo improve performance, the presence module can operate in a couple of\nmodes related to how PUBLISH data is stored. If publ_cache is 0, then no\ninformation is stored in memory.\n\nIf publ_cache is 1, then the module keeps in memory an index of the\nrecords stored in database, In this mode it keeps only the list of URIs\nand events, so it does not use much memory. The cache is used when a\nSubscription is received to check if there is any published state in\ndatabase. This way unnecessary queries in presentity table are avoided.\n\nIf publ_cache is 2, then the module keeps everything related to PUBLISH\nrequests in memory, not storing anything in the database.\n\nSetting this parameter to 0 will disable the usage of the publish cache.\nThis is desirable when you have more servers sharing the same database\nor there are other external entities inserting data into the presentity\ntable.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"presence\", \"publ_cache\", 0)\n    ...\n        \n\n",
  "subs_htable_size": "### subs_htable_size (int)\n\nThe size of the in-memory hash table to store subscription dialogs. This\nparameter will be used as the power of 2 when computing table size.\n\n*Default value is \u201c9 (512)\u201d.*\n\n    ...\n    modparam(\"presence\", \"subs_htable_size\", 11)\n    ...\n        \n\n",
  "pres_htable_size": "### pres_htable_size (int)\n\nThe size of the in-memory hash table to store publish records. This\nparameter will be used as the power of 2 when computing table size.\n\n*Default value is \u201c9 (512)\u201d.*\n\n    ...\n    modparam(\"presence\", \"pres_htable_size\", 11)\n    ...\n        \n\n",
  "send_fast_notify": "### send_fast_notify (int)\n\nThis parameter enables or disables the sending of an initial empty\nNOTIFY after a SUBSCRIBE/reSUBSCRIBE. This caused problems for MWI\napplication, because some CPEs (like Samsung) fail to understand an\nempty NOTIFY to a message-summary event. This parameter is enabled by\ndefault, thus adhering to the standard.\n\n*Default value is \u201c1 \u201d.*\n\n    ...\n    modparam(\"presence\", \"send_fast_notify\", 0)\n    ...\n        \n\n",
  "enable_sphere_check": "### enable_sphere_check (int)\n\nThis parameter is a flag that should be set if permission rules include\nsphere checking. The sphere information is expected to be present in the\nRPID body published by the presentity. The flag is introduced as this\ncheck requires extra processing that should be avoided if this feature\nis not supported by the clients.\n\n*Default value is \u201c0 \u201d.*\n\n    ...\n    modparam(\"presence\", \"enable_sphere_check\", 1)\n    ...\n        \n\n",
  "timeout_rm_subs": "### timeout_rm_subs (int)\n\nThis parameter is a flag that should be set if subscriptions should be\nremoved from the active_watchers when a NOTIFY times out. RFC3265\nsection 3.2.2 defines this behaviour as a SHOULD, so by default it is\non. Disabling this will keep subscriptions active on unreliable\nnetworks.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"presence\", \"timeout_rm_subs\", 0)\n    ...\n        \n\n",
  "fetch_rows": "### fetch_rows (integer)\n\nNumber of rows to be loaded in one step from database.\n\n*Default value is 500.*\n\n    ...\n    modparam(\"presence\", \"fetch_rows\", 1000)\n    ...\n\n",
  "db_table_lock_type": "### db_table_lock_type (integer)\n\nEnable (=1) or disable (=0) the Locks for table during a transaction.\nLocking only the \"current\" table causes problems with a MySQL-Databases\nin \"DB-Only\" mode.\n\nIn order to use the Presence-Module in \"DB_ONLY\"-mode with a\nMySQL-Backend, set this parameter to \"0\", otherwise the MySQL-Operations\nwill fail. The Presence-Module will generate a \"500 Server error\" due to\nthe failed MySQL-queries.\n\n*Default value is 1 (Write Lock for the Tables).*\n\n    ...\n    modparam(\"presence\", \"db_table_lock_type\", 0)\n    ...\n\n",
  "local_log_level": "### local_log_level (int)\n\nControl log level for some debug messages inside the module.\n\n*Default value is 2 (L_INFO).*\n\n    ...\n    modparam(\"presence\", \"local_log_level\", 3)\n    ...\n\n",
  "local_log_facility": "### local_log_facility (int)\n\nControl syslog facility for some debug messages inside the module.\n\n*Default value is taken from the core log_facility configuration\nparameter.*\n\n    ...\n    modparam(\"presence\", \"local_log_facility\", \"LOG_LOCAL3\")\n    ...\n\n",
  "subs_remove_match": "### subs_remove_match (int)\n\nControl how to match the subscriptions to remove from memory. If set to\n0, then the match is done on To-Tag (local generated), if set to 1, then\nthe match is done on all dialog attributes (Call-Id, From-Tag, To-Tag).\n\n*Default value is 0.*\n\n    ...\n    modparam(\"presence\", \"subs_remove_match\", 1)\n    ...\n\n",
  "xavp_cfg": "### xavp_cfg (str)\n\nThe name of the xavp to be used to specify attributes for internal\nprocessing of presence module.\n\nInner attributes inside xavp can be:\n\n- *priority* - integer value to set the priority of the presence\n  document (higher value, higher priority). It can set the order of the\n  aggregated presence documents sent by NOTIFY (first the document with\n  higher priority). If xavp_cfg parameter is set but this attribute is\n  not in the avp, the priority of the presence document is based on\n  timestamp, so newer documents have higher priority.\n\n- *delete_subscription* - integer value to give extra control of\n  deleting the subscription after processing of\n  event_route\\[presence:notify-reply\\]. If value = 1, it deletes the\n  subscription. If xavp_cfg parameter is set but this attribute is not\n  in the avp, the subscription is not deleted. this does not apply for\n  codes 404, 481 and 408 (when timeout_rm_subs = 1) where subscription\n  is deleted.\n\nDefault value is *empty* (not set).\n\n    ...\n    modparam(\"presence\", \"xavp_cfg\", \"pres\")\n    ...\n    if(is_method(\"PUBLISH\")) {\n        $xavp(pres=>priority) = 100;\n    }\n    ...\n\n",
  "retrieve_order": "### retrieve_order (int)\n\nIf set to 0, presentity records are retrieved by received_time order. If\nset to 1, presentity records are retrieved by the value of\nretrieve_order_by parameter.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"presence\", \"retrieve_order\", 1)\n    ...\n\n",
  "retrieve_order_by": "### retrieve_order_by (str)\n\nUsed to set the order-by of the db query for fetching the presence\nrecords when retrieve_order is set to 1.\n\n*Default value is \u201cpriority\u201d.*\n\n    ...\n    modparam(\"presence\", \"retrieve_order_by\", \"priority, received_time\")\n    ...\n\n",
  "sip_uri_match": "### sip_uri_match (int)\n\nThe mode used when comparing uris.\n\n- 0 : case sensitive\n\n- 1 : case insensitive\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"presence\", \"sip_uri_match\", 1)\n    ...\n\n",
  "enable_dmq": "### enable_dmq (integer)\n\nIf set to 1, will enable DMQ replication of presentities between nodes.\nUse this instead of a shared DB to share state across a cluster and\nupdate local watchers in realtime (subs_db_mode \\< 3) or on next\nnotifier run (subs_db_mode = 3).\n\n*If this parameter is enabled, the DMQ module must be loaded first -\notherwise, startup will fail.*\n\n*Default value is 0.*\n\n    ...\n    modparam(\"presence\", \"enable_dmq\", 1)\n    ...\n\n",
  "pres_subs_mode": "### pres_subs_mode (integer)\n\nAllow disabling cloning subscription structure for pv \\$subs(...),\nsaving the pkg memory and copy operations for all its fields. If 1 the\ncloning is done; if 0, no cloning and \\$subs(...) returns \\$null.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"presence\", \"pres_subs_mode\", 0)\n    ...\n\n",
  "delete_same_subs": "### delete_same_subs (integer)\n\nEnable deleting of subscriptions with the same presence uri and callid.\n\n*Default value is 0 (disabled behavior).*\n\n    ...\n    modparam(\"presence\", \"delete_same_subs\", 1)\n    ...\n\n",
  "timer_mode": "### timer_mode (integer)\n\nSpecify what timer process to be used. If set to 0, the core main timer\nis used. If set to 1, the core secondary timer is used.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"presence\", \"timer_mode\", 0)\n    ...\n\n",
  "subs_respond_200": "### subs_respond_200 (integer)\n\nSpecify the response code for accepted SUBSCRIBE requests. If set to 0,\n\"202 Accepted\" will be returned (default behaviour till version 5.5). If\nset to 1, \"200 OK\" will be returned instead, in conformance to RFC6665,\nwhich prohibits 202 responses.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"presence\", \"subs_respond_200\", 0)\n    ...\n\n"
 },
 "rtpengine": {
  "rtpengine_sock": "### rtpengine_sock (string)\n\nDefinition of socket(s) used to connect to (a set) RTP proxy. It may\nspecify an IPv4/IPv6 UDP socket or a websocket URI.\n\n*Default value is \u201cNONE\u201d (disabled).*\n\n    ...\n    # single rtproxy\n    modparam(\"rtpengine\", \"rtpengine_sock\", \"udp:localhost:12221\")\n    # IPv6 UDP\n    modparam(\"rtpengine\", \"rtpengine_sock\", \"udp6:localhost:12221\")\n    # websocket\n    modparam(\"rtpengine\", \"rtpengine_sock\", \"ws://localhost:12221/\")\n    # websocket with TLS\n    modparam(\"rtpengine\", \"rtpengine_sock\", \"wss://localhost:12221/\")\n    # multiple rtproxies for LB with weights (missing weight defaults to 1)\n    modparam(\"rtpengine\", \"rtpengine_sock\",\n        \"udp:localhost:12221=2 udp:localhost:12222=1\")\n    # multiple sets of multiple rtproxies\n    modparam(\"rtpengine\", \"rtpengine_sock\",\n        \"1 == udp:localhost:12221 udp:localhost:12222\")\n    modparam(\"rtpengine\", \"rtpengine_sock\",\n        \"2 == udp:localhost:12225\")\n    ...\n\n",
  "rtpengine_disable_tout": "### rtpengine_disable_tout (integer)\n\nOnce an RTP proxy was found unreachable and marked as disabled, the\nrtpengine module will not attempt to establish communication to that RTP\nproxy for rtpengine_disable_tout seconds.\n\n*Default value is \u201c60\u201d.*\n\nCan be set at runtime, e.g.:\n\n                $ kamcmd cfg.set_now_int rtpengine rtpengine_disable_tout 20\n                \n\n    ...\n    modparam(\"rtpengine\", \"rtpengine_disable_tout\", 20)\n    ...\n\n",
  "aggressive_redetection": "### aggressive_redetection (integer)\n\nThis parameter determines what happens when all potential rtpengines are\nfound to be unreachable. If enabled, the sip server will send pings to\nall rtpengines, else no rtpengine will be queried until its\nrtpengine_disable_tout timeout passes.\n\n*Default value is \u201c1\u201d (enabled).*\n\nCan be set at runtime, e.g.:\n\n                $ kamcmd cfg.set_now_int rtpengine aggressive_redetection 0\n                \n\n    ...\n    modparam(\"rtpengine\", \"aggressive_redetection\", 0)\n    ...\n\n",
  "rtpengine_tout_ms": "### rtpengine_tout_ms (integer)\n\nTimeout value expressed in milliseconds in waiting for reply from RTP\nproxy.\n\n*Default value is \u201c1000\u201d.*\n\nCan be set at runtime, e.g.:\n\n                $ kamcmd cfg.set_now_int rtpengine rtpengine_tout_ms 1000\n                \n\n    ...\n    modparam(\"rtpengine\", \"rtpengine_tout_ms\", 2000)\n    ...\n\n",
  "rtpengine_allow_op": "### rtpengine_allow_op (integer)\n\nEnable this setting to allow finishing the current sessions while\ndenying new sessions for deactivated nodes.\n\nNodes can be *manually deactivated* via kamctl command i.e.\n\"disabled(permanent)\" nodes. Probably the manually deactivated machine\nis still running (did not crash).\n\nThis is *useful* when deactivating a node for maintenance and reject new\nsessions but allow current ones to finish.\n\nThe behaviour is the same for a rtpengine deleted table node. When the\nnode is deleted from the table and the table reloaded (see\nnh_reload_rtpp) the node actually is disabled(permanent) and hidden for\ndisplay. Next time the same node will be added in the table, and the\ndatabase content reloaded, the re-activated node will be updated and\nre-displayed.\n\n*Default value is \u201c0\u201d to keep the current behaviour.*\n\n*If value set to \u201c1\u201d it will send commands to all disabled nodes for the\nexisting call.*\n\n*If value set to \u201c2\u201d it will send commands only to manually disabled\nnodes. (Not when timeout is disabled or node broken)*\n\n    ...\n    modparam(\"rtpengine\", \"rtpengine_allow_op\", 1)\n    ...\n\n",
  "queried_nodes_limit": "### queried_nodes_limit (integer)\n\nThe total number of nodes inside a set (sets are configurable via\nrtpengine_sock function) to be queried before giving up establishing a\nsession. This brings more flexibility in case checking all rtpengines\nwould take too long. Max limit is 30.\n\n*By default all nodes in a set are tried before giving up communicating\nwith the rtpengines.*\n\nCan be set at runtime, e.g.:\n\n                $ kamcmd cfg.set_now_int rtpengine queried_nodes_limit 5\n                \n\n    ...\n    modparam(\"rtpengine\", \"queried_nodes_limit\", 5)\n    ...\n\n",
  "rtpengine_retr": "### rtpengine_retr (integer)\n\nHow many times the module should retry to send and receive after timeout\nwas generated.\n\n*Default value is \u201c5\u201d.*\n\nCan be set at runtime, e.g.:\n\n                $ kamcmd cfg.set_now_int rtpengine rtpengine_retr 5\n                \n\n    ...\n    modparam(\"rtpengine\", \"rtpengine_retr\", 2)\n    ...\n\n",
  "extra_id_pv": "### extra_id_pv (string)\n\nThe parameter sets the PV definition to use when the \u201cvia-branch\u201d\nparameter is used on rtpengine_delete(), rtpengine_offer(),\nrtpengine_answer() or rtpengine_manage() command.\n\nDefault is empty, the \u201cvia-branch\u201d parameter may not be used then.\n\n    ...\n    modparam(\"rtpengine\", \"extra_id_pv\", \"$avp(extra_id)\")\n    ...\n\n",
  "setid_avp": "### setid_avp (string)\n\nThe parameter defines an AVP that, if set, determines which RTP proxy\nset rtpengine_offer(), rtpengine_answer(), rtpengine_delete(), and\nrtpengine_manage() functions use.\n\nThere is no default value.\n\n    ...\n    modparam(\"rtpengine\", \"setid_avp\", \"$avp(setid)\")\n    ...\n\n",
  "force_send_interface": "### force_send_interface (string)\n\nForces all control messages between the SIP proxy and the RTP proxy to\nbe sent from the specified local interface. Both IPv4 and IPv6 addresses\nare supported. If not specified, the default interface selected by the\noperating system will be used. Note: when rtpengine_sock is an IPv6\nlink-local address, one \\_must\\_ set this parameter in order to\nsuccessfully connect to RTP engine. This is necessarily because OS needs\nadditional scope_id hint to communicate over IPv6 link locals. The\nscope_id is resolved based on the given IPv6.\n\nThere is no default value.\n\n    ...\n    modparam(\"rtpengine\", \"force_send_interface\", \"10.3.7.123\")\n    modparam(\"rtpengine\", \"force_send_interface\", \"2001:8d8:1ff:10c0:9a90:96ff:fea8:fd99\")\n    ...\n\n",
  "read_sdp_pv": "### read_sdp_pv (string)\n\nIf this parameter is set to a valid AVP or script var specifier,\nrtpengine will take the input SDP from this pv instead of the message\nbody.\n\nThere is no default value.\n\n    ...\n    modparam(\"rtpengine\", \"read_sdp_pv\", \"$var(sdp)\")\n    ...\n    route {\n        ...\n        $var(sdp) = $rb + \"a=foo:bar\\r\\n\";\n        rtpengine_manage();\n    }\n\n",
  "write_sdp_pv": "### write_sdp_pv (string)\n\nIf this parameter is set to a valid AVP or script var specifier, the SDP\nreturned by rtpengine in the offer/answer operations is returned in the\nspecified variable instead of the message body.\n\nThere is no default value.\n\n    ...\n    modparam(\"rtpengine\", \"write_sdp_pv\", \"$avp(sdp)\")\n    ...\n    route {\n        ...\n        rtpengine_manage();\n        set_body(\"$avp(sdp)a=baz123\\r\\n\", \"application/sdp\");\n    }\n\n",
  "rtp_inst_pvar": "### rtp_inst_pvar (string)\n\nA pseudo variable to store the chosen RTP Engine IP address. If this\nparameter is set, the IP address and port of the instance chosen will be\nstored in the given variable.\n\nBy default, this parameter is not set.\n\n    ...\n    modparam(\"rtpengine\", \"rtp_inst_pvar\", \"$avp(RTP_INSTANCE)\")\n    ...\n\n",
  "hash_table_size": "### hash_table_size (integer)\n\nTo maintain information about a selected rtp machine node for a given\ncall, entries are added in a hashtable of (callid, node) pairs. This\nparameter sets the size of the hash table. Default value is 256.\n\nNOTE: If configured size is *less than* 1, the size will be defaulted to\n1.\n\n    ...\n    modparam(\"rtpengine\", \"hash_table_size\", 123)\n    ...\n\n",
  "hash_table_tout": "### hash_table_tout (integer)\n\nNumber of seconds after an rtpengine hash table entry is marked for\ndeletion. By default, this parameter is set to 3600 (seconds).\n\nTo maintain information about a selected rtp machine node for a given\ncall, entries are added in a hashtable of (callid, node) pairs. When\ncommand comes the callid is looked up in this table. If found, the\nchosen node is used. If not found, choose a new node, insert the callid\nin the hashtable and return the chosen node.\n\nNOTE: In the current implementation, the actual deletion happens *on the\nfly*, while insert/remove/lookup the hastable, *only* for the entries in\nthe insert/remove/lookup path.\n\nNOTE: When configuring this parameter, one should consider maximum call\ntime VS shared memory for unfinished calls.\n\n    ...\n    modparam(\"rtpengine\", \"hash_table_tout\", 300)\n    ...\n\n",
  "db_url": "### db_url (string)\n\nThe rtpengine database url. If present and valid, it activates database\nmode. In this mode the node information is read from database, not from\nconfiguration modparam parameters.\n\nBy default, the database url is NULL (not set).\n\n    ...\n    modparam(\"rtpengine\", \"db_url\", \"mysql://pass@localhost/db\")\n    ...\n\n",
  "table_name": "### table_name (string)\n\nThe rtpengine table name. If database mode is activated (i.e. valid\ndb_url), sets the name of the rtpengine table, on startup.\n\nBy default, the rtpengine table name is \"rtpengine\".\n\nNOTE: One needs to add the version of the rtpengine table in the version\ntable. The current version is version 1.\n\n    ...\n    modparam(\"rtpengine\", \"table_name\", \"rtpengine_table_name\")\n    ...\n\n    mysql> describe rtpengine;\n    +----------+------------------+------+-----+---------------------+-------+\n    | Field    | Type             | Null | Key | Default             | Extra |\n    +----------+------------------+------+-----+---------------------+-------+\n    | setid    | int(10) unsigned | NO   | PRI | 0                   |       |\n    | url      | varchar(64)      | NO   | PRI | NULL                |       |\n    | weight   | int(10) unsigned | NO   |     | 1                   |       |\n    | disabled | int(1)           | NO   |     | 0                   |       |\n    | stamp    | datetime         | NO   |     | 1900-01-01 00:00:01 |       |\n    +----------+------------------+------+-----+---------------------+-------+\n\n    mysql> select * from rtpengine;\n    +-------+----------------------------+--------+----------+---------------------+\n    | setid | url                        | weight | disabled | stamp               |\n    +-------+----------------------------+--------+----------+---------------------+\n    |     0 | udp:rtpengine1.domain:8800 |      1 |        0 | 2016-03-10 10:30:54 |\n    |     0 | udp:rtpengine2.domain:8800 |      1 |        1 | 2016-03-10 10:30:54 |\n    +-------+----------------------------+--------+----------+---------------------+\n\n    mysql> select * from version;\n    +---------------------------+---------------+\n    | table_name                | table_version |\n    +---------------------------+---------------+\n    | rtpengine                 |             1 |\n    +---------------------------+---------------+\n\n",
  "setid_col": "### setid_col (string)\n\nColumn name for the \"setid\" in the rtpengine table. If database mode is\nactivated (i.e. valid db_url), set the setid of rtp nodes according to\nthis column, on startup. The MySQL value for this column should be INT\nUNSIGNED.\n\nBy default, the column name is \"setid\".\n\n    ...\n    modparam(\"rtpengine\", \"setid_col\", \"setid_column_name\")\n    ...\n\n",
  "url_col": "### url_col (string)\n\nColumn name for the url in the rtpengine table. If database mode is\nactivated (i.e. valid db_url), set the url of rtp nodes according to\nthis column, on startup. The MySQL value for this column should be\nVARCHAR.\n\nBy default, the column name is \"url\".\n\n    ...\n    modparam(\"rtpengine\", \"url_col\", \"url_column_name\")\n    ...\n\n",
  "weight_col": "### weight_col (string)\n\nColumn name for weight in the rtpengine table. If database mode is\nactivated (i.e. valid db_url), set the weight of rtp nodes according to\nthis column, on startup. The column value has priority over the URL\nweight. The MySQL value for this column should be INT UNSIGNED.\n\nBy default, the column name is \"weight\".\n\n    ...\n    modparam(\"rtpengine\", \"weight_col\", \"weight_column_name\")\n    ...\n\n",
  "disabled_col": "### disabled_col (string)\n\nColumn name in the rtpengine table. If database mode is activated (i.e.\nvalid db_url), set the state of rtp nodes according to this column, on\nstartup. The MySQL value for this column should be INT.\n\nBy default, the column name is \"disabled\".\n\n    ...\n    modparam(\"rtpengine\", \"disabled_col\", \"disabled_column_name\")\n    ...\n\n",
  "setid_default": "### setid_default (integer)\n\nThe default set of nodes to be used.\n\nBy default, the setid is 0.\n\nNOTE that if setid_avp is configured, this value will be ignored and the\nactive set will be chosen according to the setid_avp.\n\n    ...\n    modparam(\"rtpengine\", \"setid_default\", 11)\n    ...\n\n",
  "media_duration": "### media_duration (string)\n\nThe name of a pseudovariable to be filled in with the length of the\nmedia being played back after a call to \u201cplay_media\u201d, expressed in\nmilliseconds. It's set to -1 if the length of the media could not be\ndetermined.\n\nBy default, this parameter is not set.\n\n    ...\n    modparam(\"rtpengine\", \"media_duration\", \"$avp(MEDIA_DURATION)\")\n    ...\n\n",
  "mos_min_pv": "### mos_min_pv (string)\n\nThe name of a pseudovariable to hold the minimum encountered MOS (Mean\nOpinion Score) value for the call. The value typically has a range of\n1.0 through 5.0.\n\nThere is no default value.\n\nThis value is filled in after invoking\u201crtpengine_delete\u201d,\n\u201crtpengine_query\u201d, or \u201crtpengine_manage\u201d if the command resulted in a\ndeletion of the call (or call branch).\n\n    ...\n    modparam(\"rtpengine\", \"mos_min_pv\", \"$avp(mos_min)\")\n    ...\n\n",
  "mos_min_at_pv": "### mos_min_at_pv (string)\n\nThe name of a pseudovariable to hold the timestamp of when the minimum\nMOS value was encountered during the call, such as \u201c0:30\u201d for 30 seconds\nafter the start of the call.\n\nThere is no default value.\n\nThis value is filled in after invoking \u201crtpengine_delete\u201d,\n\u201crtpengine_query\u201d, or \u201crtpengine_manage\u201d if the command resulted in a\ndeletion of the call (or call branch).\n\n    ...\n    modparam(\"rtpengine\", \"mos_min_at_pv\", \"$avp(mos_min_at)\")\n    ...\n\n",
  "mos_min_packetloss_pv": "### mos_min_packetloss_pv (string)\n\nThe name of a pseudovariable to hold the amount of packetloss in percent\nat the time the minimum MOS value was encountered;\n\nThere is no default value.\n\nThis value is filled in after invoking \u201crtpengine_delete\u201d,\n\u201crtpengine_query\u201d, or \u201crtpengine_manage\u201d if the command resulted in a\ndeletion of the call (or call branch).\n\n    ...\n    modparam(\"rtpengine\", \"mos_min_packetloss_pv\", \"$avp(mos_min_packetloss)\")\n    ...\n\n",
  "mos_min_jitter_pv": "### mos_min_jitter_pv (string)\n\nThe name of a pseudovariable to hold the amount of jitter in\nmilliseconds at the time the minimum MOS value was encountered;\n\nThere is no default value.\n\nThis value is filled in after invoking \u201crtpengine_delete\u201d,\n\u201crtpengine_query\u201d, or \u201crtpengine_manage\u201d if the command resulted in a\ndeletion of the call (or call branch).\n\n    ...\n    modparam(\"rtpengine\", \"mos_min_jitter_pv\", \"$avp(mos_min_jitter)\")\n    ...\n\n",
  "mos_min_roundtrip_pv": "### mos_min_roundtrip_pv (string)\n\nThe name of a pseudovariable to hold the packet round-trip time in\nmicroseconds at the time the minimum MOS value was encountered;\n\nThere is no default value.\n\nThis value is filled in after invoking \u201crtpengine_delete\u201d,\n\u201crtpengine_query\u201d, or \u201crtpengine_manage\u201d if the command resulted in a\ndeletion of the call (or call branch).\n\n    ...\n    modparam(\"rtpengine\", \"mos_min_roundtrip_pv\", \"$avp(mos_min_roundtrip)\")\n    ...\n\n",
  "mos_max_pv": "### mos_max_pv (string)\n\nThe name of a pseudovariable to hold the maximum encountered MOS value\nfor the call. The value typically has a range of 1.0 through 5.0.\n\nThere is no default value.\n\nThis value is filled in after invoking\u201crtpengine_delete\u201d,\n\u201crtpengine_query\u201d, or \u201crtpengine_manage\u201d if the command resulted in a\ndeletion of the call (or call branch).\n\n    ...\n    modparam(\"rtpengine\", \"mos_max_pv\", \"$avp(mos_max)\")\n    ...\n\n",
  "mos_max_at_pv": "### mos_max_at_pv (string)\n\nThe name of a pseudovariable to hold the timestamp of when the maximum\nMOS value was encountered during the call, such as \u201c0:30\u201d for 30 seconds\nafter the start of the call.\n\nThere is no default value.\n\nThis value is filled in after invoking \u201crtpengine_delete\u201d,\n\u201crtpengine_query\u201d, or \u201crtpengine_manage\u201d if the command resulted in a\ndeletion of the call (or call branch).\n\n    ...\n    modparam(\"rtpengine\", \"mos_max_at_pv\", \"$avp(mos_max_at)\")\n    ...\n\n",
  "mos_max_packetloss_pv": "### mos_max_packetloss_pv (string)\n\nThe name of a pseudovariable to hold the amount of packetloss in percent\nat the time the maximum MOS value was encountered;\n\nThere is no default value.\n\nThis value is filled in after invoking \u201crtpengine_delete\u201d,\n\u201crtpengine_query\u201d, or \u201crtpengine_manage\u201d if the command resulted in a\ndeletion of the call (or call branch).\n\n    ...\n    modparam(\"rtpengine\", \"mos_max_packetloss_pv\", \"$avp(mos_max_packetloss)\")\n    ...\n\n",
  "mos_max_jitter_pv": "### mos_max_jitter_pv (string)\n\nThe name of a pseudovariable to hold the amount of jitter in\nmilliseconds at the time the maximum MOS value was encountered;\n\nThere is no default value.\n\nThis value is filled in after invoking \u201crtpengine_delete\u201d,\n\u201crtpengine_query\u201d, or \u201crtpengine_manage\u201d if the command resulted in a\ndeletion of the call (or call branch).\n\n    ...\n    modparam(\"rtpengine\", \"mos_max_jitter_pv\", \"$avp(mos_max_jitter)\")\n    ...\n\n",
  "mos_max_roundtrip_pv": "### mos_max_roundtrip_pv (string)\n\nThe name of a pseudovariable to hold the packet round-trip time in\nmicroseconds at the time the maximum MOS value was encountered;\n\nThere is no default value.\n\nThis value is filled in after invoking \u201crtpengine_delete\u201d,\n\u201crtpengine_query\u201d, or \u201crtpengine_manage\u201d if the command resulted in a\ndeletion of the call (or call branch).\n\n    ...\n    modparam(\"rtpengine\", \"mos_max_roundtrip_pv\", \"$avp(mos_max_roundtrip)\")\n    ...\n\n",
  "mos_average_pv": "### mos_average_pv (string)\n\nThe name of a pseudovariable to hold the average (median) MOS value for\nthe call. The value typically has a range of 1.0 through 5.0.\n\nThere is no default value.\n\nThis value is filled in after invoking\u201crtpengine_delete\u201d,\n\u201crtpengine_query\u201d, or \u201crtpengine_manage\u201d if the command resulted in a\ndeletion of the call (or call branch).\n\n    ...\n    modparam(\"rtpengine\", \"mos_average_pv\", \"$avp(mos_average)\")\n    ...\n\n",
  "mos_average_packetloss_pv": "### mos_average_packetloss_pv (string)\n\nThe name of a pseudovariable to hold the average (median) amount of\npacketloss in percent present throughout the call.\n\nThere is no default value.\n\nThis value is filled in after invoking \u201crtpengine_delete\u201d,\n\u201crtpengine_query\u201d, or \u201crtpengine_manage\u201d if the command resulted in a\ndeletion of the call (or call branch).\n\n    ...\n    modparam(\"rtpengine\", \"mos_average_packetloss_pv\", \"$avp(mos_average_packetloss)\")\n    ...\n\n",
  "mos_average_jitter_pv": "### mos_average_jitter_pv (string)\n\nThe name of a pseudovariable to hold the average (median) amount of\njitter in milliseconds present throughout the call.\n\nThere is no default value.\n\nThis value is filled in after invoking \u201crtpengine_delete\u201d,\n\u201crtpengine_query\u201d, or \u201crtpengine_manage\u201d if the command resulted in a\ndeletion of the call (or call branch).\n\n    ...\n    modparam(\"rtpengine\", \"mos_average_jitter_pv\", \"$avp(mos_average_jitter)\")\n    ...\n\n",
  "mos_average_roundtrip_pv": "### mos_average_roundtrip_pv (string)\n\nThe name of a pseudovariable to hold the average (median) packet\nround-trip time in milliseconds present throughout the call.\n\nThere is no default value.\n\nThis value is filled in after invoking \u201crtpengine_delete\u201d,\n\u201crtpengine_query\u201d, or \u201crtpengine_manage\u201d if the command resulted in a\ndeletion of the call (or call branch).\n\n    ...\n    modparam(\"rtpengine\", \"mos_average_roundtrip_pv\", \"$avp(mos_average_roundtrip)\")\n    ...\n\n",
  "mos_average_samples_pv": "### mos_average_samples_pv (string)\n\nThe name of a pseudovariable to hold the number of samples used to\ndetermine the other \u201caverage\u201d MOS data points.\n\nThere is no default value.\n\nThis value is filled in after invoking \u201crtpengine_delete\u201d,\n\u201crtpengine_query\u201d, or \u201crtpengine_manage\u201d if the command resulted in a\ndeletion of the call (or call branch).\n\n    ...\n    modparam(\"rtpengine\", \"mos_average_samples_pv\", \"$avp(mos_average_samples)\")\n    ...\n\n",
  "control_cmd_tos": "### control_cmd_tos (integer)\n\nThe parameter is used to set the value of \u201ctype of service (tos)\u201d for\nthe control commands (such as rtpengine_offer(), rtpengine_answer()\netc).\n\nThere is no default value. By default this feature is not used.\n\nThe values not falling into the range \u201c0-255\u201d will be simply ignored.\n\n    ...\n    modparam(\"rtpengine\", \"control_cmd_tos\", 144)\n    ...\n\n",
  "hash_algo": "### hash_algo (integer)\n\nHashing algorithm to be used in node selection algorithm. Now there are\n3 possibilities: legacy algorithm - 0 (very basic hash over callid),\nSHA1 - 1 (apply sha1 over the callid and calculate hash) or CRC32 - 2\n(calculate crc32 sum over the callid).\n\nDefault value is 0, legacy algorithm.\n\nThe values not falling into the range \u201c0-2\u201d are ignored.\n\n    ...\n    ### use SHA1 instead of legacy algorithm\n    modparam(\"rtpengine\", \"hash_algo\", 1)\n\n    ### use CRC32 instead of legacy algorithm\n    modparam(\"rtpengine\", \"hash_algo\", 2)\n    ...\n\n",
  "wsapi": "### wsapi (string)\n\nConfigure a backend API for websocket usage. Currently the only\nsupported setting is \u201clwsc\u201d (libwebsockets). If unset, then the\nwebsocket protocol cannot be used.\n\n    ...\n    modparam(\"rtpengine\", \"wsapi\", \"lwsc\")\n    ...\n\n"
 },
 "textopsx": {},
 "nats": {
  "nats_url": "### nats_url (str)\n\nThe nats url.\n\nUsage: nats related.\n\n*Default value is nats://127.0.0.1:4222*\n\n    ...\n    modparam(\"nats\", \"nats_url\", \"nats://127.0.0.1:4222\")\n    modparam(\"nats\", \"nats_url\", \"nats://user1:pass1127.0.1.2:4222\") // with auth\n    modparam(\"nats\", \"nats_url\", \"nats://127.1.2.3:4222\")\n    ...\n\n",
  "num_publish_workers": "### num_publish_workers (int)\n\nThe number of worker threads for publishing messages.\n\nUsage: nats related.\n\n*Default value is \u201c2\u201d.*\n\n    ...\n    modparam(\"nats\", \"num_publish_workers\", 4)\n    ...\n\n",
  "subject_queue_group": "### subject_queue_group (str)\n\nThe NATS Subject and Queue Group. Separated by \":\"\n\nUsage: nats related.\n\n*Default value is not set.*\n\n    ...\n    modparam(\"nats\", \"subject_queue_group\", \"Kamailio-World:2020\")\n    modparam(\"nats\", \"subject_queue_group\", \"Kamailio-World:2021\") // this will create two processes for the Kamailio-World subject\n    modparam(\"nats\", \"subject_queue_group\", \"MyQueue1:2021\")\n    modparam(\"nats\", \"subject_queue_group\", \"MyQueue2:2021\")\n    ...\n                    \n\n",
  "event_callback": "### event_callback (str)\n\nName of the KEMI function to be executed instead of the event route.\n\n*Default value is not set.*\n\n    ...\n    modparam(\"nats\", \"event_callback\", \"ksr_nats_event\")\n\n    -- event callback function implemented in Lua\n    function ksr_nats_event(evname)\n        KSR.info(\"===== nats module received event: \" .. evname ..\n            \", data:\" .. KSR.pv.gete('$natsData') .. \"\\n\");\n        return 1;\n    end\n    ...\n                    \n\n"
 },
 "json": {},
 "speeddial": {
  "db_url": "### db_url (string)\n\nThe URL of database where the table containing speed dial records.\n\n*Default value is DEFAULT_RODB_URL.*\n\n    ...\n    modparam(\"speeddial\", \"db_url\", \"mysql://kamailio:kamailiorw@localhost/kamailio\")\n    ...\n\n",
  "user_column": "### user_column (string)\n\nThe name of column storing the user name of the owner of the speed dial\nrecord.\n\n*Default value is \u201cusername\u201d.*\n\n    ...\n    modparam(\"speeddial\", \"user_column\", \"userid\")\n    ...\n\n",
  "domain_column": "### domain_column (string)\n\nThe name of column storing the domain of the owner of the speed dial\nrecord.\n\n*Default value is \u201cdomain\u201d.*\n\n    ...\n    modparam(\"speeddial\", \"domain_column\", \"userdomain\")\n    ...\n\n",
  "sd_user_column": "### sd_user_column (string)\n\nThe name of the column storing the user part of the short dial address.\n\n*Default value is \u201csd_username\u201d.*\n\n    ...\n    modparam(\"speeddial\", \"sd_user_column\", \"short_user\")\n    ...\n\n",
  "sd_domain_column": "### sd_domain_column (string)\n\nThe name of the column storing the domain of the short dial address.\n\n*Default value is \u201csd_domain\u201d.*\n\n    ...\n    modparam(\"speeddial\", \"sd_domain_column\", \"short_domain\")\n    ...\n\n",
  "new_uri_column": "### new_uri_column (string)\n\nThe name of the column containing the URI that will be use to replace\nthe short dial URI.\n\n*Default value is \u201cnew_uri\u201d.*\n\n    ...\n    modparam(\"speeddial\", \"new_uri_column\", \"real_uri\")\n    ...\n\n",
  "domain_prefix": "### domain_prefix (string)\n\nIf the domain of the owner (From URI) starts with the value of this\nparameter, then it is stripped before performing the lookup of the short\nnumber.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"speeddial\", \"domain_prefix\", \"tel.\")\n    ...\n\n",
  "use_domain": "### use_domain (int)\n\nThe parameter specifies whether or not to use the domain when searching\na speed dial record (0 - no domain, 1 - use domain from From URI, 2 -\nuse both domains, from From URI and from request URI).\n\n*Default value is 0.*\n\n    ...\n    modparam(\"speeddial\", \"use_domain\", 1)\n    ...\n\n"
 },
 "db_redis": {
  "schema_path": "### schema_path (string)\n\nThe path to the table schemas.\n\nDefault value: \"/usr/share/kamailio/db_redis\".\n\n    ...\n    modparam(\"db_redis\", \"schema_path\", \"/usr/local/share/kamailio/db_redis/kamailio\")\n    ...\n                    \n\n",
  "keys": "### keys (string)\n\nThe entry and mapping keys of tables.\n\nDefault value: \"\" (empty).\n\n    ...\n    modparam(\"db_redis\", \"keys\", \"version=entry:table_name;location=entry:ruid&usrdom:username,domain&timer:partition,keepalive\")\n    ...\n                    \n\n",
  "verbosity": "### verbosity (int)\n\nControl the verbosity of debug messages printed by the module. If set to\n1, the module prints schema details for all tables on each connect\noperation to Redis server.\n\nDefault value: 1.\n\n    ...\n    modparam(\"db_redis\", \"verbosity\", 0)\n    ...\n                    \n\n"
 },
 "tls": {
  "tls_method": "### tls_method (string)\n\nSets the TLS protocol method. Possible values are:\n\n- *TLSv1.3+* - TLSv1.3 or newer (TLSv1.3, ...) connections are accepted\n  (available starting with openssl/libssl v1.1.1)\n\n- *TLSv1.3* - only TLSv1.3 connections are accepted (available starting\n  with openssl/libssl v1.1.1)\n\n- *TLSv1.2+* - TLSv1.2 or newer (TLSv1.3, ...) connections are accepted\n  (available starting with openssl/libssl v1.1.1)\n\n- *TLSv1.2* - only TLSv1.2 connections are accepted (available starting\n  with openssl/libssl v1.0.1e)\n\n- *TLSv1.1+* - TLSv1.1 or newer (TLSv1.2, ...) connections are accepted\n  (available starting with openssl/libssl v1.0.1)\n\n- *TLSv1.1* - only TLSv1.1 connections are accepted (available starting\n  with openssl/libssl v1.0.1)\n\n- *TLSv1+* - TLSv1.0 or newer (TLSv1.1, TLSv1.2, ...) connections are\n  accepted.\n\n- *TLSv1* - only TLSv1 (TLSv1.0) connections are accepted. This is the\n  default value.\n\n- *SSLv3* - only SSLv3 connections are accepted. Note: you shouldn't use\n  SSLv3 for anything which should be secure.\n\n- *SSLv2* - only SSLv2 connections, for old clients. Note: you shouldn't\n  use SSLv2 for anything which should be secure. Newer versions of\n  OpenSSL libraries don't include support for it anymore.\n\n- *SSLv23* - any of the SSLv2, SSLv3 and TLSv1 or newer methods will be\n  accepted.\n\n  From the OpenSSL manual: \"A TLS/SSL connection established with these\n  methods may understand the SSLv3, TLSv1, TLSv1.1 and TLSv1.2\n  protocols. If extensions are required (for example server name) a\n  client will send out TLSv1 client hello messages including extensions\n  and will indicate that it also understands TLSv1.1, TLSv1.2 and\n  permits a fallback to SSLv3. A server will support SSLv3, TLSv1,\n  TLSv1.1 and TLSv1.2 protocols. This is the best choice when\n  compatibility is a concern.\"\n\n  Note: For older OpenSSL library versions, this option allows SSLv2,\n  with hello messages done over SSLv2. You shouldn't use SSLv2 or SSLv3\n  for anything which should be secure.\n\nIf RFC 3261 conformance is desired, at least TLSv1 must be used. For\ncompatibility with older clients SSLv23 is the option, but again, be\naware of security concerns, SSLv2/3 being considered very insecure by\n2014. For current information about what's considered secure, please\nconsult, IETF BCP 195, currently RFC 7525 - \"Recommendations for Secure\nUse of Transport Layer Security (TLS) and Datagram Transport Layer\nSecurity (DTLS)\"\n\n    ...\n    modparam(\"tls\", \"tls_method\", \"TLSv1\")\n    ...\n            \n\n",
  "certificate": "### certificate (string)\n\nSets the certificate file name. The certificate file can also contain\nthe private key in PEM format.\n\nIf the file name starts with a '.' the path will be relative to the\nworking directory (*at runtime*). If it starts with a '/' it will be an\nabsolute path and if it starts with anything else the path will be\nrelative to the main config file directory (e.g.: for kamailio -f\n/etc/kamailio/kamailio.cfg it will be relative to /etc/kamailio/).\n\nThe default value is /usr/local/etc/kamailio/cert.pem\n\n    ...\n    modparam(\"tls\", \"certificate\", \"/usr/local/etc/kamailio/my_certificate.pem\")\n    ...\n            \n\n",
  "private_key": "### private_key (string)\n\nSets the private key file name. The private key can be in the same file\nas the certificate or in a separate file, specified by this\nconfiguration parameter.\n\nIf the file name starts with a '.' the path will be relative to the\nworking directory (*at runtime*). If it starts with a '/' it will be an\nabsolute path and if it starts with anything else the path will be\nrelative to the main config file directory (e.g.: for kamailio -f\n/etc/kamailio/kamailio.cfg it will be relative to /etc/kamailio/).\n\nNote: the private key can be contained in the same file as the\ncertificate (just append it to the certificate file, e.g.: cat pkey.pem\n\\>\\> cert.pem)\n\nThe default value is /usr/local/etc/kamailio/cert.pem\n\n    ...\n    modparam(\"tls\", \"private_key\", \"/usr/local/etc/kamailio/my_pkey.pem\")\n    ...\n            \n\n",
  "ca_list": "### ca_list (string)\n\nSets the CA list file name. This file contains a list of all the trusted\nCAs certificates used when connecting to other SIP implementations. If a\nsignature in a certificate chain belongs to one of the listed CAs, the\nverification of that certificate will succeed.\n\nIf the file name starts with a '.' the path will be relative to the\nworking directory (*at runtime*). If it starts with a '/' it will be an\nabsolute path and if it starts with anything else the path will be\nrelative to the main config file directory (e.g.: for kamailio -f\n/etc/kamailio/kamailio.cfg it will be relative to /etc/kamailio/).\n\nBy default the CA file is not set.\n\nAn easy way to create the CA list is to append each trusted trusted CA\ncertificate in the PEM format to one file, e.g.:\n\n    for f in trusted_cas/*.pem ; do cat \"$f\" >> ca_list.pem ; done\n            \n\nSee also *verify_certificate*, *verify_depth*, *require_certificate* and\n*crl*.\n\n    ...\n    modparam(\"tls\", \"ca_list\", \"/usr/local/etc/kamailio/ca_list.pem\")\n    ...\n            \n\n",
  "ca_path": "### ca_path (str)\n\nSets the path with the trusted CA files, to be given as parameter\nSSL_CTX_load_verify_locations(). The certificates in ca_path are only\nlooked up when required, e.g. when building the certificate chain or\nwhen actually performing the verification of a peer certificate. They\nare not given to the client (not loaded to be provided to\nSSL_CTX_set_client_CA_list()), only the ones in ca_list files are sent\nto the client. It requires to use c_rehash to generate the hash map for\ncertificate search, for more see the manual of libssl for\nSSL_CTX_load_verify_locations() function.\n\nBy default it is not set.\n\n    ...\n    modparam(\"tls\", \"ca_path\", \"/usr/local/etc/kamailio/ca\")\n    ...\n            \n\n",
  "crl": "### crl (string)\n\nSets the certificate revocation list (CRL) file name. This file contains\na list of revoked certificates. Any attempt to verify a revoked\ncertificate will fail.\n\nIf not set, no CRL list will be used.\n\nIf the file name starts with a '.' the path will be relative to the\nworking directory (*at runtime*). If it starts with a '/' it will be an\nabsolute path and if it starts with anything else the path will be\nrelative to the main config file directory (e.g.: for kamailio -f\n/etc/kamailio/kamailio.cfg it will be relative to /etc/kamailio/).\n\n<div class=\"note\">\n\nIf set, `require_certificate` should also be set or it will not have any\neffect.\n\n</div>\n\nBy default the CRL file name is not set.\n\nTo update the CRL in a running Kamailio, make sure you configure TLS via\na separate TLS config file (the `config` modparam) and issue a\ntls.reload RPC call, e.g.:\n\n     $ kamcmd tls.reload\n            \n\nA quick way to create the CRL in PEM format, using OpenSSL is:\n\n     $ openssl ca -gencrl -keyfile cacert.key -cert cacert.pem -out my_crl.pem\n            \n\nmy_crl.pem will contain the signed list of the revoked certificates.\n\nTo revoke a TLS certificate use something like:\n\n     $ openssl ca -revoke bad_cert.pem -keyfile cacert.key -cert cacert.pem\n            \n\nand then refresh the crl file using the command above.\n\nTo display the CRL contents use:\n\n     $ openssl crl -in crl.pem -noout -text\n            \n\nSee also *ca_list*, *verify_certificate*, *verify_depth* and\n*require_certificate*.\n\n    ...\n    modparam(\"tls\", \"crl\", \"/usr/local/etc/kamailio/crl.pem\")\n    ...\n            \n\n",
  "verify_certificate": "### verify_certificate (boolean)\n\nIf enabled it will force certificate verification when connecting to\nother SIP servers.. For more information see the\n[verify(1)](https://www.openssl.org/docs/manmaster/man1/verify.html)\nOpenSSL man page.\n\nNote: the certificate verification will always fail if the ca_list is\nempty.\n\nSee also: `ca_list`, `require_certificate`, `verify_depth`.\n\nBy default the certificate verification is off.\n\n    ...\n    modparam(\"tls\", \"verify_certificate\", 1)\n    ...\n            \n\n",
  "verify_depth": "### verify_depth (integer)\n\nSets how far up the certificate chain will the certificate verification\ngo in the search for a trusted CA.\n\nSee also: `ca_list`, `require_certificate`, `verify_certificate`,\n\nThe default value is 9.\n\n    ...\n    modparam(\"tls\", \"verify_depth\", 9)\n    ...\n            \n\n",
  "require_certificate": "### require_certificate (boolean)\n\nWhen enabled Kamailio will require a certificate from a client\nconnecting to the TLS port. If the client does not offer a certificate\nand `verify_certificate` is on, certificate verification will fail.\n\nThe default value is off.\n\n    ...\n    modparam(\"tls\", \"require_certificate\", 1)\n    ...\n            \n\n",
  "cipher_list": "### cipher_list (string)\n\nSets the list of accepted ciphers. The list consists of cipher strings\nseparated by colons. For more information on the cipher list format see\nthe\n[cipher(1)](https://www.openssl.org/docs/manmaster/man1/ciphers.html)\nOpenSSL man page.\n\nThe default value is not set (all the OpenSSL supported ciphers are\nenabled).\n\n    ...\n    modparam(\"tls\", \"cipher_list\", \"HIGH\")\n    ...\n            \n\n",
  "server_name": "### server_name (string)\n\nSets the Server Name Indication (SNI) value.\n\nThis is a TLS extension enabling one TLS server to serve multiple host\nnames with unique certificates.\n\nThe default value is empty (not set).\n\n    ...\n    modparam(\"tls\", \"server_name\", \"kamailio.org\")\n    ...\n            \n\n",
  "connection_timeout": "### connection_timeout (int)\n\nSets the amount of time after which an idle TLS connection will be\nclosed, if no I/O ever occurred after the initial open. If an I/O event\noccurs, the timeout will be extended with tcp_connection_lifetime. The\nvalue is expressed in seconds.\n\nThe default value is 10 min.\n\nIf the value set is -1, the connection will never be close on idle.\n\nThis setting can be changed also at runtime, via the RPC interface and\nconfig framework. The config variable name is *tls.connection_timeout*.\n\n    ...\n    modparam(\"tls\", \"connection_timeout\", 60)\n    ...\n            \n\n     $ kamcmd cfg.set_now_int tls connection_timeout 180\n            \n\n",
  "tls_disable_compression": "### tls_disable_compression (boolean)\n\nIf set compression over TLS will be disabled. Note that compression uses\na lot of memory (about 10x more than with the compression disabled), so\nif you want to minimize memory usage is a good idea to disable it. TLS\ncompression also expose you for the\n[CRIME](https://en.wikipedia.org/wiki/CRIME_(security_exploit)) security\nvulnerability.\n\nBy default TLS compression is disabled.\n\n    ...\n    modparam(\"tls\", \"tls_disable_compression\", 0) # enable\n    ...\n            \n\n",
  "ssl_release_buffers": "### ssl_release_buffers (integer)\n\nRelease internal OpenSSL read or write buffers as soon as they are no\nlonger needed. Combined with `ssl_freelist_max_len` has the potential of\nsaving a lot of memory ( ~ 32k per connection in the default\nconfiguration, or 16k + `ssl_max_send_fragment`). For Kamailio versions\n\\> 3.0 it makes little sense to disable it (0) since the tls module\nalready has its own internal buffering.\n\nA value of -1 would not change this option from its openssl default. Use\n0 or 1 for enable/disable.\n\nBy default the value is 1 (enabled).\n\n<div class=\"note\">\n\nThis option is supported only for OpenSSL versions \\>= *1.0.0*. On all\nthe other versions attempting to change the default will trigger an\nerror.\n\n</div>\n\n    modparam(\"tls\", \"ssl_release_buffers\", 1)\n            \n\n",
  "ssl_freelist_max_len": "### ssl_freelist_max_len (integer)\n\nSets the maximum number of free memory chunks, that OpenSSL will keep\nper connection. Setting it to 0 would cause any unused memory chunk to\nbe immediately freed, reducing the memory footprint. A too large value\nwould result in extra memory consumption.\n\nShould be combined with `ssl_release_buffers`.\n\nA value of -1 has a special meaning: the OpenSSL default will be used\n(no attempt on changing the value will be made). For OpenSSL 1.0 the\ninternal default is 32.\n\nBy default the value is 0 (no freelist).\n\n<div class=\"note\">\n\nThis option is supported only for OpenSSL versions \\>= *1.0.0*. On all\nthe other versions attempting to change the default will trigger an\nerror.\n\n</div>\n\n    modparam(\"tls\", \"ssl_freelist_max_len\", 0)\n            \n\n",
  "ssl_max_send_fragment": "### ssl_max_send_fragment (integer)\n\nSets the maximum number of bytes (from the clear text) sent into one TLS\nrecord. Valid values are between 512 and 16384. Note however that even\nvalid low values might not be big enough to allow a successful handshake\n(try minimum 1024).\n\nLower values would lead to less memory usage, but values lower than the\ntypical Kamailio write size would incur a slight performance penalty.\nGood values are bigger than the size of the biggest SIP packet one\nnormally expects to forward. For example in most setups 2048 would be a\ngood value.\n\n<div class=\"note\">\n\nValues on the lower side, even if valid (\\> 512), might not allow for a\nsuccessful initial handshake. This happens if the certificate does not\nfit inside one send fragment. Values lower than 1024 should not be used.\nEven with higher values, if the handshake fails, try increasing the\nvalue.\n\n</div>\n\nA value of -1 has a special meaning: the OpenSSL default will be used\n(no attempt on changing the value will be made).\n\nBy default the value is -1 (the OpenSSL default, which at least in\nOpenSSL 1.0.0 is ~ 16k).\n\n<div class=\"note\">\n\nThis option is supported only for OpenSSL versions \\>= *0.9.9*. On all\nthe other versions attempting to change the default will trigger an\nerror.\n\n</div>\n\n    modparam(\"tls\", \"ssl_max_send_fragment\", 4096)\n            \n\n",
  "ssl_read_ahead": "### ssl_read_ahead (boolean)\n\nEnables read ahead, reducing the number of internal OpenSSL BIO read()\ncalls. This option has only debugging value, in normal circumstances it\nshould not be changed from the default.\n\nWhen disabled OpenSSL will make at least 2 BIO read() calls per received\nrecord: one to get the record header and one to get the rest of the\nrecord.\n\nThe TLS module buffers internally all read()s and defines its own fast\nBIO so enabling this option would only cause more memory consumption and\na minor slow-down (extra memcpy).\n\nA value of -1 has a special meaning: the OpenSSL default will be used\n(no attempt on changing the value will be made).\n\nBy default the value is 0 (disabled).\n\n    modparam(\"tls\", \"ssl_read_ahead\", 1)\n            \n\n",
  "send_close_notify": "### send_close_notify (boolean)\n\nEnables/disables sending close notify alerts prior to closing the\ncorresponding TCP connection. Sending the close notify prior to TCP\nshutdown is \"nicer\" from a TLS point of view, but it has a measurable\nperformance impact. Default: off. Can be set at runtime\n(tls.send_close_notify).\n\nThe default value is 0 (off).\n\nIt can be changed also at runtime, via the RPC interface and config\nframework. The config variable name is tls.send_close_notify.\n\n    ...\n    modparam(\"tls\", \"send_close_notify\", 1)\n    ...\n            \n\n     $ kamcmd cfg.set_now_int tls send_close_notify 1\n            \n\n",
  "con_ct_wq_max": "### con_ct_wq_max (integer)\n\nSets the maximum allowed per connection clear-text send queue size in\nbytes. This queue is used when data cannot be encrypted and sent\nimmediately because of an ongoing TLS level renegotiation.\n\nThe default value is 65536 (64 Kb).\n\nIt can be changed also at runtime, via the RPC interface and config\nframework. The config variable name is tls.con_ct_wq_max.\n\n    ...\n    modparam(\"tls\", \"con_ct_wq_max\", 1048576)\n    ...\n            \n\n     $ kamcmd cfg.set_now_int tls con_ct_wq_max 1048576\n            \n\n",
  "ct_wq_max": "### ct_wq_max (integer)\n\nSets the maximum total number of bytes queued in all the clear-text send\nqueues. These queues are used when data cannot be encrypted and sent\nimmediately because of an ongoing TLS level renegotiation.\n\nThe default value is 10485760 (10 Mb).\n\nIt can be changed also at runtime, via the RPC interface and config\nframework. The config variable name is `tls.ct_wq_max`.\n\n    ...\n    modparam(\"tls\", \"ct_wq_max\", 4194304)\n    ...\n            \n\n     $ kamcmd cfg.set_now_int tls ct_wq_max 4194304\n            \n\n",
  "ct_wq_blk_size": "### ct_wq_blk_size (integer)\n\nMinimum block size for the internal clear-text send queues (debugging /\nadvanced tuning). Good values are multiple of typical datagram sizes.\n\nThe default value is 4096.\n\nIt can be changed also at runtime, via the RPC interface and config\nframework. The config variable name is `tls.ct_wq_blk_size`.\n\n    ...\n    modparam(\"tls\", \"ct_wq_blk_size\", 2048)\n    ...\n            \n\n     $ kamcmd cfg.set_now_int tls ct_wq_blk_size 2048\n            \n\n",
  "tls_log": "### tls_log (int)\n\nSets the log level at which TLS related messages will be logged.\n\nThe default value is 3 (L_DBG).\n\nIt can be changed also at runtime, via the RPC interface and config\nframework. The config variable name is `tls.log`.\n\n    ...\n    # ignore TLS messages if Kamailio is started with debug less than 10\n    modparam(\"tls\", \"tls_log\", 10)\n    ...\n            \n\n     $ kamcmd cfg.set_now_int tls log 10\n            \n\n",
  "tls_debug": "### tls_debug (int)\n\nSets the log level at which TLS debug messages will be logged. Note that\nTLS debug messages are enabled only if the TLS module is compiled with\ndebugging enabled (e.g. -DTLS_WR_DEBUG, -DTLS_RD_DEBUG or\n-DTLS_BIO_DEBUG).\n\nThe default value is 3 (L_DBG).\n\nIt can be changed also at runtime, via the RPC interface and config\nframework. The config variable name is `tls.debug`.\n\n    ...\n    # ignore TLS debug messages if Kamailio is started with debug less than 10\n    modparam(\"tls\", \"tls_debug\", 10)\n    ...\n            \n\n     $ kamcmd cfg.set_now_int tls debug 10\n            \n\n",
  "low_mem_threshold1": "### low_mem_threshold1 (integer)\n\nSets the minimal free memory from which attempts to open or accept new\nTLS connections will start to fail. The value is expressed in KB.\n\nThe default value depends on whether the OpenSSL library used handles\nlow memory situations in a good way (openssl bug \\#1491). As of this\nwriting this is not true for any OpenSSL version (including 0.9.8e).\n\nIf an ill-behaved OpenSSL version is detected, a very conservative value\nis chosen, which depends on the maximum possible number of\nsimultaneously created TLS connections (and hence on the process\nnumber).\n\nThe following values have a special meaning:\n\n- -1 - use the default value\n\n- 0 - disable (TLS connections will not fail preemptively)\n\nIt can be changed also at runtime, via the RPC interface and config\nframework. The config variable name is `tls.low_mem_threshold1`.\n\nSee also `tls.low_mem_threshold2`.\n\n    ...\n    modparam(\"tls\", \"low_mem_threshold1\", -1)\n    ...\n        \n\n     $ kamcmd cfg.set_now_int tls low_mem_threshold1 2048\n            \n\n",
  "low_mem_threshold2": "### low_mem_threshold2 (integer)\n\nSets the minimal free memory from which TLS operations on already\nestablished TLS connections will start to fail preemptively. The value\nis expressed in KB.\n\nThe default value depends on whether the OpenSSL library used handles\nlow memory situations (openssl bug \\#1491). As of this writing this is\nnot true for any OpenSSL version (including 0.9.8e).\n\nIf an ill-behaved OpenSSL version is detected, a very conservative value\nis chosen, which depends on the maximum possible number of\nsimultaneously created TLS connections (and hence on the process\nnumber).\n\nThe following values have a special meaning:\n\n- -1 - use the default value\n\n- 0 - disable (TLS operations will not fail preemptively)\n\nIt can be changed also at runtime, via the RPC interface and config\nframework. The config variable name is `tls.low_mem_threshold2`.\n\nSee also `tls.low_mem_threshold1`.\n\n    ...\n    modparam(\"tls\", \"low_mem_threshold2\", -1)\n    ...\n        \n\n     $ kamcmd cfg.set_now_int tls low_mem_threshold2 1024\n            \n\n",
  "tls_force_run": "### tls_force_run (boolean)\n\nIf enabled Kamailio will start even if some of the OpenSSL sanity checks\nfail (turn it on at your own risk).\n\nIf any of the following sanity checks fail, Kamailio will not start:\n\n- the version of the library the TLS module was compiled with is \"too\n  different\" from the library used at runtime. The versions should have\n  the same major, minor and fix level (e.g.: 0.9.8a and 0.9.8c are ok,\n  but 0.9.8 and 0.9.9 are not)\n\n- the OpenSSL library used at compile time and the one used at runtime\n  have different Kerberos options\n\nBy default tls_force_run is disabled.\n\n    ...\n    modparam(\"tls\", \"tls_force_run\", 11)\n    ...\n        \n\n",
  "session_cache": "### session_cache (boolean)\n\nIf enabled Kamailio will do caching of the TLS sessions data, generation\na session_id and sending it back to client.\n\nBy default TLS session caching is disabled (0).\n\n    ...\n    modparam(\"tls\", \"session_cache\", 1)\n    ...\n        \n\n",
  "session_id": "### session_id (str)\n\nThe value for session ID context, making sense when session caching is\nenabled.\n\nBy default TLS session_id is \"kamailio-tls-5.x.y\".\n\n    ...\n    modparam(\"tls\", \"session_id\", \"my-session-id-context\")\n    ...\n        \n\n",
  "renegotiation": "### renegotiation (boolean)\n\nIf enabled Kamailio will allow renegotiations of TLS connection\ninitiated by the client. This may expose to a security risk if the\nclient is not a trusted peer and keeps renegotiating, consuming CPU and\nbandwidth resources.\n\nBy default TLS renegotiation is disabled (0).\n\n    ...\n    modparam(\"tls\", \"renegotiation\", 1)\n    ...\n        \n\n",
  "init_mode": "### init_mode (int)\n\nAllow setting flags that control how the module is initialized and works\nat runtime. Many flags (bits) can be set at the same time (set the\nparameter to the sum of corresponding values). The flags are refered\nwith 0-indexing.\n\nIf flag (bit) at index 0 is set (value 1), the memory management\noperations registered for TLS are wrapped within a pthread mutex lock.\nIt can be useful with newer versions of libssl and libcrypto, which have\na more pthread multi-threading oriented design.\n\nIf flag (bit) at index 1 is set (value 2), the module executes openssl\nfork prepare API functions (see\n<https://www.openssl.org/docs/man1.1.1/man3/OPENSSL_fork_prepare.html>).\nIt is done only for openssl version greater or equal with 1.1.1.\n\nDefault value is 0.\n\n    ...\n    modparam(\"tls\", \"init_mode\", 1)\n    ...\n        \n\n",
  "config": "### config (string)\n\nSets the name of the TLS specific configuration file or configuration\ndirectory.\n\nIf set the TLS module will load a special configuration file or\nconfiguration files from configuration directory, in which different TLS\nparameters can be specified on a per role (server or client) and domain\nbasis (for now only IPs). The corresponding module parameters will be\nignored if a separate configuration file is used.\n\nIf the file or directory name starts with a '.' the path will be\nrelative to the working directory (*at runtime*). If it starts with a\n'/' it will be an absolute path and if it starts with anything else the\npath will be relative to the main config file directory (e.g.: for\nkamailio -f /etc/kamailio/kamailio.cfg it will be relative to\n/etc/kamailio/).\n\nBy default no TLS configuration file is specified.\n\nThe following parameters can be set in the config file, for each domain:\n\n- tls_method - (str) - TLS methods\n\n- verify_certificate - (bool) - see modparam\n\n- require_certificate - (bool) - see modparam\n\n- verify_client - (str) - see modparam\n\n- private_key - (str) - see modparam\n\n- certificate - (str) - see modparam\n\n- verify_depth - (int) - see modparam\n\n- ca_list - (str) - see modparam\n\n- crl - (str) - see modparam\n\n- cipher_list - (str) - see modparam\n\n- server_name - (str) - SNI (server name identification)\n\n- server_name_mode - (int) - how to match server_name\n\n- server_id - (str) - server id\n\nThe value for server_name_mode specifies how to match the server_name\n(SNI). If set to 1, match the domain and all its subdomains. If set to\n2, match only the subdomains. If set to 0 (or anything else), match only\nthe domain given in server_name.\n\nThe value for server_id can be any string, being used to match TLS\nclient config profile, overriding the match on ip:port and server_name.\nThis is the recommended way for selecting a specific TLS client config\nprofile, because the local or remote port is hard to predict for a\nstream connection - see parameter `xavp_cfg` to learn how to enable it.\n\nAll the parameters that take filenames as values will be resolved using\nthe same rules as for the tls config filename itself: starting with a\n'.' means relative to the working directory, a '/' means an absolute\npath and anything else a path relative to the directory of the current\nKamailio main config file.\n\nKamailio acts as a server when it accepts a connection and as a client\nwhen it initiates a new connection by itself (it connects to something).\n\nThe tls.cfg consists on a set of server and client TLS domain profiles.\nA server TLS domain profile starts with \\[server:domain\\]. A client TLS\ndomain profile starts with \\[client:domain\\]. The tokens 'server' and\n'client' are static values. The 'domain' part can be: 'ip:port' - the IP\naddress and port to match with the TLS connection; 'default' - (static\nstring) for client and server profiles to be used when no other profile\nis matched; 'any' - (static string) for client and server profiles to be\nmatched based on 'server_name', no matter of IP and port of the TLS\nconnection.\n\nThere can be only one of each \\[server:default\\] and \\[client:default\\]\nprofile definitions. Other profiles can be defined many times with the\nsame domain ('ip:port' or 'any'), but in that case they must have\n'server_name' set for matching SNI.\n\nIt is highly recommended to have \\[server:default\\] and\n\\[client:default\\] profile definitions. They are needed when SNI is not\nyet available. If SNI is provided, then the profile definition is\nsearched again to match on 'server_name'.\n\n    ...\n    [server:default]\n    method = TLSv1\n    verify_certificate = yes\n    require_certificate = yes\n    private_key = default_key.pem\n    certificate = default_cert.pem\n    ca_list = default_ca.pem\n    crl = default_crl.pem\n\n    [client:default]\n    verify_certificate = yes\n    require_certificate = yes\n\n    # more relaxed for connection on the loopback interface\n    [server:127.0.0.1:5061]\n    method = TLSv1\n    verify_certificate = yes\n    require_certificate = no\n    private_key = local_kamailio_org_key.pem\n    certificate = local_kamailio_org_cert.pem\n    verify_depth = 3\n    ca_list = local_ca.pem\n    server_name = kamailio.org\n\n    [client:127.0.0.1:5061]\n    method = TLSv1\n    verify_certificate = yes\n    require_certificate = yes\n    private_key = default_key.pem\n    certificate = default_cert.pem\n    ca_list = default_ca.pem\n    crl = default_crl.pem\n    server_name = kamailio.org\n    server_id = kamailio.org\n\n    # server profile on any address\n    [server:any]\n    method = TLSv1\n    verify_certificate = yes\n    require_certificate = no\n    private_key = kamailio_net_key.pem\n    certificate = kamailio_net_cert.pem\n    verify_depth = 3\n    ca_list = local_ca.pem\n    server_name = kamailio.net\n    server_name_mode = 1\n    ...\n        \n\nFor a more complete example check the *tls.cfg* distributed with the\nKamailio source (kamailio/modules/tls/tls.cfg).\n\n    ...\n    modparam(\"tls\", \"config\", \"/usr/local/etc/kamailio/tls.cfg\")\n    ...\n        \n\nThe file can be changed at runtime. The new config will not be loaded\nimmediately, but after the first `tls.reload` RPC call.\n\n     $ kamcmd cfg.set_now_string tls config \"/usr/local/etc/kamailio/new_tls.cfg\"\n     $ kamcmd tls.reload\n                \n\n",
  "xavp_cfg": "### xavp_cfg (string)\n\nSets the name of XAVP that stores attributes for TLS connections.\n\nThe following (inner) attributes can be set:\n\n- server_name - SNI to be used for outbound connections\n\n- server_id - string value to be used to match TLS config profile for\n  client (outbound) connections. If it is set, matching the TLS config\n  profile is done first on server_id and then on ip:port and\n  server_name. This is the recommended way for selecting a specific TLS\n  client config profile as the local or remote port is hard to predict\n  for a stream connection.\n\nThe default value is empty (not set).\n\n    ...\n      modparam(\"tls\", \"xavp_cfg\", \"tls\")\n     ...\n      $xavp(tls=>server_name) = \"kamailio.org\";\n      $xavp(tls[0]=>server_id) = \"kamailio.org\";\n      $du = \"sip:kamailio.org:5061;transport=tls\";\n      route(RELAY);\n    ...\n            \n\n",
  "event_callback": "### event_callback (str)\n\nThe name of the function in the kemi configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[...\\] blocks specific for tls module.\n\nThe function has one string parameter, the value is the name of the\nevent_route block, respectively \"tls:connection-out\".\n\n*Default value is 'empty' (no function is executed for events).*\n\n    ...\n    modparam(\"tls\", \"event_callback\", \"ksr_tls_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_tls_event(evname)\n        KSR.info(\"===== tls module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n    ...\n\n",
  "rand_engine": "### rand_engine (str)\n\nSet the random number generator engine for libssl.\n\nNote: the default random number generator (PRNG) engine of libssl v1.1.x\nis not designed for multi-process applications and can result in a\ncrash. Therefore set the PRNG engine to one of the options listed in\nthis section. If libssl 1.1.x (or newer) is detected at compile time,\nthen the PRNG engine is set to \"cryptorand\".\n\nThe following options are available:\n\n- krand - use internal kam_rand() function\n\n- fastrand - use internal fastrand (ISAAC) function\n\n- cryptorand - use internal cryptorand (Fortuna) function\n\n- kxlibssl - default libssl rand engine wrapped by a Kamailio mutex\n\nNote: the krand and fastrand engines are not recommended for use on\nsystems requiring strong security, as they may not generate numbers with\nenough randomness and are not cryptographically secure.\n\nThe default value is empty (not set) for libssl v1.0.x or older, and\n\"cryptorand\" for libssl v1.1.x or newer.\n\n    ...\n    modparam(\"tls\", \"rand_engine\", \"fastrand\")\n    ...\n            \n\n",
  "engine": "### engine (string)\n\nIf OpenSSL is compiled with engine support this will allow algorithms to\nbe offloaded and private keys from HSM to be used. Currently only a\nsingle global engine is supported. However, private keys can be\nspecified per_domain.\n\nTo use private keys from the HSM, the name is the HSM key label prefixed\nby `/engine:`.\n\n    ...\n    ## example for the Gem engine\n    modparam(\"tls\", \"engine\", \"gem\")\n    # can also be set per-domain in tls.cfg\n    modparam(\"tls\", \"private_key\", \"/engine:my_HSM_key_label\")\n\n    ## example for engine_pkcs11\n    modparam(\"tls\", \"engine\", \"pkcs11\")\n    modparam(\"tls\", \"private_key\", \"/engine:pkcs11:token=MYTOKEN;object=MYKEYLABEL\")\n\n    modparam(\"tls\", \"engine_config\", \"/usr/local/etc/kamailio/openssl.cnf\")\n    modparam(\"tls\", \"engine_algorithms\", \"ALL\")\n    ...\n                    \n\nBy default OpenSSL engine support is disabled (NONE). This global param\nis not supported in the tls config file.\n\n",
  "engine_config": "### engine_config (string)\n\nAn OpenSSL configuration file to initialize the engine. Typically used\nto send PIN to HSMs to unlock private keys. See the HSM howto for an\nexample. This global param is not supported in the tls config file.\n\n",
  "engine_algorithms": "### engine_algorithms (string)\n\nA list of cryptographic methods to be set as default in the engine. This\nis a comma-separated list of values from ALL RSA DSA DH EC RAND CIPHERS\nDIGESTS PKEY PKEY_CRYPTO PKEY_ASN1. Not all methods are supported by\nevery engine.\n\nThe default is not to set any methods as default. This global param is\nnot supported in the tls config file.\n\n",
  "verify_client": "### verify_client (string)\n\nProvides an alternative to verify_certificate and require_certificate\nmodparam and tls.cfg parameters, and creates an additional opportunistic\nconnection establishment option for connections with with unverifiable\ncertificates (optional_no_ca).\n\nThis is useful for allowing connections from SIP phones with self-signed\ncertificates, signed by unrecognized root CAs, expired certificates,\netc.\n\nThe following values have respective behaviors:\n\n- off - no client certificate request performed.\n\n- on - require a verified certificate from the client.\n\n- optional - ask client for certificate. If one is provided, it must be\n  verified. Allowing missing certificate.\n\n- optional_no_ca - ask client for certificate. Opportunistically try to\n  verify certificate. Allow connection regardless of whether there is no\n  certificate or whether certificate is present (verified or not). Note\n  that verification status can be retrieved via \\$tls_peer_verified.\n\nDefault value is 'off' (no client certificate request performed).\n\nRecommendation: when using this parameter, do not use verify_certificate\nor require_certificate parameters. Conversion table is as follows:\n\n- verify_certificate=0, require_certificate=0 =\\> verify_client=\"off\"\n\n- verify_certificate=1, require_certificate=0 =\\>\n  verify_client=\"optional\"\n\n- verify_certificate=1, require_certificate=1 =\\> verify_client=\"on\"\n\n<!-- -->\n\n    ...\n    modparam(\"tls\", \"verify_client\", \"on\")\n    ...\n            \n\n    ...\n    [server:1.2.3.4:5061]\n    method = TLSv1\n    verify_client = on\n    ...\n\n    [server:5.6.7.8:5061]\n    method = TLSv1.2\n    verify_client = optional_no_ca\n    ...\n            \n\n"
 },
 "tsilo": {
  "hash_size": "### hash_size (integer)\n\nThe size of the hash table internally used to keep the transaction. A\nlarger table is much faster but consumes more memory. The hash size must\nbe a power of two, otherwise it will be rounded down to the nearest\npower of two.\n\n*Default value is \u201c2048\u201d.*\n\n    ...\n    modparam(\"tsilo\", \"hash_size\", 1024)\n    ...\n\n",
  "use_domain": "### use_domain (integer)\n\nSpecify if the domain part of the URI should be also saved and used for\nstoring and retrieving users' transactions. Useful in multi domain\nscenarios. Non 0 value means true.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"tsilo\", \"use_domain\", 1)\n    ...\n\n"
 },
 "ims_registrar_scscf": {},
 "auth_diameter": {
  "diameter_client_host": "### diameter_client_host (string)\n\nHostname of the machine where the DIAMETER Client is running.\n\n*Default value is \u201clocalhost\u201d.*\n\n    ...\n    modparam(\"auth_diameter\", \"diameter_client_host\", \"10.10.10.10\")\n    ...\n\n",
  "diameter_client_port": "### diameter_client_port (int)\n\nPort number where the DIAMETER Client is listening.\n\n*Default value is \u201c3000\u201d.*\n\n    ...\n    modparam(\"auth_diameter\", \"diameter_client_port\", 3000)\n    ...\n\n",
  "use_domain": "### use_domain (int)\n\nSpecifies whether the domain name part of URI is used when checking the\nuser's privileges.\n\n*Default value is \u201c0 (0==false and 1==true )\u201d.*\n\n    ...\n    modparam(\"auth_diameter\", \"use_domain\", 1)\n    ...\n\n"
 },
 "systemdops": {},
 "cfg_rpc": {},
 "xprint": {
  "buf_size": "### buf_size (integer)\n\nMaximum size of the log message.\n\nDefault value is 4096.\n\n    ...\n    modparam(\"xprint\", \"buf_size\", 8192)\n    ...\n            \n\n"
 },
 "sst": {
  "enable_stats": "### enable_stats (integer)\n\nIf the statistics support should be enabled or not. Via statistic\nvariables, the module provides information about the dialog processing.\nSet it to zero to disable or to non-zero to enable it.\n\n*Default value is \u201c1\u201d (enabled).*\n\n    ...\n    modparam(\"sst\", \"enable_stats\", 0)\n    ...\n\n",
  "min_se": "### min_se (integer)\n\nThe value is used to set the proxies MIN-SE value and is used in the 422\nerror reply as the proxies MIN-SE: header value if the \u201csstCheckMin()\u201d\nflag is set to true and the check fails.\n\nIf not set and \u201csstCheckMin()\u201d is called with the send-reply flag set to\ntrue, the default 1800 seconds will be used as the compare and the\nMIN-SE: header value if the 422 reply is sent.\n\n*Default value is \u201c1800\u201d seconds.*\n\n    ...\n    modparam(\"sst\", \"min_se\", 2400)\n    ...\n\n",
  "timeout_avp": "### timeout_avp (string)\n\nThis parameter must be set to the same value as the dialog module\nparameter of the same name, when it is wanted to update dialog timeout\nusing Session-Expires header value. If this parameter is not set, the\nsst module will not update dialog timeout.\n\nWith this parameter, the sst module knows which avp is expected by the\ndialog module to change to a new expire value.\n\nNote that the avp is set only for requests within dialog, not for the\ninitial INVITE. For this one, it can be done using script operations,\nsee the next example for such solution.\n\n*Default value is \u201cNULL\u201d (not set by default).*\n\n    ...\n    modparam(\"dialog\", \"timeout_avp\", \"$avp(dlgtimeout)\")\n    # Set the sst modules timeout_avp to be the same value\n    modparam(\"sst\", \"timeout_avp\", \"$avp(dlgtimeout)\")\n    ...\n    request_route {\n        ...\n        # when wanting to use Session-Expires value for initial INVITE\n        if(is_method(\"INVITE\") and !has_totag()) {\n            if(is_present_hf(\"Session-Expires\")) {\n                $avp(dlgtimeout) = $(hdr(Session-Expires){s.int});\n            }\n        }\n        ...\n    }\n    ...\n\n",
  "reject_to_small": "### reject_to_small (integer)\n\nIn the initial INVITE if the UAC has requested a Session-Expires: and\nits value is smaller than our local policies Min-SE (see min_se above),\nthen the proxy has the right to reject the call by replying to the\nmessage with a \u201c422 Session Timer Too Small\u201d and state our local Min-SE:\nvalue. The INVITE is NOT forwarded on through the proxy.\n\nIf this flag is true, the SST module will reject the INVITE with a 422\nresponse. If false, the INVITE is forwarded through the PROXY without\nany modifications.\n\n*Default value is \u201c1\u201d (true/on).*\n\n    ...\n    modparam(\"sst\", \"reject_to_small\", 0)\n    ...\n\n",
  "sst_flag": "### sst_flag (integer)\n\nKeeping with Kamailio, the module will not do anything to any message\nunless instructed to do so via the kamailio.cfg script. You must set the\nsst_flag value in the setflag() call of the INVITE you want the sst\nmodule to process. But before you can do that, you need to tell the sst\nmodule which flag value you are assigning to sst.\n\nIn most cases whenever you set the dialog flag you will want to set the\nsst flag. If the dialog flag is not set and the sst flag is set, it will\nnot have any effect.\n\n*This parameter must be set or the module will not load.*\n\n*Default value is \u201cNot set!\u201d.*\n\n    ...\n    modparam(\"dialog\", \"dlg_flag\", 5)\n    modparam(\"sst\", \"sst_flag\", 6)\n    ...\n    route {\n      ...\n      if (method==\"INVITE\") {\n        setflag(5); # set the dialog flag\n        setflag(6); # set the sst flag\n      }\n      ...\n    }\n\n"
 },
 "rtjson": {
  "xavp_cfg": "### xavp_cfg (str)\n\nThe name of the xavp to be used internally by the module.\n\n*Default value is \"rtjson\".*\n\n    ...\n    modparam(\"rtjson\", \"xavp_cfg\", \"myxavp\")\n    ...\n\n"
 },
 "kafka": {},
 "ims_qos": {
  "rx_dest_realm": "### rx_dest_realm (string)\n\nThis is the name of the Diameter realm of the Diameter server (typically\na PCRF).\n\n*Default value is 'ims.smilecoms.com'.*\n\n    ...\n    modparam(\"ims_qos\", \"rx_dest_realm\", \"ims.smilecoms.com\")\n    ...\n            \n\n",
  "rx_forced_peer": "### rx_forced_peer (string)\n\nFQDN of the Diameter server (typically a PCRF) to communicate with. If\nnot set then realm routing is used. If you use this, the routing defined\nin your diameter xml configuration file (CDP) will be ignored and as a\nresult you will lose the benefits of load balancing and failover.\n\n*Default value is ''.*\n\n    ...\n    modparam(\"ims_qos\", \"rx_forced_peer\", \"pcrf.ims.smilecoms.com\")\n    ...\n            \n\n",
  "rx_auth_expiry": "### rx_auth_expiry (integer)\n\nThis is the expiry length in seconds of the initiated Diameter sessions.\n\n*Default value is 7200.*\n\n    ...\n    modparam(\"ims_qos\", \"rx_auth_expiry\", 14400)\n    ...\n            \n\n",
  "cdp_event_latency": "### cdp_event_latency (integer)\n\nThis is a flag to determine whether or slow CDP responses should be\nreported in the log file. 1 is enabled and 0 is disabled.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"ims_qos\", \"cdp_event_latency\", 1)\n    ...\n            \n\n",
  "cdp_event_threshold": "### cdp_event_threshold (integer)\n\nThis time in milliseconds is the limit we should report a CDP response\nas slow. i.e. if a CDP response exceeds this limit it will be reported\nin the log file. This is only relevant is cdp_event_latency is enabled\n(set to 0).\n\n*Default value is 500.*\n\n    ...\n    modparam(\"ims_qos\", \"cdp_event_threshold\", 500)\n    ...\n            \n\n",
  "cdp_event_latency_log": "### cdp_event_latency_log (integer)\n\nThis time log level at which we should report slow CDP responses. 0 is\nERROR, 1 is WARN, 2 is INFO and 3 is DEBUG. This is only relevant is\ncdp_event_latency is enabled (set to 0)\n\n*Default value is 0.*\n\n    ...\n    modparam(\"ims_qos\", \"cdp_event_latency_log\", 1)\n    ...\n            \n\n",
  "authorize_video_flow": "### authorize_video_flow (integer)\n\nThis is a flag that specifies whether or not to authorize video flows. 1\nmeans video flows will be authorized over Rx and 0 means video flows\nwill not be authorized over Rx\n\n*Default value is 1.*\n\n    ...\n    modparam(\"ims_qos\", \"authorize_video_flow\", 0)\n    ...\n            \n\n",
  "cdp_event_list_size_threshold": "### cdp_event_list_size_threshold (integer)\n\nThis is a threshold on the size of the cdp event list. Once the queue\nexceeds this length a warning is logged. 0 disables this feature\n\n*Default value is 0.*\n\n    ...\n    modparam(\"ims_qos\", \"cdp_event_list_size_threshold\", 10)\n    ...\n            \n\n",
  "audio_default_bandwidth": "### audio_default_bandwidth (integer)\n\nThis parameters defines the default bandwidth for Audio, if no\n\"b=AS\"-Parameter is found in the SDP.\n\n*Default value is 64 (64 kBit)*\n\n    ...\n    modparam(\"ims_qos\", \"audio_default_bandwidth\", 32)\n    ...\n            \n\n",
  "video_default_bandwidth": "### video_default_bandwidth (integer)\n\nThis parameters defines the default bandwidth for Video, if no\n\"b=AS\"-Parameter is found in the SDP.\n\n*Default value is 128 (128 kBit)*\n\n    ...\n    modparam(\"ims_qos\", \"video_default_bandwidth\", 256)\n    ...\n            \n\n",
  "early_qosrelease_reason": "### early_qosrelease_reason (String)\n\nThis sets the default Reason, when a call is terminated in early stage\ndue to QoS-failure.\n\n*Default value is \"QoS released\", a call in early stage would be\nreleased with \"488 QoS released\".*\n\n    ...\n    modparam(\"ims_qos\", \"early_qosrelease_reason\", \"Sorry - QoS failed\")\n    ...\n            \n\n",
  "confirmed_qosrelease_headers": "### confirmed_qosrelease_headers (String)\n\nThese headers are added to the BYE-Message, when a confirmed call is\nterminated due to a QoS failure.\n\n*Default value is \"\", no Extra-Headers*\n\n*The headers must end with CRLF.*\n\n    ...\n    modparam(\"ims_qos\", \"confirmed_qosrelease_headers\", \"X-Reason: QoS failed\\r\\n\")\n    ...\n            \n\n",
  "regex_sdp_ip_prefix_to_maintain_in_fd": "### regex_sdp_ip_prefix_to_maintain_in_fd (String)\n\nThe flow-description AVP is typically populated using IP:port\ninformation present in the SDP. Certain (buggy) UEs can change ports\nmidway during calls which causes the flow-description to no longer match\nthe traffic. This parameter allows the flow-description AVP to use to\nthe any keyword instead of certain IP:port combinations in the SDP. The\nparameter is a regex that if set adds an extra filter for all IPs that\ndo not match the regex with the any keyword in the flow-description AVP\n\n*Default value is \"\", no extra filters added*\n\n    ...\n    modparam(\"ims_qos\", \"regex_sdp_ip_prefix_to_maintain_in_fd\", \"10.21.0.1\")\n    ...\n            \n\n",
  "terminate_dialog_on_rx_failure": "### terminate_dialog_on_rx_failure integer\n\nIf set then active dialogs associated with an Rx session are torn down\nin the Rx session fails\n\n*Default value is 1, dialogs are torn down*\n\n    ...\n    modparam(\"ims_qos\", \"terminate_dialog_on_rx_failure\", 0)\n    ...\n            \n\n",
  "delete_contact_on_rx_failure": "### delete_contact_on_rx_failure integer\n\nIf set then contacts associated with signalling Rx sessions are deleted\nif the Rx session fails\n\n*Default value is 1, contacts are deleted*\n\n    ...\n    modparam(\"ims_qos\", \"delete_contact_on_rx_failure\", 0)\n    ...\n            \n\n",
  "include_rtcp_fd": "### include_rtcp_fd integer\n\nIf set then a flow description is added for media flows - next available\nodd port is used as the default for RTCP traffic\n\n*Default value is 0, RTCP flow description not added*\n\n    ...\n    modparam(\"ims_qos\", \"include_rtcp_fd\", 1)\n    ...\n            \n\n",
  "af_signaling_ip": "### af_signaling_ip (String)\n\nSet P-CSCF IPv4 address to generate the flows for the UE - PCSCF\nsignaling path. Used only for AAR register, Flow-Description AVP (507)\n\n*Default value is 127.0.0.1*\n\n    ...\n    modparam(\"ims_qos\", \"af_signaling_ip\", \"127.0.0.1\")\n    ...\n            \n\n",
  "af_signaling_ip6": "### af_signaling_ip6 (String)\n\nSet P-CSCF IPv6 address to generate the flows for the UE - PCSCF\nsignaling path. Used only for AAR register, Flow-Description AVP (507)\n\n*Default value is \"\"*\n\n    ...\n    modparam(\"ims_qos\", \"af_signaling_ip6\", \"fd16::205:2dee:ce4a:ab22\")\n    ...\n            \n\n",
  "media_type": "### media_type (String)\n\nDescribe Media Type AVP(520) for AAR register\n\n*Default value is 'control'*\n\n    ...\n    modparam(\"ims_qos\", \"media_type\", \"audio\")\n    ...\n            \n\n",
  "flow_protocol": "### flow_protocol (String)\n\nDescribe Flow protocol for Flow-Description AVP (507). Used only for AAR\nregister\n\n*Default value is 'IP'*\n\n    ...\n    modparam(\"ims_qos\", \"flow_protocol\", \"UDP\")\n    ...\n            \n\n",
  "omit_flow_ports": "### omit_flow_ports integer\n\nIf set to 1 ommit ports for Flow-Description AVP (507). Used only for\nAAR register\n\n*Default value is 0, Add ports to Flow-Description AVP (507)*\n\n    ...\n    modparam(\"ims_qos\", \"omit_flow_ports\", 1)\n    ...\n            \n\n",
  "rs_default_bandwidth": "### rs_default_bandwidth integer\n\nDescribe default RS-Bandwidth AVP(522) for AAR\n\n*Default value is 0*\n\n    ...\n    modparam(\"ims_qos\", \"rs_default_bandwidth\", 600)\n    ...\n            \n\n",
  "rr_default_bandwidth": "### rr_default_bandwidth integer\n\nDescribe default RR-Bandwidth AVP(521) for AAR\n\n*Default value is 0*\n\n    ...\n    modparam(\"ims_qos\", \"rr_default_bandwidth\", 2000)\n    ...\n            \n\n"
 },
 "xlog": {
  "buf_size": "### buf_size (integer)\n\nMaximum size of the log message.\n\n*Default value is 4096.*\n\n    ...\n    modparam(\"xlog\", \"buf_size\", 8192)\n    ...\n\n",
  "force_color": "### force_color (integer)\n\nWhen set to 1, forces color codes in log messages even if `log_stderror`\nis set to 0.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"xlog\", \"force_color\", 0)\n    ...\n\n",
  "long_format": "### long_format (integer)\n\nWhen set to 1, outputs the configuration file name in xlogl() and\nxdbgl() before the line number.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"xlog\", \"long_format\", 1)\n    ...\n\n",
  "prefix": "### prefix (str)\n\nPrefix to be output before the log message.\n\n*Default value is \"\\<script\\>: \".*\n\n    ...\n    modparam(\"xlog\", \"prefix\", \"-xlog: \")\n    ...\n\n",
  "prefix_mode": "### prefix_mode (str)\n\ncontrol behaviour of `prefix` value. if mode = 0 then `prefix` is\ntreated as string (current behaviour). if mode = 1 then `prefix` is\ntreated as pv_format specifier and value will be evaluated before\noutput.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"xlog\", \"prefix\", \"$cfg(name):$cfg(line)\")\n    modparam(\"xlog\", \"prefix_mode\", 1)\n    ...\n\n",
  "log_facility": "### log_facility (string)\n\nSyslog facility to be used for the xlog output. By setting this, and\nconfiguring syslog, you can get the xlog messages in a separate syslog\nfile than the debug messages issued from the source code.\n\nDefault value is NULL (unset - use same facility as source code debug\nmessages).\n\n    modparam(\"xlog\", \"log_facility\", \"LOG_DAEMON\")\n\n",
  "log_colors": "### log_colors (string)\n\nUpdate terminal colors used by the Kamailio core for log levels (when\nlog_stderr=1 and log_color=1). The value has to be 'logname=colors',\nwhere colors is two characters specifying foreground and background in\nthe same format as \\$C(xy) variable.\n\nThe parameter can be set many times. The value can also be a\n';'-separated list of color specifications.\n\nDefault value is NULL.\n\n    modparam(\"xlog\", \"log_colors\", \"L_ERR=cr\")\n    modparam(\"xlog\", \"log_colors\", \"L_ERR=cr;L_WARN=px\")\n\n",
  "methods_filter": "### methods_filter (int)\n\nThe bitmask with internal SIP method ids to be ignored by xlogm()\nfunction. The value can be changed at runtime via cfg reload framework:\n\n    ...\n    kamcmd cfg.set_now_int xlog methods_filter 15\n    ...\n\nTo see the associated internal ids for SIP requests, look in source tree\ninside parser/msg_parser.h for enum request_method.\n\n*Default value is -1 (all SIP methods are ignored).*\n\n    ...\n    modparam(\"xlog\", \"methods_filter\", 15)\n    ...\n\n"
 },
 "xmpp": {
  "backend": "### backend (string)\n\nThe mode you are using the module; it can be either \"component\" or\n\"server\".\n\n*Default value is \"component\".*\n\n    ...\n     modparam(\"xmpp\", \"backend\", \"server\")\n    ...\n\n",
  "domain_separator": "### domain_separator (string)\n\nIn the destination address we need an extra character as a domain\nseparator, apart from @. The address of the XMPP(jabber) client looks\nlike this:\n\"sip:username\\<domain_separator\\>jabber_server@gateway_sip_domain\". The\naddress of a SIP client has the following pattern :\n\"sip_username\\<domain_separator\\>sip_domain@gateway_xmpp_domain\"; A\ncommon used character in XMPP transports is \"%\".\n\n*Default value is \"\\*\".*\n\n    ...\n     modparam(\"xmpp\", \"domain_separator\", \"%\")\n    ...\n\n",
  "gateway_domain": "### gateway_domain (string)\n\nThe domain of the SIP-to-XMPP gateway - it has to be in DNS or SIP UA\nhas to use outbound proxy to SIP-to-XMPP gateway IP address. It has to\nbe used as domain in the destination address of the messages sent by SIP\nusers to XMPP users:\n\"sip:username\\<delim\\>jabber_server@gateway_domain\".\n\n*Default value is \"sip-xmpp.example.org\".*\n\n    ...\n     modparam(\"xmpp\", \"gateway_domain\", \"sip-xmpp.kamailio.org\")\n    ...\n\n",
  "xmpp_domain": "### xmpp_domain (string)\n\nThe XMPP domain of the component or the server, depending on the mode.\nIt can be the same as the gateway_domain. For a server DNS name, you\nhave to add \\_xmpp-server.\\_tcp SRV records in your DNS zone to enable\nconnections from other XMPP servers.\n\n*Default value is \"sip-xmpp.example.org\".*\n\n    ...\n     modparam(\"xmpp\", \"xmpp_domain\", \"xmpp-sip.kamailio.org\")\n    ...\n\n",
  "xmpp_host": "### xmpp_host (string)\n\nThe IP address or the hostname for the local XMPP/Jabber server to\nconnect to when the backend is set to \"component\". For server mode, this\nis the IP address the XMPP module binds to listen for connections coming\nfrom other XMPP servers.\n\n*Default value is \"xmpp.example.org\".*\n\n    ...\n     modparam(\"xmpp\", \"xmpp_host\", \"xmpp.kamailio.org\")\n    ...\n\n",
  "xmpp_port": "### xmpp_port (integer)\n\nIn component mode, this is the port the XMPP server component interface\nlistens to. In server mode, this is the port the module listens to.\n\n*Default value is \"5347\", if backend is set to \"component\" and \"5269\",\nif backend is set to \"server\".*\n\n    ...\n     modparam(\"xmpp\", \"xmpp_port\", 5269)\n    ...\n\n",
  "xmpp_password": "### xmpp_password (string)\n\nThe password of the local XMPP server.\n\n*This is the password for the component interface on the XMPP server,\nwhen connecting as a component. Default password is \"secret\". When\nconnecting to jabberd2, you need to make sure this is the password\nconfigured in the file \"c2s.xml\". This is how the default configuration\nfor the jabberd2 looks like:*\n\n                <router>\n        ...............\n        <!-- Username/password to authenticate as --&gt;\n        <user>jabberd</user>;          <!-- default: jabberd -->;\n        <pass>secret</pass>;           <!-- default: secret -->;  \n                \n\n    ...\n     modparam(\"xmpp\", \"xmpp_password\", \"secret\")\n    ...\n\n",
  "outbound_proxy": "### outbound_proxy (string)\n\nThe SIP address used as next hop when sending the message. Very useful\nwhen using Kamailio with a domain name not in DNS, or when using a\nseparate Kamailio instance for XMPP processing. If not set, the message\nwill be sent to the address in destination URI.\n\n*Default value is NULL.*\n\n    ...\n     modparam(\"xmpp\", \"outbound_proxy\", \"sip:kamailio.org;transport=tcp\")\n    ...\n\n",
  "gwmap": "### gwmap (string)\n\nSet the mappings between SIP and XMPP domains. This parameter can be set\nmany times, adding more SIP-XMPP domain mappings. Its value has to be a\nlist of tokens like 'sipdomain=xmppdomain', separated by ';' (e.g.,\n'sipdomain1=xmppdomain1;sipdomain2=xmppdomain2'.\n\nWhen this parameter is set, the URI encoding based on 'domain_separator'\nis no longer enabled. The module will use only addresses in the format\n'username@domain'. If the source or destination address does not match a\ndomain in gwmap, then the domain value is preserved when sending to the\nother protocol.\n\n*Default value is NULL.*\n\n    ...\n     modparam(\"xmpp\", \"gwmap\", \"sip.kamailio.org=xmpp.kamailio.org;abc.com=xyz.com\")\n     modparam(\"xmpp\", \"gwmap\", \"kamailio.net\")\n    ...\n\nBased on the above parameter values, if there is a SIP message from\n'sip:alice@sip.kamailio.org' going to 'sip:bob@abc.com', the XMPP\nmessage to be sent is from 'alice@xmpp.kamailio.org' to 'bob@xyz.com'.\n\n"
 },
 "app_jsdt": {
  "load": "### load (str)\n\nSet the path to the JavaScript file to be loaded at startup. Then you\ncan use jsdt_run(function, params) to execute a function from the script\nat runtime. If you use it for KEMI configuration, then it has to include\nthe required functions.\n\n*Default value is \u201cnull\u201d.*\n\n    ...\n    modparam(\"app_jsdt\", \"load\", \"/usr/local/etc/kamailio/js/myscript.js\")\n    ...\n\n",
  "mode": "### mode (int)\n\nControl if the API to load JavaScript module (nodejs interface) is\ninitialized or not.\n\n*Default value is \u201c1\u201d (initialize).*\n\n    ...\n    modparam(\"app_jsdt\", \"mode\", 0)\n    ...\n\n"
 },
 "uac": {
  "rr_from_store_param": "### rr_from_store_param (string)\n\nName of Record-Route header parameter that will be used to store an\nencoded version of the original FROM URI.\n\n*This parameter is optional, it's default value being \u201cvsf\u201d.*\n\n    ...\n    modparam(\"uac\",\"rr_from_store_param\",\"my_param\")\n    ...\n                    \n\n",
  "rr_to_store_param": "### rr_to_store_param (string)\n\nName of Record-Route header parameter that will be used to store\n(encoded) the original TO URI.\n\n*This parameter is optional, it's default value being \u201cvst\u201d.*\n\n    ...\n    modparam(\"uac\",\"rr_to_store_param\",\"my_param\")\n    ...\n                    \n\n",
  "restore_mode": "### restore_mode (string)\n\nThere are 3 modes of restoring the original FROM URI and the original TO\nURI:\n\n- \u201cnone\u201d - no information about original URI is stored; restoration is\n  not possible.\n\n- \u201cmanual\u201d - all following replies will be restored, but not also the\n  sequential requests - this must be manually updated based on original\n  URI.\n\n- \u201cauto\u201d - all sequential requests and replies will be automatically\n  updated based on stored original URI. For this option you have to set\n  \u201cmodparam(\"rr\", \"append_fromtag\", 1)\u201d.\n\n*This parameter is optional, it's default value being \u201cauto\u201d.*\n\n    ...\n    modparam(\"uac\",\"restore_mode\",\"auto\")\n    ...\n                    \n\n",
  "restore_dlg": "### restore_dlg (int)\n\nIf set to 1, the module uses dialog variables to store initial and new\nvalues for From/To headers. The Dialog module has to be loaded and all\ncalls that involve changes to From/To headers must be tracked.\n\n*Default value of this parameter is 0.*\n\n    ...\n    modparam(\"uac\", \"restore_dlg\", 1)\n    ...\n                    \n\n",
  "restore_passwd": "### restore_passwd (string)\n\nString password to be used to encrypt the RR storing parameters. If\nempty, no encryption will be used.\n\n*Default value of this parameter is empty.*\n\n    ...\n    modparam(\"uac\",\"restore_passwd\",\"my_secret_passwd\")\n    ...\n                    \n\n",
  "restore_from_avp": "### restore_from_avp (string)\n\nIf defined and restore_mode is manual or auto, the avp is used to save\nthe original from uri in order to be able to restore it in replies. That\nmakes sense, if the original-uri can not be extracted from the original\nrequest, e.g. if msg_apply_changes() was used after calling\nuac_replace_from() or uac_replace_to().\n\nIf you create a dialog ( with dlg_manage() ) before calling\nuac_replace_from(), this avp will not be needed. The values of the uris\nwill be stored as dialog variables.\n\n*Default value of this parameter is empty.*\n\n    ...\n    modparam(\"uac\",\"restore_from_avp\",\"$avp(original_uri_from)\")\n    ...\n                    \n\n",
  "restore_to_avp": "### restore_to_avp (string)\n\nIf defined and restore_mode is manual or auto, the avp is used to save\nthe original To URI in order to be able to restore it in replies. That\nmakes sense if the original-uri can not be extracted from the original\nrequest, e.g. if msg_apply_changes() was used after calling\nuac_replace_to()\n\nIf you create a dialog ( with dlg_manage() ) before calling or\nuac_replace_to(), this avp will not be needed. The values of the uris\nwill be stored as dialog variables.\n\n*Default value of this parameter is empty.*\n\n    ...\n    modparam(\"uac\",\"restore_to_avp\",\"$avp(original_uri_to)\")\n    ...\n                    \n\n",
  "credential": "### credential (string)\n\nContains a multiple definition of credentials used to perform\nauthentication.\n\n*This parameter is required if UAC authentication is used.*\n\n    ...\n    modparam(\"uac\",\"credential\",\"username:domain:password\")\n    ...\n                    \n\n",
  "auth_realm_avp": "### auth_realm_avp (string)\n\nThe definition of a PV that might contain the realm to be used to\nperform authentication.\n\nWhen the PV value is an empty string or NULL when uac_auth() is called,\nthe realm is taken from the reply and only username matching is done.\nThis can be used if the realm upstream will be using is not known in\nadvance.\n\n*If you define it, you also need to define \u201cauth_username_avp\u201d ([\n(string)](#uac.p.auth_username_avp)) and \u201cauth_password_avp\u201d ([\n(string)](#uac.p.auth_password_avp)).*\n\n    ...\n    modparam(\"uac\",\"auth_realm_avp\",\"$avp(arealm)\")\n    ...\n                    \n\n",
  "auth_username_avp": "### auth_username_avp (string)\n\nThe definition of an AVP that might contain the username to be used to\nperform authentication.\n\n*If you define it, you also need to define \u201cauth_realm_avp\u201d ([\n(string)](#uac.p.auth_realm_avp)) and \u201cauth_password_avp\u201d ([\n(string)](#uac.p.auth_password_avp)).*\n\n    ...\n    modparam(\"uac\",\"auth_username_avp\",\"$avp(auser)\")\n    ...\n                    \n\n",
  "auth_password_avp": "### auth_password_avp (string)\n\nThe definition of an AVP that might contain the password to be used to\nperform authentication.\n\n*If you define it, you also need to define \u201cauth_realm_avp\u201d ([\n(string)](#uac.p.auth_realm_avp)) and \u201cauth_username_avp\u201d ([\n(string)](#uac.p.auth_username_avp)).*\n\n    ...\n    modparam(\"uac\",\"auth_password_avp\",\"$avp(apasswd)\")\n    ...\n                    \n\n",
  "reg_db_url": "### reg_db_url (string)\n\nDB URL to fetch account profiles for registration. This parameter must\nbe set in order to enable remote registrations feature.\n\nThe default value is \"\" (no value).\n\n    ...\n    modparam(\"uac\", \"reg_db_url\",\n        \"mysql://kamailio:kamailiorw@localhost/kamailio\")\n    ...\n                    \n\n",
  "reg_timer_interval": "### reg_timer_interval (int)\n\nTimer interval (in seconds) at which registrations are managed, e.g.\nrenewed as needed.\n\n*The default value is 90 seconds.*\n\n    ...\n    modparam(\"uac\", \"reg_timer_interval\", 60)\n    ...\n                    \n\n",
  "reg_retry_interval": "### reg_retry_interval (int)\n\nFailed registration attempts will be retried after this interval (in\nseconds). The interval is not exact, retries may be attempted as much as\nreg_timer_interval secs earlier. If set to 0, failed registrations will\nbe disabled permanently.\n\nThe default value is 0 sec (disabled)\n\n    ...\n    modparam(\"uac\", \"reg_retry_interval\", 300)\n    ...\n                    \n\n",
  "reg_random_delay": "### reg_random_delay (int)\n\nSet a random reg_delay for each registration that has reg_delay set to 0\nin the database. If set to 0, randomization will be disabled.\n\nThe default value is 0 sec (disabled)\n\n    ...\n    modparam(\"uac\", \"reg_random_delay\", 300)\n    ...\n                    \n\n",
  "reg_hash_size": "### reg_hash_size (int)\n\nThe number of entries of the hash table used by uac_reg to store the\nregistration records is 2^hash_size. For hash_size=4, the number of\nslots of the hash table is 16.\n\n*Default value is \u201c4\u201d (16 slots).*\n\n    ...\n    modparam(\"uac\", \"reg_hash_size\", 10)\n    ...\n                    \n\n",
  "reg_db_table": "### reg_db_table (string)\n\nDB table name to fetch user profiles for registration.\n\n*This parameter is optional, it's default value being \u201cuacreg\u201d.*\n\n    ...\n    modparam(\"uac\", \"reg_db_table\", \"uacreg\")\n    ...\n                    \n\n",
  "reg_contact_addr": "### reg_contact_addr (string)\n\nAddress to be used to build contact address. Must be at least host part,\ncan have port and parameters. Must not include 'sip:'. The username part\nof the Contact: URI will be the L_UUID field in the database.\n\nA contact_addr value in the uacreg table will override the parameter for\nthis particular entry.\n\n    ...\n    modparam(\"uac\", \"reg_contact_addr\", \"192.168.1.2:5080\")\n    ...\n                    \n\n",
  "reg_keep_callid": "### reg_keep_callid (int)\n\nIf set to 0 (default), a new Call-Id will be generated for each\nregistration attempt. If set to non-zero, the same Call-Id will be used\nfor re-registrations, as recommended by RFC3261 section 10.2.4. A new\nCall-Id will be generated when a previous registration had failed.\n\n    ...\n    modparam(\"uac\", \"reg_keep_callid\", 1)\n    ...\n                    \n\n",
  "reg_active": "### reg_active (int)\n\nIf set to 0, no remote regisrations are done. In other words, it can\ncontrol at once if the module should do remote registratios or not. It\ncan be changed at runtime via rpc command 'uac.reg_active 0\\|1'.\n\nThe default value is 1 (active).\n\n    ...\n    modparam(\"uac\", \"reg_active\", 0)\n    ...\n                    \n\n",
  "reg_gc_interval": "### reg_gc_interval (int)\n\nTimer interval (in seconds) at which remote registrations are cleaned up\nin case of failure or removed. When setting it take in consideration the\nmaximum value for retransmission timeout, this param should be greater\nthan it. This value also impacts how often the reload for remote\nregistrations table can be executed -- the RPC command will fail if\nexecuted in less than reg_gc_interval value since the last reload.\n\n*The default value is 150 seconds.*\n\n    ...\n    modparam(\"uac\", \"reg_gc_interval\", 60)\n    ...\n                    \n\n",
  "reg_use_domain": "### reg_use_domain (int)\n\nIf set to 1, domain part of URIs is used by functions doing lookup on\nuser name.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"uac\", \"reg_use_domain\", 1)\n    ...\n                    \n\n",
  "default_socket": "### default_socket (str)\n\nDefault socket to be used for generating registration requests and\nsending requests with the function uac_req_send(). Useful e.g. when\nseveral public interfaces are available.\n\nA send socket in the \\$uac_reg variable used together with the\nuac_req_send() function will override this parameter. A socket value in\nthe uacreg table will also override the parameter for this particular\nentry.\n\n*By default no default socket is defined, the send socket is choosen\nfrom the \u201ctm\u201d module when the requests is sent out.*\n\nIf you want to force a certain TCP port (e.g. 5060), you will need to\nset the *tcp_reuse_port=yes* core parameter as well.\n\n     ...\n     modparam(\"uac\", \"default_socket\", \"udp:192.168.0.125:5060\")\n     ...\n     \n\n",
  "event_callback": "### event_callback (str)\n\nThe name of the function in the kemi configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[uac:reply\\] block.\n\nThe function receives a string parameter with the name of the event, the\nvalue can be: 'uac:reply'.\n\n*Default value is 'empty' (no function is executed for events).*\n\n     ...\n    modparam(\"uac\", \"event_callback\", \"ksr_uac_event\")\n\n    function ksr_uac_event(evname)\n        KSR.info(\"===== uac module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n     ...\n     \n\n"
 },
 "ims_charging": {
  "hash_size": "### hash_size(int)\n\nThe size of the hash table internally used to keep the\nDiameter-Ro-Session. A larger table is much faster but consumes more\nmemory. The hash size must be a power of two number.\n\nIMPORTANT: If Ro-Session's information should be stored in a database, a\nconstant hash_size should be used, otherwise the restoring process will\nnot take place. If you really want to modify the hash_size you must\ndelete all table's rows before restarting the server.\n\n*Default value is 4096.*\n\n    ...\n    modparam(\"ims_charging\", \"hash_size\", 1024)\n    ...\n            \n\n",
  "db_mode": "### db_mode (int)\n\nShould a database be used to store dialog information.\n\nAvailable database modes: 0 for no database, 1 for real-time mode and 2\nfor shutdown mode. Mode 2 seems to be not fully implemented.\n\n*Default value is 0 - no database is used.*\n\n    ...\n    modparam(\"ims_charging\", \"db_mode\", 0)\n    ...\n            \n\n",
  "db_url": "### db_url (string)\n\n*Default value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d*\n\n    ...\n    modparam(\"ims_charging\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n            \n\n",
  "interim_update_credits": "### interim_update_credits(int)\n\nHow much credit should be requested interim request? At the start of the\ncall, we request the amount of seconds as per Command. For each interim\nrequest, we would request credit for \"interim_update_credits\".\n\n*Default value is 30.*\n\n    ...\n    modparam(\"ims_charging\", \"interim_update_credits\", 600)\n    ...\n            \n\n",
  "timer_buffer": "### timer_buffer(int)\n\nHow many seconds before expiry of our credit should we request more\ncredit?\n\n*Default value is 8.*\n\n    ...\n    modparam(\"ims_charging\", \"timer_buffer\", 10)\n    ...\n            \n\n",
  "ro_forced_peer": "### ro_forced_peer(string)\n\nFQDN of Diameter Peer (OCS) to use for communication (CCR). If you use\nthis, the routing defined in your diameter xml configuration file (CDP)\nwill be ignored and as a result you will lose the benefits of load\nbalancing and failover.\n\n*Default value is ''.*\n\n    ...\n    modparam(\"ims_charging\", \"ro_forced_peer\", \"ocs.ims.smilecoms.com\")\n    ...\n            \n\n",
  "ro_auth_expiry": "### ro_auth_expiry(integer)\n\nThis is the expiry length in seconds of the initiated Diameter sessions.\n\n*Default value is 7200.*\n\n    ...\n    modparam(\"ims_charging\", \"ro_auth_expiry\", 14400)\n    ...\n            \n\n### ro_auth_expiry(integer)\n\nThis is the expiry length in seconds of the initiated Diameter sessions.\n\n*Default value is 7200.*\n\n    ...\n    modparam(\"ims_charging\", \"ro_auth_expiry\", 14400)\n    ...\n            \n\n",
  "cdp_event_latency": "### cdp_event_latency(integer)\n\nThis is a flag to determine whether or slow CDP responses should be\nreported in the log file. 1 is enabled and 0 is disabled.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"ims_charging\", \"cdp_event_latency\", 1)\n    ...\n            \n\n",
  "cdp_event_threshold": "### cdp_event_threshold(integer)\n\nThis time in milliseconds is the limit we should report a CDP response\nas slow. i.e. if a CDP response exceeds this limit it will be reported\nin the log file. This is only relevant is cdp_event_latency is enabled\n(set to 0).\n\n*Default value is 500.*\n\n    ...\n    modparam(\"ims_charging\", \"cdp_event_threshold\", 500)\n    ...\n            \n\n",
  "cdp_event_latency_log": "### cdp_event_latency_log(integer)\n\nThis time log level at which we should report slow CDP responses. 0 is\nERROR, 1 is WARN, 2 is INFO and 3 is DEBUG. This is only relevant is\ncdp_event_latency is enabled (set to 0)\n\n*Default value is 0.*\n\n    ...\n    modparam(\"ims_charging\", \"cdp_event_latency_log\", 1)\n    ...\n            \n\n",
  "single_ro_session_per_dialog": "### single_ro_session_per_dialog(integer)\n\nThis tells the module whether it should do a single ro session per\ndialog no matter how many times Ro_send_CCR is called from the config\nfile or initiate an ro session each time Ro_send_CCR is called. It is\nuseful for IMS charging where you might want to charge for on-net\noriginating and off-net originating calls but always have only a single\nro session.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"ims_charging\", \"single_ro_session_per_dialog\", 1)\n    ...\n            \n\n",
  "origin_host": "### origin_host(string)\n\nOrigin host to be used in Diameter messages to charging-server.\n\n*Default value is \"\".*\n\n    ...\n    modparam(\"ims_charging\", \"origin_host\", \"scscf.kamailio-ims.org\")\n    ...\n            \n\n",
  "origin_realm": "### origin_realm(string)\n\nOrigin Realm to be used in Diameter messages to charging-server.\n\n*Default value is \"\".*\n\n    ...\n    modparam(\"ims_charging\", \"origin_realm\", \"kamailio-ims.org\")\n    ...\n            \n\n",
  "destination_host": "### destination_host(string)\n\nDestination host to be used in Diameter messages to charging-server.\n\n*Default value is \"\".*\n\n    ...\n    modparam(\"ims_charging\", \"destination_host\", \"ocs.kamailio-ims.org\")\n    ...\n            \n\n",
  "destination_realm": "### destination_realm(string)\n\nDestination realm to be used in Diameter messages to charging-server.\n\n*Default value is \"\".*\n\n    ...\n    modparam(\"ims_charging\", \"destination_realm\", \"kamailio-ims.org\")\n    ...\n            \n\n",
  "service_context_id_root": "### service_context_id_root(string)\n\nThis defines a root-element of the Service-Context-Id AVP used in the\ndiameter-message\n\nThe Service-Context-Id AVP is of type UTF8String (AVP Code 461) and\ncontains a unique identifier of the Diameter credit-control service\nspecific document that applies to the request (as defined in section RFC\n4006 4.1.2). This is an identifier allocated by the service provider, by\nthe service element manufacturer, or by a standardization body, and MUST\nuniquely identify a given Diameter credit-control service specific\ndocument. The format of the Service-Context-Id is:\n\n    \"service-context\" \"@\" \"domain\" service-context = Token\n          \n\nThe Token is an arbitrary string of characters and digits.\n\n'domain' represents the entity that allocated the Service-Context-Id. It\ncan be ietf.org, 3gpp.org, etc., if the identifier is allocated by a\nstandardization body, or it can be the FQDN of the service provider\n(e.g., provider.example.com) or of the vendor (e.g., vendor.example.com)\nif the identifier is allocated by a private entity.\n\nService-specific documents that are for private use only (i.e., to one\nprovider's own use, where no interoperability is deemed useful) may\ndefine private identifiers without need of coordination. However, when\ninteroperability is wanted, coordination of the identifiers via, for\nexample, publication of an informational RFC is RECOMMENDED in order to\nmake Service-Context-Id globally available.\n\n*Default value is \"32260@3gpp.org\".*\n\n    ...\n    modparam(\"ims_charging\", \"service_context_id_root\", \"calls@kamailio-ims.org\")\n    ...\n            \n\n",
  "service_context_id_ext": "### service_context_id_ext(string)\n\nThis defines the extension of the Service-Context-Id AVP used in the\ndiameter-message.\n\n*Default value is \"ext\".*\n\n    ...\n    modparam(\"ims_charging\", \"service_context_id_ext\", \"ext2\")\n    ...\n            \n\n",
  "service_context_id_mnc": "### service_context_id_mnc(string)\n\nThis defines Mobile-Network-Code (MNC) of the Service-Context-Id AVP\nused in the diameter-message.\n\n*Default value is \"01\".*\n\n    ...\n    modparam(\"ims_charging\", \"service_context_id_mnc\", \"42\")\n    ...\n            \n\n",
  "voice_service_identifier": "### voice_service_identifier(string)\n\nThis defines the service identifier to be used for charging voice.\n\n*Default value is \"1000\".*\n\n    ...\n    modparam(\"ims_charging\", \"voice_service_identifier\", \"1000\")\n    ...\n            \n\n",
  "voice_rating_group": "### voice_rating_group(string)\n\nThis defines the rating group to be used for charging voice.\n\n*Default value is \"100\".*\n\n    ...\n    modparam(\"ims_charging\", \"voice_rating_group\", \"100\")\n    ...\n            \n\n",
  "video_service_identifier": "### video_service_identifier(string)\n\nThis defines the service identifier to be used for charging video.\n\n*Default value is \"1001\".*\n\n    ...\n    modparam(\"ims_charging\", \"video_service_identifier\", \"1000\")\n    ...\n            \n\n",
  "video_rating_group": "### video_rating_group(string)\n\nThis defines the rating group to be used for charging video.\n\n*Default value is \"200\".*\n\n    ...\n    modparam(\"ims_charging\", \"video_rating_group\", \"100\")\n    ...\n            \n\n",
  "service_context_id_mcc": "### service_context_id_mcc(string)\n\nThis defines Mobile-Country-Code (MCC) of the Service-Context-Id AVP\nused in the diameter-message.\n\nsee https://en.wikipedia.org/wiki/Mobile_country_code\\_(MCC) for\ndetails.\n\n*Default value is \"001\".*\n\n    ...\n    modparam(\"ims_charging\", \"service_context_id_mcc\", \"262\")\n    ...\n            \n\n",
  "service_context_id_release": "### service_context_id_release(string)\n\nThis defines Release of the Service-Context-Id AVP used in the\ndiameter-message.\n\n*Default value is \"8\" (Release 8).*\n\n    ...\n    modparam(\"ims_charging\", \"service_context_id_release\", \"262\")\n    ...\n            \n\n",
  "custom_user_avp": "### custom_user_avp (avp string)\n\nWhen this parameter is set and the contents of the AVP is not empty, the\nUser-AVP in the Ro-Charging-Request will be based on the this parameter\nrather than on the P-Asserted or From-Header.\n\nThis parameter allows you to setup an AVP with which you can customise\nthe user to be used in the Diameter-Request.\n\n*Default value: if not set, P-Asserted-Identity with a fallback to the\nFrom-Header is used.*\n\n    ...\n    modparam(\"ims_charging\", \"custom_user_avp\", \"$avp(from_user)\")\n    ...\n            \n\n",
  "app_provided_party_avp": "### app_provided_party_avp (avp string)\n\nWhen this parameter is set and the contents of the AVP is not empty, an\nApplication-Provided-Called Party-Address AVP will be addedd to charging\nrelated requests. This is required for special cases e.g. related to\nroaming for some diameter server.\n\n*Default value: if not set, the\nApplication-Provided-Called-Party-Address AVP will be not set.*\n\n    ...\n    modparam(\"ims_charging\", \"app_provided_party_avp\", \"$avp(app_user)\")\n    ...\n            \n\n",
  "vendor_specific_chargeinfo": "### vendor_specific_chargeinfo (int)\n\nThis parameter can be used to activate or deactivate the addition of\nVendor-Specific-Termination-Clause and\nVendor-Specific-Termination-Reason AVPs to the requests. To activate set\nthis parameter to 1.\n\n*Default value is \"0\" (deactivated).*\n\n    ...\n    modparam(\"ims_charging\", \"vendor_specific_chargeinfo\", 1)\n    ...\n            \n\n",
  "vendor_specific_id": "### vendor_specific_id (int)\n\nTo set the ID of the Vendor-Specific information, not implemented right\nnow.\n\n*Default value is \"10\".*\n\n    ...\n    modparam(\"ims_charging\", \"vendor_specific_id\", 10)\n    ...\n            \n\n"
 },
 "jsonrpcc": {
  "servers": "### servers (string)\n\nThe servers providing the remote jsonrpc service. Format is\n\"host1:port1,priority1 host2:port2,priority2\". Requests to servers of\nthe same priority will be distributed evenly (round robin). Server\ngroups with higher priority are used first.\n\n    ...\n    modparam(\"jsonrpcc\", \"servers\", \"localhost:9999,2 10.10.0.1:9999,2 backup.server:9999,1\")\n    ...\n                    \n\n",
  "max_conn_attempts": "### max_conn_attempts (int)\n\nMax number of connection attempts for a server. -1 will keep\nreconnecting forever, 0 will skip any attempt to reconnect.\n\n    ...\n    modparam(\"jsonrpcc\", \"max_conn_attempts\", 10)\n    ...\n                    \n\n"
 },
 "secfilter": {
  "db_url": "### db_url (string)\n\nDatabase URL.\n\n*Default value is \"\"*\n\n            ...\n            modparam(\"secfilter\", \"db_url\", \"mysql://user:pass@localhost/kamailio\")\n            ...\n            \n\n",
  "table_name": "### table_name (string)\n\nName of the table used to store the blacklisted and whitelisted values.\n\n*Default value is secfilter*\n\n            ...\n            modparam(\"secfilter\", \"table_name\", \"secfilter\")\n            ...\n            \n\n",
  "action_col": "### action_col (string)\n\nName of database column containing the type of list. The possible values\nare:\n\n- 0 = blacklisted data\n- 1 = whitelisted data\n- 2 = blacklisted destination number\n\n*Default value is action*\n\n            ...\n            modparam(\"secfilter\", \"action_col\", \"action\")\n            ...\n            \n\n",
  "type_col": "### type_col (string)\n\nName of database column containing the type of values. The possible\nvalues are:\n\n- 0 = user-agent (if action=0 or action=1)\n- 0 = destination number (if action=2)\n- 1 = country\n- 2 = domain\n- 3 = IP address\n- 4 = user\n\n*Default value is type*\n\n            ...\n            modparam(\"secfilter\", \"type_col\", \"type\")\n            ...\n            \n\n",
  "data_col": "### data_col (string)\n\nName of database column containing blacklisted and whitelisted values.\n\n*Default value is data*\n\n            ...\n            modparam(\"secfilter\", \"data_col\", \"data\")\n            ...\n            \n\n",
  "dst_exact_match": "### dst_exact_match (integer)\n\nThis value is used in the destinations blacklist and corresponds to the\nnumbers that we want to prevent calling. If the value is *1*, the call\nwill appear as blacklisted if the destination is exactly the same. If\nthe value is *0*, every destination whose number begins with a number\nappearing on the destination blacklist will be rejected.\n\n*Default value is 1*\n\n            ...\n            modparam(\"secfilter\", \"dst_exact_match\", 1)\n            ...\n            \n\n",
  "reload_delta": "### reload_delta (integer)\n\nThe number of seconds that have to be waited before executing a new RPC\nreload. By default there is a rate limiting of maximum one reload in\nfive seconds. If set to *0*, no rate limit is configured.\n\n*Default value is 5*\n\n            ...\n            modparam(\"secfilter\", \"reload_delta\", 1)\n            ...\n            \n\n",
  "cleanup_interval": "### cleanup_interval (integer)\n\nThe number of seconds that have to be wait before cleanup the previous\nvalues from memory after a RPC reload.\n\n*Default value is 60*\n\n            ...\n            modparam(\"secfilter\", \"cleanup_interval\", 120)\n            ...\n            \n\n"
 },
 "siptrace": {
  "db_url": "### db_url (str)\n\nDatabase URL.\n\n*Default value is \"mysql://kamailio:kamailiorw@localhost/kamailio\".*\n\n    ...\n    modparam(\"siptrace\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "table": "### table (str)\n\nName of the table where to store the SIP messages.\n\n*Default value is \u201csip_trace\u201d.*\n\n    ...\n    modparam(\"siptrace\", \"table\", \"strace\")\n    ...\n\n",
  "trace_flag": "### trace_flag (integer)\n\nWhich flag is used to mark messages to trace without traced user.\n\n*Default value is \"0\".*\n\n    ...\n    modparam(\"siptrace\", \"trace_flag\", 22)\n    ...\n\n",
  "trace_on": "### trace_on (integer)\n\nParameter to enable/disable trace (on(1)/off(0))\n\n*Default value is \"0\".*\n\n    ...\n    modparam(\"siptrace\", \"trace_on\", 1)\n    ...\n\n",
  "traced_user_avp": "### traced_user_avp (str)\n\nThe name of the AVP storing the SIP URI of the traced user. If the AVP\nis set, messages are stored in a database table and the \u201ctraced_user\u201d\ncolumn is filled with AVP's value. You can store the message many times\nfor many users by having multiple values for this AVP.\n\n*Default value is \"NULL\" (feature disabled).*\n\n    ...\n    modparam(\"siptrace\", \"traced_user_avp\", \"$avp(user)\")\n    ...\n\n",
  "trace_table_avp": "### trace_table_avp (str)\n\nThe name of the AVP storing the name of the table where to store the SIP\nmessages. If it is not set, the value of \u201ctable\u201d parameter is used. In\nthis way one can select dynamically where to store the traced messages.\nThe table must exist, and must have the same structure as the\n\u201csip_trace\u201d table.\n\n*Default value is \"NULL\" (feature disabled).*\n\n    ...\n    modparam(\"siptrace\", \"trace_table_avp\", \"$avp(i:345)\")\n    modparam(\"siptrace\", \"trace_table_avp\", \"$avp(s:siptrace_table)\")\n    ...\n\n",
  "duplicate_uri": "### duplicate_uri (str)\n\nThe address in form of a SIP URI where to send a duplicate of traced\nmessage.\n\n*Default value is \"NULL\".*\n\n    ...\n    modparam(\"siptrace\", \"duplicate_uri\", \"sip:10.1.1.1:5888\")\n    ...\n\n",
  "trace_to_database": "### trace_to_database (integer)\n\nParameter to enable/disable inserts to the database from this Kamailio.\n\nIn case we only want to send the SIP messages to the \u201cduplicate_uri\u201d and\nnot store the information to the local database we can set this to \"0\".\n\n*Default value is \"1\".*\n\n    ...\n    modparam(\"siptrace\", \"trace_to_database\", 0)\n    ...\n\n",
  "trace_local_ip": "### trace_local_ip (str)\n\nThe address to be used in \u201cfromip\u201d field for locally generated messages.\nIf not set, the module sets it to the address of the socket that will be\nused to send the message.\n\n*Default value is \"NULL\".*\n\n    ...\n    modparam(\"siptrace\", \"trace_local_ip\", \"10.1.1.1:5064\")\n    ...\n\n",
  "trace_sl_acks": "### trace_sl_acks (integer)\n\nParameter to enable/disable tracing of SL-filtered ACKs (on=1 / off=0).\n\nBy default all ACKs to replies generated by SL module are traced. There\nis no way to select among them. The SL module is able to run an event\nroute when such an ACK arrives (*event_route\\[sl:filtered-ack\\]*). You\ncan set this parameter to 0 and then execute sip_trace() in the event\nroute, accompanied by config rules to decide which ACK to trace.\n\n*Default value is \"1\".*\n\n    ...\n    modparam(\"siptrace\", \"trace_sl_acks\", 0)\n    ...\n\n",
  "xheaders_write": "### xheaders_write (integer)\n\nParameter to enable/disable writing of x-headers.\n\nStores \u201cfromip\u201d, \u201ctoip\u201d, \u201cmethod\u201d and \u201cdirection\u201d in \u201cX-Siptrace-\\*\u201d\nheaders. This allows to transmit them to a second Kamailio server using\nthe \u201cduplicate_uri\u201d feature. Because the headers are added after the\ndata is written to the database, the headers only show up in the packets\nsent by duplicate_uri.\n\nSee `xheaders_read`, it should be used on the receiving side.\n\n*Note:* The headers are first read, then written. This allows relaying\nthe information over more than two Kamailio servers by setting both\n`xheaders_write` and `xheaders_read` to \"1\" on the servers in the\nmiddle.\n\n*Default value is \"0\".*\n\n    ...\n    modparam(\"siptrace\", \"xheaders_write\", 0)\n    ...\n\n",
  "xheaders_read": "### xheaders_read (integer)\n\nParameter to enable/disable reading of x-headers.\n\nReads and removes the \u201cX-Siptrace-\\*\u201d headers. Packets not containing\nthe headers are neither stored to the database nor relayed\n(duplicate_uri). See `xheaders_write` for further information.\n\n*Default value is \"0\".*\n\n    ...\n    modparam(\"siptrace\", \"xheaders_read\", 0)\n    ...\n\n",
  "hep_mode_on": "### hep_mode_on (integer)\n\nParameter to enable/disable Homer encapsulate mode (on(1)/off(0))\n\n*Default value is \"0\".*\n\n    ...\n    modparam(\"siptrace\", \"hep_mode_on\", 1)\n    ...\n\n",
  "hep_version": "### hep_version (integer)\n\nThe parameter indicate the version of the HEP protocol. Can be \u201c1\u201d, \u201c2\u201d\nor \u201c3\u201d. In HEPv2 and HEPv3 the timestamp and capture agent ID will be\nincluded in the HEP header.\n\n*Default value is \"1\".*\n\n    ...\n    modparam(\"siptrace\", \"hep_version\", 3)\n    ...\n\n",
  "hep_capture_id": "### hep_capture_id (integer)\n\nThe parameter indicate the capture agent ID for the HEPv2 or HEPv3\nprotocol. Limitation: 16-bit integer for HEPv2, 32-bit for HEPv3.\n\n*Default value is \"1\".*\n\n    ...\n    modparam(\"siptrace\", \"hep_capture_id\", 234)\n    ...\n\n",
  "trace_db_mode": "### trace_db_mode (integer)\n\nIf set to 1, the module uses \u201cINSERT DELAYED\u201d to store to database (when\nit is available, otherwise falls back to \u201cINSERT\u201d).\n\nIf set to 2, the module uses \u201cASYNC-INSERT\u201d to store to database (when\nit is available, otherwise falls back to \u201cINSERT\u201d).\n\nDefault value is *0 (use \u201cINSERT\u201d)*.\n\n    ...\n    modparam(\"siptrace\", \"trace_db_mode\", 1)\n    ...\n\n",
  "trace_delayed": "### trace_delayed (integer)\n\nKept for backward compatibily, use trace_db_mode instead.\n\nIf set to non-zero, ot sets trace_db_mode parameter to 1 when the module\nis initialized.\n\nDefault value is *0*.\n\n    ...\n    modparam(\"siptrace\", \"trace_delayed\", 1)\n    ...\n\n",
  "send_sock_name": "### send_sock_name (str)\n\nThe name of the local listen socket from where to send the duplicated\ntraffic via SIP or HEP. In the absence of this parameter Kamailio\nautomatically picks an interface. It has priority over 'send_sock_addr'\nparameter.\n\n    ...\n    modparam(\"siptrace\", \"send_sock_name\", \"sock1\")\n    ...\n\n",
  "send_sock_addr": "### send_sock_addr (str)\n\nThe local interface in the form of SIP URI from where to send the\nduplicated traffic. In the absence of this parameter Kamailio\nautomatically picks an interface.\n\n    ...\n    modparam(\"siptrace\", \"send_sock_addr\", \"sip:10.1.1.2:5000\")\n    ...\n\n",
  "force_send_sock": "### force_send_sock (str)\n\nIt is the same as 'send_sock_addr' parameter, this being kept for\nbackward compatibility when 'send_sock_name' and 'send_sock_addr' were\nintroduced.\n\n",
  "trace_init_mode": "### trace_init_mode (integer)\n\nControl what tracing modes are initialized.\n\nThe value of the parameter can be a combination of next values:\n\n- 0 - all modes are initialized.\n\n- 1 - module initialized to do tracing only with core callback functions\n  (see also 'trace_mode' parameter).\n\n- 2 - module initialized to do tracing only using config script flags\n  and functions.\n\nDefault value is *0*.\n\n    ...\n    modparam(\"siptrace\", \"trace_init_mode\", 1)\n    ...\n\n",
  "trace_mode": "### trace_mode (integer)\n\nIf not set to 0, the module uses core events triggered when receiving or\nsending SIP traffic to store it to database or mirror it to a SIP\ncapture server using HEP or UDP forwarding. It will automatically do the\nhandling of all SIP traffic. It is no longer needed to set the siptrace\nflag per request or execute sip_trace(), if it is done, then the storing\nand mirroring is duplicated.\n\nThe value of the parameter can be a combination of next values:\n\n- 0 - no automatic mirroring or storing of SIP traffic.\n\n- 1 (1st bit set) - mirror the traffic to HEP server.\n\n- 2 (2nd bit set) - store the traffic to database server.\n\n- 4 (3rd bit set) - mirror the traffic to the SIP URI specified by\n  duplicate_uri.\n\nThe trace_on parameter still has to be set, allowing also to control\nthis mode of mirroring via RPC commands.\n\nDefault value is *0*.\n\n    ...\n    modparam(\"siptrace\", \"trace_on\", 1)\n    modparam(\"siptrace\", \"trace_mode\", 1)\n    ...\n    modparam(\"siptrace\", \"trace_mode\", 3)\n    ...\n\n",
  "auth_key": "### auth_key (integer)\n\nA string with an authorization key. Supported on HEPv3 only.\n\nDefault value is empty.\n\n    ...\n    modparam(\"siptrace\", \"auth_key\", \"spoihepuirthpeuia\")\n    ...\n\n",
  "evcb_msg": "### evcb_msg (str)\n\nSet the name of KEMI function to be executed instead of\nevent_route\\[siptrace:msg\\].\n\nDefault value is empty.\n\n    ...\n    modparam(\"siptrace\", \"evcb_msg\", \"ksr_siptrace_msg\")\n    ...\n\n",
  "trace_dialog_ack": "### trace_dialog_ack (str)\n\nEnable tracing of in-dialog ACK. Before this param, one must have set\nthe onsend() route and captured the outgoing ACK there.\n\nDefault value is 1 (enabled).\n\n    ...\n    modparam(\"siptrace\", \"trace_dialog_ack\", 1)\n    ...\n\n",
  "trace_dialog_spiral": "### trace_dialog_spiral (str)\n\nEnable tracing of dialog spirals. A spiraled dialog is a dialog\nestablished by a SIP INVITE that loops back to the same kamailio (as\nnext hop). Right now, inside the siptrace code, a spiraled dialog is\nidentified by (\\*params-\\>param == NULL).\n\nDefault value is 1 (enabled).\n\n    ...\n    modparam(\"siptrace\", \"trace_dialog_spiral\", 1)\n    ...\n\n"
 },
 "userblocklist": {
  "use_domain": "### use_domain (integer)\n\nIf set to non-zero value, the domain column in the userblocklist table\nis used.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"userblocklist\", \"use_domain\", 1)\n    ...\n                \n\n",
  "match_mode": "### match_mode (integer)\n\nThe number of individual characters that are used for matching. Valid\nvalues are 10 or 128. When you specify 10, only digits will be used for\nmatching, this operation mode is equivalent to the old behaviour. When\nconfigured with 128, all standard ASCII chars are available for\nmatching. Please be aware that memory requirements for storing the\nrouting tree in shared memory will also increase by a factor of 12.8.\n\n*Default value is \u201c10\u201d.*\n\n    ...\n    modparam(\"userblocklist\", \"match_mode\", 128)\n    ...\n                \n\n",
  "db_url": "### db_url (String)\n\nURL to the database containing the data.\n\n*Default value is \u201cmysql://kamailioro:kamailioro@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"userblocklist\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "userblocklist_table": "### userblocklist_table (String)\n\nName of the userblocklist table for the userblocklist module.\n\n*Default value is \u201cuserblocklist\u201d.*\n\n    ...\n    modparam(\"userblocklist\", \"userblocklist_table\", \"userblocklist\")\n    ...\n\n",
  "userblocklist_id_col": "### userblocklist_id_col (string)\n\nunique ID\n\n    ...\n    modparam(\"userblocklist\", \"userblocklist_id_col\", \"id\")\n    ...\n\n",
  "userblocklist_username_col": "### userblocklist_username_col (string)\n\nThe user that is used for the blocklist lookup.\n\n    ...\n    modparam(\"userblocklist\", \"userblocklist_username_col\", \"username\")\n    ...\n\n",
  "userblocklist_domain_col": "### userblocklist_domain_col (string)\n\nThe domain that is used for the blocklist lookup.\n\n    ...\n    modparam(\"userblocklist\", \"userblocklist_domain_col\", \"domain\")\n    ...\n\n",
  "userblocklist_prefix_col": "### userblocklist_prefix_col (string)\n\nThe prefix that is matched for the blocklist.\n\n    ...\n    modparam(\"userblocklist\", \"userblocklist_prefix_col\", \"prefix\")\n    ...\n\n",
  "userblocklist_allowlist_col": "### userblocklist_allowlist_col (string)\n\nSpecify if this is a blocklist (0) or an allowlist (1) entry.\n\n    ...\n    modparam(\"userblocklist\", \"userblocklist_allowlist_col\", \"allowlist\")\n    ...\n\n",
  "globalblocklist_table": "### globalblocklist_table (String)\n\nName of the globalblocklist table for the userblocklist module. Please\nnote that this table is used when the check_blocklist function is called\nwith no parameters.\n\n*Default value is \u201cglobalblocklist\u201d.*\n\n    ...\n    modparam(\"userblocklist\", \"globalblocklist_table\", \"globalblocklist\")\n    ...\n\n",
  "globalblocklist_id_col": "### globalblocklist_id_col (string)\n\nunique ID\n\n    ...\n    modparam(\"userblocklist\", \"globalblocklist_id_col\", \"id\")\n    ...\n\n",
  "globalblocklist_prefix_col": "### globalblocklist_prefix_col (string)\n\nThe prefix that is matched for the blocklist.\n\n    ...\n    modparam(\"userblocklist\", \"globalblocklist_prefix_col\", \"prefix\")\n    ...\n\n",
  "globalblocklist_allowlist_col": "### globalblocklist_allowlist_col (string)\n\nSpecify if this is a blocklist (0) or an allowlist (1) entry.\n\n    ...\n    modparam(\"userblocklist\", \"globalblocklist_allowlist_col\", \"allowlist\")\n    ...\n\n",
  "globalblocklist_description_col": "### globalblocklist_description_col (string)\n\nA comment for the entry.\n\n    ...\n    modparam(\"userblocklist\", \"globalblocklist_description_col\", \"description\")\n    ...\n\n"
 },
 "uri_db": {
  "db_url": "### db_url (string)\n\nURL of the database to be used.\n\nIf the db_url string is empty, the default database URL will be used.\n\n*Default value is \u201cmysql://kamailioro:kamailioro@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"uri_db\", \"db_url\", \"mysql://username:password@localhost/kamailio\")\n    ...\n\n",
  "db_table": "### db_table (string)\n\nThe DB table that should be used. It is possible to use the \u201csubscriber\u201d\nand \u201curi\u201d table. If the \u201curi\u201d table should be used, an additional\nparameter \u201cuse_uri_table\u201d) must be set.\n\n*Default value is \u201csubscriber\u201d.*\n\n    ...\n    modparam(\"uri_db\", \"db_table\", \"uri\")\n    ...\n\n",
  "user_column": "### user_column (string)\n\nColumn holding usernames in the table.\n\n*Default value is \u201cusername\u201d.*\n\n    ...\n    modparam(\"uri_db\", \"user_column\", \"username\")\n    ...\n\n",
  "domain_column": "### domain_column (string)\n\nColumn holding domain in the table.\n\n*Default value is \u201cdomain\u201d.*\n\n    ...\n    modparam(\"uri_db\", \"domain_column\", \"domain\")\n    ...\n\n",
  "uriuser_column": "### uriuser_column (string)\n\nColumn holding URI username in the table.\n\n*Default value is \u201curi_user\u201d.*\n\n    ...\n    modparam(\"uri_db\", \"uriuser_column\", \"uri_user\")\n    ...\n\n",
  "use_uri_table": "### use_uri_table (integer)\n\nSpecify if the \u201curi\u201d table should be used for checking instead of\n\u201csubscriber\u201d table. A non-zero value means true.\n\n*Default value is \u201c0 (false)\u201d.*\n\n    ...\n    modparam(\"uri_db\", \"use_uri_table\", 1)\n    ...\n\n",
  "use_domain": "### use_domain (integer)\n\nSpecify if the domain part of the URI should be used to identify the\nusers (along with username). This is useful in multi domain setups, a\nnon-zero value means true.\n\nThis parameter is only evaluated for calls to \u201cdoes_uri_exist\u201d, all\nother functions checks the digest username and realm against the given\nusername, if the \u201curi\u201d table is used.\n\n*Default value is \u201c0 (false)\u201d.*\n\n    ...\n    modparam(\"uri_db\", \"use_domain\", 1)\n    ...\n\n"
 },
 "xmlops": {
  "buf_size": "### buf_size (integer)\n\nMaximum size of the XML buffer.\n\nDefault value is 4096.\n\n    ...\n    modparam(\"xmlops\", \"buf_size\", 8192)\n    ...\n            \n\n",
  "xml_ns": "### xml_ns (str)\n\nRegister xml namespace prefix. Parameter value must have the format:\n'prefix=uri'. It can be set many times to cope with multiple namespaces\nwithout prefix.\n\nThis is useful when it is needed to access XML documents that specify\nxmlns without prefix, which is not XML-standard compliant, but it comes\nwith SIP SIMPLE presence bodies.\n\n    ...\n    modparam(\"xmlops\", \"xml_ns\", \"rpid=urn:ietf:params:xml:ns:pidf:rpid\")\n    modparam(\"xmlops\", \"xml_ns\", \"pidf=urn:ietf:params:xml:ns:pidf\")\n    ...\n    $xml(x=>doc) = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <presence xmlns=\"urn:ietf:params:xml:ns:pidf\" entity=\"sip:test@mydomain.com\">\n            <tuple id=\"86ae65b7-42de-4399-b635-295caad13aac\">\n                <status><basic>none</basic></status>\n            </tuple>\n        </presence>';\n\n    xinfo(\"status: $xml(x=>xpath:/pidf:presence/pidf:tuple/pidf:status/pidf:basic)\\n\");\n    ...\n\n"
 },
 "exec": {
  "setvars": "### setvars (integer)\n\nTurn off to disable setting environment variables for executed commands.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"exec\", \"setvars\", 1)\n    ...\n\n",
  "time_to_kill": "### time_to_kill (integer)\n\nSpecifies the longest time a program is allowed to execute. If the time\nis exceeded, the program is killed.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"exec\", \"time_to_kill\", 20)\n    ...\n\n"
 },
 "print_lib": {},
 "secsipid": {
  "expire": "### expire (int)\n\nThe interval in seconds after which the Identity header JWT is\nconsidered to be expired.\n\n*Default value is 300.*\n\n    ...\n    modparam(\"secsipid\", \"expire\", 600)\n    ...\n\n",
  "timeout": "### timeout (int)\n\nThe interval in seconds after which the HTTP GET operation to download\nthe public key times out.\n\n*Default value is 5.*\n\n    ...\n    modparam(\"secsipid\", \"timeout\", 2)\n    ...\n\n",
  "cache_dir": "### cache_dir (str)\n\nThe path to the directory where to save cached public keys. If set, it\nactivates the public key file caching in the libsecsipid library.\n\n*Default value is \"\".*\n\n    ...\n    modparam(\"secsipid\", \"cache_dir\", \"/tmp/kamailio/secsipid\")\n    ...\n\n",
  "cache_expire": "### cache_expire (int)\n\nThe interval in seconds after which a cached public key is considered\nexpired. This value is passed to the libsecsipid library.\n\n*Default value is 3600.*\n\n    ...\n    modparam(\"secsipid\", \"cache_expire\", 7200)\n    ...\n\n",
  "modproc": "### modproc (str)\n\nThe name of or the path to the required per-process API module.\n\n*Default value is \"secsipid_proc.so\".*\n\n    ...\n    modparam(\"secsipid\", \"modproc\", \"secsipid_proc2.so\")\n    ...\n\n",
  "libopt": "### libopt (str)\n\nSet a libsecsipid option. The value has to be name=value. The parameter\ncan be set many times.\n\n*Default value is \"\" (not set).*\n\n    ...\n    modparam(\"secsipid\", \"libopt\", \"CacheExpires=0\")\n    ...\n\n"
 },
 "tmrec": {
  "separator": "### separator (str)\n\nSeparator character used to delimit attributes in time reccurrence\ndefinitions.\n\n*Default value is '\\|'.*\n\n    ...\n    modparam(\"tmrec\", \"separator\", \";\")\n    ...\n\n"
 },
 "debugger": {
  "cfgtrace": "### cfgtrace (int)\n\nControl whether the config script trace is enabled or disabled at\nstartup. You can change the value at runtime without restart, globally\nor per process.\n\n*Default value is \u201c0\u201d (disabled).*\n\n    ...\n    modparam(\"debugger\", \"cfgtrace\", 1)\n    ...\n\n",
  "cfgtrace_format": "### cfgtrace_format (int)\n\nControl what is printer in the cfgtrace log message. If it is set to 1,\nthen the configuration file path is not printed, making the log messages\nshorter when not including other configuration files in the main one.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"debugger\", \"cfgtrace_format\", 1)\n    ...\n\n",
  "breakpoint": "### breakpoint (int)\n\nControl whether every line (global) breakpoint is enabled or disabled at\nstartup.\n\n*Default value is \u201c0\u201d (disabled).*\n\n    ...\n    modparam(\"debugger\", \"breakpoint\", 1)\n    ...\n\n",
  "log_level": "### log_level (int)\n\nWhat log level is to be used to print module-specific messages.\n\n*Default value is \u201c-1\u201d (L_ERR).*\n\n    ...\n    modparam(\"debugger\", \"log_level\", 1)\n    ...\n\n",
  "log_level_name": "### log_level_name (str)\n\nWhat log level name is to be used to print cfg trace messages.\n\n*Default value is \u201cNULL\u201d (use default log names).*\n\n    ...\n    modparam(\"debugger\", \"log_level_name\", \"exec\")\n    ...\n\n",
  "log_facility": "### log_facility (str)\n\nWhich log facility is to be used to print module-specific messages. By\nusing this setting, you can configure syslog to send debug messages to a\nseparate log channel, like a specific kamailio-debug log file.\n\n*Default value is \u201cNULL\u201d (default from core).*\n\n    ...\n    modparam(\"debugger\", \"log_facility\", \"LOG_DAEMON\")\n    ...\n\n",
  "log_prefix": "### log_prefix (str)\n\nString to print before any module-specific messages.\n\n*Default value is \u201c\\*\\*\\* cfgtrace:\u201d.*\n\n    ...\n    modparam(\"debugger\", \"log_prefix\", \"from-debugger-with-love:\")\n    ...\n\n",
  "step_usleep": "### step_usleep (int)\n\nMicroseconds to sleep before checking for new commands when waiting at a\nbreakpoint.\n\n*Default value is \u201c100000\u201d (that is 0.1 sec).*\n\n    ...\n    modparam(\"debugger\", \"step_usleep\", 500000)\n    ...\n\n",
  "step_loops": "### step_loops (int)\n\nHow many sleeps of 'step_usleep' the RPC process performs when waiting\nfor a reply from a worker process before responding to RPC. This avoids\nblocking RPC process forever in case the worker process 'forgets' to\nwrite back a reply.\n\n*Default value is \u201c200\u201d.*\n\n    ...\n    modparam(\"debugger\", \"step_loops\", 100)\n    ...\n\n",
  "mod_hash_size": "### mod_hash_size (int)\n\nUsed to compute power of two as size of internal hash table to store\nlevels per module (e.g., if it is set to 4, internal hash table has 16\nslots). One must set its value grater than 0 such that memory to be\nallocated to save the module specific debug levels or facility\nconfigured by `mod_level` or `mod_facility`. This parameter is\naccessible readonly via the Kamailio config framework.\n\n*Default value is \u201c0\u201d - feature disabled.*\n\n    ...\n    modparam(\"debugger\", \"mod_hash_size\", 5)\n    ...\n\n",
  "mod_level_mode": "### mod_level_mode (int)\n\nEnable or disable per module log level (0 - disabled, 1 - enabled). This\nparameter is tunable via the Kamailio config framework. To use per\nmodule log level you also have to set `mod_hash_size`.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"debugger\", \"mod_level_mode\", 1)\n    ...\n\n",
  "mod_level": "### mod_level (str)\n\nSpecify module log level - the value must be in the format:\nmodulename=level. The parameter can be set many times. For core log\nlevel, use module name 'core'. You also must enable `mod_level_mode` and\n`mod_hash_size`.\n\n    ...\n    modparam(\"debugger\", \"mod_level\", \"core=3\")\n    modparam(\"debugger\", \"mod_level\", \"tm=3\")\n    ...\n\n",
  "mod_facility_mode": "### mod_facility_mode (int)\n\nEnable or disable per module log facility (0 - disabled, 1 - enabled).\nThis parameter is tunable via the Kamailio config framework. To use per\nmodule log facility you also have to set `mod_hash_size`.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"debugger\", \"mod_facility_mode\", 1)\n    ...\n            \n\n",
  "mod_facility": "### mod_facility (str)\n\nSpecify module log facility - the value must be in the format:\nmodulename=facility. The parameter can be set many times. For core log\nfacility, use module name 'core'. You also must enable\n`mod_facility_mode` and `mod_hash_size`.\n\nNOTE: See the *syslog()* library call for facility names\n(http://linux.die.net/man/3/syslog). The most used facilities are\nLOG_LOCAL\\[0-7\\].\n\n    ...\n    modparam(\"debugger\", \"mod_facility\", \"core=LOG_LOCAL0\")\n    modparam(\"debugger\", \"mod_facility\", \"debugger=LOG_LOCAL1\")\n    ...\n            \n\n",
  "log_assign": "### log_assign (int)\n\nEnable or disable log assign actions on config (0 - disabled, 1 -\nenabled).\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"debugger\", \"log_assign\", 1)\n    ...\n\n",
  "cfgpkgcheck": "### cfgpkgcheck (int)\n\nIf set, before each config action is done pkg memory check, useful to\ndetect buffer overflows.\n\n*Default value is \u201c0\u201d (disabled).*\n\n    ...\n    modparam(\"debugger\", \"cfgpkgcheck\", 1)\n    ...\n\n",
  "reset_msgid": "### reset_msgid (int)\n\nUsed to enable or disable the ability to reset the msgid (\\$mi) through\nthe dbg.reset_msgid RPC command. (0 - disabled, 1 - enabled).\n\n*Default value is \u201c0\u201d - feature disabled.*\n\n    ...\n    modparam(\"debugger\", \"reset_msgid\", 1)\n    ...\n\n",
  "cfgtest": "### cfgtest (int)\n\nControl whether the cfgt module is enabled or disabled at startup.\nModule cfgt needs to be loaded before.\n\n*Default value is \u201c0\u201d (disabled).*\n\n    ...\n    loadmodule \"cfgt.so\"\n    modparam(\"debugger\", \"cfgtest\", 1)\n    ...\n\n"
 },
 "app_java": {
  "class_name": "### class_name (string)\n\nThe class name should have the same compiled file name. If the value is\n*\"Kamailio\"*, then the compiled file should be named as\n*\"Kamailio.class\"*.\n\n*Default value is \u201cKamailio\u201d.*\n\n    ...\n    modparam(\"app_java\", \"class_name\", \"Kamailio\")\n    ...\n\n",
  "child_init_method": "### child_init_method (string)\n\nTBD.\n\n*Default value is \u201cchild_init\u201d.*\n\n    ...\n    modparam(\"app_java\", \"child_init_method\", \"my_mod_init\")\n    ...\n\n",
  "java_options": "### java_options (string)\n\nJava options for Java Virtual Machine. For more info read [java\ndocs](http://docs.oracle.com/javase/6/docs/technotes/tools/windows/java.html)\n\n*Default value is \u201c-Djava.compiler=NONE\u201d.*\n\n    ...\n    modparam(\"app_java\", \"java_options\", \"-Djava.compiler=NONE\")\n    ...\n\n    ...\n    # Assumes \"application java folder\" is located at /opt/kamailio/java\n    modparam(\"app_java\", \"java_options\", \"-Djava.compiler=NONE\n        -Djava.class.path=/path/to/kamailio/modules:/opt/kamailio/java:\n        /opt/kamailio/java/kamailio.jar\")\n    ...\n\n    ...\n    # Assumes \"application java folder\" is located at /opt/kamailio/java\n    modparam(\"app_java\", \"java_options\", \"-verbose:gc,class,jni\n        -Djava.compiler=NONE -Djava.class.path=/path/to/kamailio/modules:\n        /opt/kamailio/java:/opt/kamailio/java/kamailio.jar\")\n    ...\n\n    ...\n    # Assumes \"application java folder\" is located at /opt/kamailio/java\n    modparam(\"app_java\", \"java_options\", \"-Xdebug -verbose:gc,class,jni\n        -Djava.compiler=NONE -Djava.class.path=/path/to/kamailio/modules:\n        /opt/kamailio/java:/opt/kamailio/java/kamailio.jar\")\n    ...\n\n",
  "force_cmd_exec": "### force_cmd_exec (int)\n\nThis parameter forces execution a kamailio command with java native\nmethod \u201cKamExec\u201d. \\# Note: this is an untested yet feature, may cause\n(but may not) a memory leaks if used from embedded languages.\n\n*Default value is \u201c0 (off)\u201d.*\n\n    ...\n    modparam(\"app_java\", \"force_cmd_exec\", 1)\n    ...\n\n"
 },
 "avp": {
  "xlbuf_size": "### xlbuf_size (integer)\n\nDefines size of internal buffer for all xprint formatting calls. If you\ndon't use xprint formatting calls, you can set it to 0 to preserve some\nmemory, if you get errors while formatting due to buffer size, you can\nenlarge it.\n\nDefault value is 256.\n\n    ...\n    modparam(\"avp\", \"xlbuf_size\", 1024)\n    ...\n            \n"
 },
 "lrkproxy": {},
 "acc_radius": {
  "radius_config": "### radius_config (string)\n\n*This parameter is radius specific.* Path to radius client configuration\nfile, set the referred config file correctly and specify there address\nof server, shared secret (should equal that in\n/usr/local/etc/raddb/clients for freeRadius servers) and dictionary, see\netc for an example of config file and dictionary.\n\nIf the parameter is set to empty string, the RADIUS accounting support\nwill be disabled (even if compiled).\n\nDefault value is \u201cNULL\u201d.\n\n    ...\n    modparam(\"acc_radius\", \"radius_config\", \"/etc/radiusclient/radiusclient.conf\")\n    ...\n\n",
  "radius_flag": "### radius_flag (integer)\n\nRequest flag which needs to be set to account a transaction -- RADIUS\nspecific.\n\nDefault value is not-set (no flag).\n\n    ...\n    modparam(\"acc_radius\", \"radius_flag\", 2)\n    ...\n\n",
  "radius_missed_flag": "### radius_missed_flag (integer)\n\nRequest flag which needs to be set to account missed calls -- RADIUS\nspecific.\n\nDefault value is not-set (no flag).\n\n    ...\n    modparam(\"acc_radius\", \"radius_missed_flag\", 3)\n    ...\n\n",
  "service_type": "### service_type (integer)\n\nRadius service type used for accounting.\n\nDefault value is 15 (SIP).\n\n    ...\n    modparam(\"acc_radius\", \"service_type\", 16)\n    ...\n\n",
  "radius_extra": "### radius_extra (string)\n\nExtra values to be logged via RADIUS - RADIUS specific.\n\nDefault value is NULL.\n\n    ...\n    modparam(\"acc_radius\", \"radius_extra\", \"via=$hdr(Via[*]); email=$avp(s:email)\")\n    ...\n\n",
  "rad_time_mode": "### rad_time_mode(integer)\n\nRadius Event-Timestamp for accounting.\n\nValues can be:\n\n- *0* - (default), format is only unix timestamp for Event-Timestamp\n  (For example: 1445590624)\n\n- *1* - format is unix timestamp with microseconds in Addition, it needs\n  to change Event-Timestamp attribute type in dictionary to string both\n  radius server and client (For example: 1445590624.377372)\n\nDefault value is 0 (Unix timestamp).\n\n    ...\n    modparam(\"acc_radius\", \"rad_time_mode\", 1)\n    ...\n\n"
 },
 "ims_icscf": {
  "route_lir_user_unknown": "### route_lir_user_unknown (string)\n\nThis is the route which is executed if HSS returns \"user unknown\" in LIR\n\n*Default value is ''.*\n\n    ...\n    modparam(\"ims_icscf\",\"route_lir_user_unknown\", \"lir_term_user_unknown\")\n    ...\n            \n\n",
  "route_uar_user_unknown": "### route_uar_user_unknown (string)\n\nThis is the route which is executed if HSS returns \"user unknown\" in\nUAR.\n\n*Default value is ''.*\n\n    ...\n    modparam(\"ims_icscf\",\"route_uar_user_unknown\", \"uar_term_user_unknown\")\n    ...\n            \n\n",
  "scscf_entry_expiry": "### scscf_entry_expiry (integer)\n\nThis is the time in s after which S-CSCF entries in the I-CSCF's SCSCF\nlist will expire.\n\n*Default value is 300.*\n\n    ...\n    modparam(\"ims_icscf\",\"scscf_entry_expiry\", 300)\n    ...\n            \n\n",
  "cxdx_forced_peer": "### cxdx_forced_peer (string)\n\nFQDN of Diameter Peer (HSS) to use for communication (UAR, LIR). If you\nuse this, the routing defined in your diameter xml configuration file\n(CDP) will be ignored and as a result you will lose the benefits of load\nbalancing and failover.\n\n*Default value is \"\".*\n\n    ...\n    modparam(\"ims_icscf\", \"cxdx_forced_peer\", \"hss.ims.smilecoms.com\")\n    ...\n        \n\n",
  "cxdx_dest_realm": "### cxdx_dest_realm (string)\n\nDestination realm to be used in Diameter messages to HSS\n\n*Default value is \"ims.smilecoms.com\".*\n\n    ...\n    modparam(\"ims_icscf\", \"cxdx_dest_realm\", \"ims.smilecoms.com\")\n    ...\n        \n\n",
  "use_preferred_scscf_uri": "### use_preferred_scscf_uri (int)\n\nWhether or not this ICSCF has a preferred S-CSCF to use when the HSS\nreturns a list of SCSCFs. 0 means this I-CSCF has no preferred SCSCF. 1\nmeans it has a preferred S-CSCF.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"ims_icscf\", \"use_preferred_scscf_uri\", 1)\n    ...\n        \n\n",
  "preferred_scscf_uri": "### preferred_scscf_uri (string)\n\nIf use_preferred_scscf_uri is set then this is the URI of the preferred\nSCSCF.\n\n*Default value is \"\".*\n\n    ...\n    modparam(\"ims_icscf\", \"preferred_scscf_uri\", \"sip:scscf.ims.smilecoms.com:6060\")\n    ...\n        \n\n"
 },
 "sctp": {
  "sctp_socket_rcvbuf": "### sctp_socket_rcvbuf (int)\n\nSize for the sctp socket receive buffer.\n\n*Default value is automatically set based on OS limits.*\n\n    ...\n    modparam(\"sctp\", \"sctp_socket_rcvbuf\", 14096)\n    ...\n\n",
  "sctp_socket_sndbuf": "### sctp_socket_sndbuf (int)\n\nSize for the sctp socket send buffer.\n\n*Default value is automatically set based on OS limits.*\n\n    ...\n    modparam(\"sctp\", \"sctp_socket_sndbuf\", 14096)\n    ...\n\n",
  "sctp_autoclose": "### sctp_autoclose (int)\n\nNumber of seconds before autoclosing an idle association. Can be changed\nat runtime, but it will affect only new associations.\n\n*Default value is 180 (seconds).*\n\n    ...\n    # kamcmd cfg.set_now_int sctp autoclose 120\n    ...\n    modparam(\"sctp\", \"sctp_autoclose\", 300)\n    ...\n\n",
  "sctp_send_ttl": "### sctp_send_ttl (int)\n\nNumber of milliseconds before an unsent message/chunk is dropped. Can be\nchanged at runtime.\n\n*Default value is 32000 (milliseconds - 32 seconds).*\n\n    ...\n    # kamcmd cfg.set_now_int sctp send_ttl 180000\n    ...\n    modparam(\"sctp\", \"sctp_send_ttl\", 10000)\n    ...\n\n",
  "sctp_send_retries": "### sctp_send_retries (int)\n\nHow many times to attempt re-sending a message on a re-opened\nassociation, if the sctp stack did give up sending it (it's not related\nto sctp protocol level retransmission). Useful to improve reliability\nwith peers that reboot/restart or fail over to another machine.\n\nWARNING: use with care and low values (e.g. 1-3) to avoid \"multiplying\"\ntraffic to unresponding hosts.\n\nCan be changed at runtime.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"sctp\", \"sctp_send_retries\", 1)\n    ...\n\n",
  "sctp_assoc_tracking": "### sctp_assoc_tracking (int)\n\nControls whether or not sctp associations are tracked inside Kamailio.\nTurning it off would result in less memory being used and slightly\nbetter performance, but it will also disable some other features that\ndepend on it (e.g. sctp_assoc_reuse).\n\nCan be changed at runtime (kamcmd sctp assoc_tracking 0), but changes\nwill be allowed only if all the other features that depend on it are\nturned off (for example it can be turned off only if first\nsctp_assoc_reuse was turned off).\n\nNote: turning sctp_assoc_tracking on/off will delete all the tracking\ninformation for all the currently tracked associations and might\nintroduce a small temporary delay in the sctp processing if lots of\nassociations were tracked.\n\nConfig options depending on sctp_assoc_tracking being on:\nsctp_assoc_reuse.\n\n*Default value is 1 (enabled, 0 - disabled).*\n\n    ...\n    modparam(\"sctp\", \"sctp_assoc_tracking\", 0)\n    ...\n\n",
  "sctp_assoc_reuse": "### sctp_assoc_reuse (int)\n\nControls sctp association reuse. For now only association reuse for\nreplies is affected by it. Default is on. Depends on sctp_assoc_tracking\nbeing on.\n\nNote that even if turned off, if the port in via corresponds to the\nsource port of the association the request was sent on or if rport is\nturned on (force_rport() or via containing a rport option), the\nassociation will be automatically reused by the sctp stack. Can be\nchanged at runtime (sctp assoc_reuse), but it can be turned on only if\nsctp_assoc_tracking is on.\n\n*Default value is 1 (enabled, 0 - disabled).*\n\n    ...\n    modparam(\"sctp\", \"sctp_assoc_reuse\", 0)\n    ...\n\n",
  "sctp_max_assocs": "### sctp_max_assocs (int)\n\nMaximum number of allowed open sctp associations. -1 means maximum\nallowed by the OS. Default: -1. Can be changed at runtime (e.g.: kamcmd\ncfg.set_now_int sctp max_assocs 10 ). When the maximum associations\nnumber is exceeded and a new associations is opened by a remote host,\nthe association will be immediately closed. However it is possible that\nsome sip packets get through (especially if they are sent early, as part\nof the 4-way handshake).\n\nWhen Kamailio tries to open a new association and the max_assocs is\nexceeded the exact behaviour depends on whether or not\nsctp_assoc_tracking is on. If on, the send triggering the active open\nwill gracefully fail, before actually opening the new association and no\npacket will be sent. However if sctp_assoc_tracking is off, the\nassociation will first be opened and then immediately closed. In general\nthis means that the initial sip packet will be sent (as part of the\n4-way handshake).\n\n*Default value is -1.*\n\n    ...\n    modparam(\"sctp\", \"sctp_max_assocs\", 10)\n    ...\n\n",
  "sctp_srto_initial": "### sctp_srto_initial (int)\n\nInitial value of the retransmission timeout (in milliseconds), used in\nRTO calculations.\n\nCan be changed at runtime (sctp srto_initial) but it will affect only\nnew associations.\n\n*Default value is OS specific.*\n\n    ...\n    modparam(\"sctp\", \"sctp_srto_initial\", 1000)\n    ...\n\n",
  "sctp_srto_max": "### sctp_srto_max (int)\n\nMaximum value of the retransmission timeout (RTO) in milliseconds.\n\nWARNING: values lower than the sctp sack_delay will cause lots of\nretransmissions and connection instability (see sctp_srto_min for more\ndetails).\n\nCan be changed at runtime (sctp srto_max) but it will affect only new\nassociations.\n\n*Default value is OS specific.*\n\n    ...\n    modparam(\"sctp\", \"sctp_srto_max\", 2000)\n    ...\n\n",
  "sctp_srto_min": "### sctp_srto_min (int)\n\nMinimum value of the retransmission timeout (RTO) in milliseconds.\n\nWARNING: values lower than the sctp sack_delay of any peer might cause\nretransmissions and possible interoperability problems. According to the\nstandard the sack_delay should be between 200 and 500 ms, so avoid\ntrying values lower than 500 ms unless you control all the possible sctp\npeers and you do make sure their sack_delay is higher or their sack_freq\nis 1.\n\nCan be changed at runtime (sctp srto_min) but it will affect only new\nassociations.\n\n*Default value is OS specific.*\n\n    ...\n    modparam(\"sctp\", \"sctp_srto_min\", 800)\n    ...\n\n",
  "sctp_asocmaxrxt": "### sctp_asocmaxrxt (int)\n\nMaximum retransmissions attempts per association. It should be set to\nsctp_pathmaxrxt \\* no. of expected paths.\n\nCan be changed at runtime (sctp asocmaxrxt) but it will affect only new\nassociations.\n\n*Default value is OS specific.*\n\n    ...\n    modparam(\"sctp\", \"sctp_asocmaxrxt\", 5)\n    ...\n\n",
  "sctp_init_max_attempts": "### sctp_init_max_attempts (int)\n\nMaximum INIT retransmission attempts.\n\nCan be changed at runtime (sctp init_max_attempts).\n\n*Default value is OS specific.*\n\n    ...\n    modparam(\"sctp\", \"sctp_init_max_attempts\", 3)\n    ...\n\n",
  "sctp_init_max_timeo": "### sctp_init_max_timeo (int)\n\nMaximum INIT retransmission timeout (RTO max for INIT) in milliseconds.\n\nCan be changed at runtime (sctp init_max_timeo).\n\n*Default value is OS specific.*\n\n    ...\n    modparam(\"sctp\", \"sctp_init_max_timeo\", 1000)\n    ...\n\n",
  "sctp_hbinterval": "### sctp_hbinterval (int)\n\nSCTP heartbeat interval. Setting it to -1 will disable the heartbeats.\n\nCan be changed at runtime (sctp hbinterval) but it will affect only new\nassociations.\n\n*Default value is OS specific.*\n\n    ...\n    modparam(\"sctp\", \"sctp_hbinterval\", 2000)\n    ...\n\n",
  "sctp_pathmaxrxt": "### sctp_pathmaxrxt (int)\n\nMaximum retransmission attempts per path (see also sctp_asocmaxrxt).\n\nCan be changed at runtime (sctp pathmaxrxt) but it will affect only new\nassociations.\n\n*Default value is OS specific.*\n\n    ...\n    modparam(\"sctp\", \"sctp_pathmaxrxt\", 2)\n    ...\n\n",
  "sctp_sack_delay": "### sctp_sack_delay (int)\n\nDelay until an ACK is generated after receiving a packet (in\nmilliseconds).\n\nWARNING: a value higher than srto_min can cause a lot of retransmissions\n(and strange problems). A value higher than srto_max will result in very\nhigh connections instability. According to the standard the sack_delay\nvalue should be between 200 and 500 ms.\n\nCan be changed at runtime (sctp sack_delay) but it will affect only new\nassociations.\n\n*Default value is OS specific.*\n\n    ...\n    modparam(\"sctp\", \"sctp_sack_delay\", 400)\n    ...\n\n",
  "sctp_sack_freq": "### sctp_sack_freq (int)\n\nNumber of packets received before an ACK is sent (without waiting for\nthe sack_delay to expire). Default: OS specific.\n\nNote: on linux with lksctp up to and including 1.0.9 is not possible to\nset this value (having it in the config will produce a warning on\nstartup).\n\nCan be changed at runtime (sctp sack_freq) but it will affect only new\nassociations.\n\n*Default value is OS specific.*\n\n    ...\n    modparam(\"sctp\", \"sctp_sack_freq\", 3)\n    ...\n\n",
  "sctp_max_burst": "### sctp_max_burst (int)\n\nMaximum burst of packets that can be emitted by an association.\n\nCan be changed at runtime (sctp max_burst) but it will affect only new\nassociations.\n\n*Default value is OS specific.*\n\n    ...\n    modparam(\"sctp\", \"sctp_max_burst\", 3)\n    ...\n\n"
 },
 "evrexec": {
  "exec": "### exec (str)\n\nThe definition of an exec task. The value of the parameter must have the\nfollowing format:\n\n- \"name=\\_string\\_;wait=\\_number\\_;workers=\\_number\\_;sockaddr=\\_udp_socket\\_\"\n\nThe parameter can be set multiple times to get more exec tasks in same\nconfiguration file.\n\n- *name* - name of the event route to be executed. When used with a KEMI\n  embedded language, this has to be the name of a function from the KEMI\n  script. The function must have a string parameter, which will retrieve\n  the index of the works in string format.\n\n- *workers* - if set to 0 or 1 the task is executed in a dedicated\n  process. Any number \\> 1 will create more dedicated processes, each of\n  them executing the startup task. For UDP data execution (when\n  'sockaddr' is set), only 1 worker process is created.\n\n- *wait* - timer interval in micro-seconds to wait inside the dedicated\n  process before executing the task.\n\n- *sockaddr* - full UDP socket address in format 'udp:ip:port' (example:\n  'udp:127.0.0.1:54321'). Received data is made available in the event\n  route via \\$evr(data).\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"evrexec\", \"exec\", \"name=evrexec:timer;wait=1000;workers=1;\")\n    modparam(\"evrexec\", \"exec\", \"name=evrexec:udp;sockaddr=udp:127.0.0.1:4444;workers=1;\")\n    ...\n    event_route[evrexec:timer] {\n      $var(x) = 0;\n      while(1) {\n        xlog(\"$$var(x) is $var(x)\\n\");\n        $var(x) = $var(x) + 1;\n        sleep(\"600\");\n      }\n    }\n\n    event_route[evrexec:udp] {\n      xinfo(\"udp socket data: [$evr(data)] from [$evr(srcip)]\\n\");\n    }\n\n    ...\n\n"
 },
 "cfgt": {
  "basedir": "### basedir (string)\n\nControl where the config reports should be stored. The dir must exist\nand Kamailio SIP Server Platform must have permissions to write on it.\n\n*Default value is \u201c/tmp\u201d.*\n\n    ...\n    modparam(\"cfgt\", \"basedir\", \"/run/kamailio/cfgtest\")\n    ...\n\n",
  "mask": "### mask (int)\n\n*Default value is \u201c32\u201d (ALL).*\n\n    ...\n    # dump xavp(8) and avp(4) vars\n    modparam(\"cfgt\", \"mask\", 12)\n    ...\n\n",
  "callid_prefix": "### callid_prefix (string)\n\nPrefix used to identify test scenario messages. Last char of the string\nwill be used as delimiter for the scenario ID. With parameter set to\n\u201cNGCP%\u201d and Call-ID \u201cNGCP%123%456\u201d the scenario identified will be\n\u201c123\u201d.\n\n*Default value is \u201cNGCP%\u201d (using \u201c%\u201d as delimiter).*\n\n    ...\n    # using '%' as delimiter\n    modparam(\"cfgt\", \"callid_prefix\", \"TEST-ID%\")\n    ...\n\n"
 },
 "pipelimit": {
  "hash_size": "### hash_size (int)\n\nUsed to compute the number of slots for the internal hash table, as\npower of 2 (number of slots = 2^hash_size, aka 1\\<\\<hash_size). If you\nhave many pipes, increase this value for proper performances, but don't\ngo too high (hash_size=10 means 1024 slots).\n\n*Default value is \u201c6\u201d (64 slots).*\n\n    ...\n    modparam(\"pipelimit\", \"hash_size\", 10)\n    ...\n\n",
  "db_url": "### db_url (string)\n\nURL of the database server to be used.\n\n*Default value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"pipelimit\", \"db_url\", \"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "plp_table_name": "### plp_table_name (string)\n\nName of DB table where data definition for pipes is stored.\n\n*Default value is \u201cpl_pipes\u201d.*\n\n    ...\n    modparam(\"pipelimit\", \"plp_table_name\", \"mypipes\")\n    ...\n\n",
  "plp_pipeid_column": "### plp_pipeid_column (string)\n\nName of 'pipeid' column.\n\n*Default value is \u201cpipeid\u201d.*\n\n    ...\n    modparam(\"pipelimit\", \"plp_pipeid_column\", \"name\")\n    ...\n\n",
  "plp_limit_column": "### plp_limit_column (string)\n\nName of 'limit' column.\n\n*Default value is \u201climit\u201d.*\n\n    ...\n    modparam(\"pipelimit\", \"plp_limit_column\", \"name\")\n    ...\n\n",
  "plp_algorithm_column": "### plp_algorithm_column (string)\n\nName of 'algorithm' column.\n\n*Default value is \u201calgorithm\u201d.*\n\n    ...\n    modparam(\"pipelimit\", \"plp_algorithm_column\", \"name\")\n    ...\n\n",
  "timer_interval": "### timer_interval (integer)\n\nThe length of the timer interval in seconds. Counted messages are reset\neach timer_interval, therefore the amounts of messages have to be\ndivided by this timer_interval value to get the messages per second\nvalue. For example, if you want to allow an average of 10 messages per\nsecond with a timer interval of 10 seconds, then the limit value has to\nbe 100.\n\nNote: A too small value may lead to performance penalties due to timer\nprocess overloading.\n\n*Default value is 10.*\n\n    ...\n    modparam(\"pipelimit\", \"timer_interval\", 5)\n    ...\n\n",
  "timer_mode": "### timer_mode (integer)\n\nControl what timer process to be used: 0 - use main fast timer; 1 - use\nsecondary wheel timer.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"pipelimit\", \"timer_mode\", 1)\n    ...\n\n",
  "load_fetch": "### load_fetch (integer)\n\nControl if the module should fetch the load for CPU and network traffic.\nIf set to 0, no load is fetched; if set to 1, the load is fetched every\ntimer interval.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"pipelimit\", \"load_fetch\", 0)\n    ...\n\n",
  "reply_code": "### reply_code (integer)\n\nThe code of the reply sent by Kamailio while limiting.\n\n*Default value is 503.*\n\n    ...\n    modparam(\"pipelimit\", \"reply_code\", 505)\n    ...\n\nThis value can be modified at runtime using kamcmd\n\n    kamcmd cfg.set_now_int pipelimit reply_code 505\n\n            \n\n",
  "reply_reason": "### reply_reason (string)\n\nThe reason of the reply sent by Kamailio while limiting.\n\n*Default value is \"Server Unavailable\".*\n\n    ...\n    modparam(\"pipelimit\", \"reply_reason\", \"Limiting\")\n    ...\n\nThis value can be modified at runtime using kamcmd\n\n    kamcmd cfg.set_now_string pipelimit reply_reason \"Limiting\"\n\n            \n\n",
  "clean_unused": "### clean_unused (int)\n\nClean unused pipes after this number of timer intervals.\n\n*Default value is 0 (cleanup disabled).*\n\n    ...\n    modparam(\"pipelimit\", \"clean_unused\", 10)\n    ...\n\nThis value can be modified at runtime using kamcmd\n\n    kamcmd cfg.set_now_int pipelimit clean_unused 10\n\n            \n\n"
 },
 "pua_usrloc": {
  "default_domain": "### default_domain (str)\n\nThe default domain to use when constructing the presentity URI if it is\nmissing from stored AOR in the usrloc table (in memory or database).\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"pua_usrloc\", \"default_domain\", \"kamailio.org\")\n    ...\n\n",
  "entity_prefix": "### entity_prefix (str)\n\nThe prefix used when constructing the entity attribute to be added to a\npresence node in the XML PIDF document. (ex: pres:user@domain ).\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"pua_usrloc\", \"entity_prefix\", \"pres\")\n    ...\n\n",
  "branch_flag": "### branch_flag (int)\n\nWhich branch flag to be used to select the contact addresses for which\nto generate PUBLISH. Valid values are 0 to 31.\n\n*Default value is \u201c-1\u201d (disabled).*\n\n    ...\n    modparam(\"pua_usrloc\", \"branch_flag\", 9)\n    ...\n\n"
 },
 "db_sqlite": {
  "db_set_readonly": "### db_set_readonly (string)\n\nThis will set the db connection to \"SQLITE_OPEN_READONLY\", useful if\nanother program is writing to the DB. The value is the full path to the\nsqlite file used for example in any db_url or sqlops/sqlcon This\nparameter may be set multiple times to set many DB connections to\nreadonly in the same configuration file.\n\n*By default all the db connections are using \"SQLITE_OPEN_READWRITE \\|\nSQLITE_OPEN_CREATE\"*\n\n    ...\n    modparam(\"db_sqlite\",\"db_set_readonly\",\"/var/mydb.sqlite\")\n    modparam(\"sqlops\",\"sqlcon\",\"lrn=>sqlite:////var/mydb.sqlite\") # Example if using the sqlops module\n    ...\n            \n\n",
  "db_set_journal_mode": "### db_set_journal_mode (string)\n\nThis will set the db connection journal mode, for the given connection.\nThe value is the full path to the sqlite file used for example in any\ndb_url or sqlops/sqlcon Other journal mode are : DELETE \\| TRUNCATE \\|\nPERSIST \\| MEMORY \\| WAL \\| OFF This parameter may be set multiple times\nto set many DB connections to readonly in the same configuration file.\n\n*By default all the db connections are using sqlite default journaling\nmode.*\n\n    ...\n    # In this example we are using Write-Ahead Logging in order to update the database from another process(external to Kamailio) without facing any locking.\n\n    #!subst \"!DB_FILE!/var/mydb.sqlite!\"\n    modparam(\"db_sqlite\",\"db_set_readonly\",\"DB_FILE\")   # We are also opening the database in readonly\n    modparam(\"db_sqlite\",\"db_set_journal_mode\",\"DB_FILE=WAL;\")\n    modparam(\"sqlops\",\"sqlcon\",\"lrn=>sqlite:///DB_FILE\")\n    ...\n            \n\n"
 },
 "slack": {
  "channel": "### channel (str)\n\nSlack channel name\n\n*Default value is \\#kamailio*\n\n    ...\n    modparam(\"slack\", \"channel\", \"#kamailio\")\n    ...\n\n",
  "username": "### username (str)\n\nSpecify the username for the published message\n\n*Default value is webhookbot.*\n\n    ...\n    modparam(\"slack\", \"username\", \"webhookbot\")\n    ...\n\n",
  "icon_emoji": "### icon_emoji (str)\n\nspecify an emoji (using colon shortcodes, eg. :white_check_mark:) to use\nas the profile photo alongside the message.\n\n*Default value is :ghost:*\n\n    ...\n    modparam(\"slack\", \"icon_emoji\", \":ghost:\")\n    ...\n\n"
 },
 "counters": {
  "script_counter": "### script_counter\n\nDefine a new counter that can be used from the script. The declaration\nmight include a group in front of the counter name, separated with '.'.\nIt might also include a counter description string (help message),\nseparated from the name with a ' ' or ':'. If the group is missing, the\ngroup defined in the `script_cnt_grp_name` module parameter will be used\n(the default is \"script\"). If the description is missing, the default is\n\"custom script counter\". The format of the declaration is:\n\\[group.\\]name\\[( \\|:)description\\].\n\n    modparam(\"counters\", \"script_counter\", \"foo\")  # script.foo\n    modparam(\"counters\", \"script_counter\", \"test.bar\")  # test.bar\n    modparam(\"counters\", \"script_counter\", \"baz example counter\")  # script.baz\n    modparam(\"counters\", \"script_counter\", \"test.x:another example\") # test.x\n                \n\n",
  "script_cnt_grp_name": "### script_cnt_grp_name\n\nGroup name that will be used for the counters defined via the\n`script_counter` module parameter which do not have a specified group.\n\nDefault: \"script\".\n\n    modparam(\"counters\", \"script_cnt_grp_name\", \"my_counters\")\n                \n\n"
 },
 "cnxcc": {
  "redis": "### redis (integer)\n\nRedis datasource connection information\n\n    ...\n    modparam(\"cnxcc\", \"redis\", \"addr=127.0.0.1;port=6379;db=1\")\n    ...\n\n",
  "credit_check_period": "### credit_check_period (integer)\n\nIndicates how often the credit checking function should be called. It is\ndirectly related to the precision of the module. The maximum precision\nis 1, which means that every call is checked every one second.\n\nValues greater than 1 leads to precision lost but less CPU consumption.\n\n    ...\n    modparam(\"cnxcc\", \"credit_check_period\", 1)\n    ...\n\n"
 },
 "outbound": {
  "force_outbound_flag": "### force_outbound_flag (integer)\n\nA flag which, if set for a request, will force *path* and *rr* to add\nflow tokens to Path: and Record-Route: headers regardless of the request\ncontents.\n\n*Default value is -1.*\n\n    ...\n    modparam(\"outbound\", \"force_outbound_flag\", 1)\n    ...\n\n",
  "force_no_outbound_flag": "### force_no_outbound_flag (integer)\n\nA flag which, if set for a request, will force *path* and *rr* not to\nadd flow tokens to Path: and Record-Route: headers regardless of the\nrequest contents.\n\n*Default value is -1.*\n\n    ...\n    modparam(\"outbound\", \"force_no_outbound_flag\", 2)\n    ...\n\n",
  "flow_token_secret": "### flow_token_secret (string)\n\nSecret phrase used to calculate the outbound key value used for flow\ntokens validation. Allows to set persistent outbound key.\n\nIf not specified, *outbound* will use randomly generated outbound key\n\n    ...\n    modparam(\"outbound\", \"flow_token_secret\", \"johndoessecretphrase\")\n    ...\n                \n"
 },
 "snmpstats": {
  "dlg_minor_threshold": "### dlg_minor_threshold (Integer)\n\nThe SNMPStats module monitors the number of active dialogs. If the\nnumber of active dialogs exceeds a minor threshold, the SNMPStats module\nwill send out a kamailioDialogLimitMinorEvent trap to signal that an\nalarm condition has occurred. The minor threshold is set with the\ndlg_minor_threshold parameter.\n\n    ...\n      modparam(\"snmpstats\", \"dlg_minor_threshold\", 500)\n    ...\n            \n\nIf this parameter is not set, then there will be no minor alarm\nmonitoring.\n\n",
  "dlg_major_threshold": "### dlg_major_threshold (Integer)\n\nThe SNMPStats module monitors the number of active dialogs. If the\nnumber of active dialogs exceeds a major threshold, the SNMPStats module\nwill send out a kamailioDialogLimitMajorEvent trap to signal that an\nalarm condition has occurred. The major threshold is set with the\ndlg_major_threshold parameter.\n\n    ...\n      modparam(\"snmpstats\", \"dlg_major_threshold\", 750)\n    ...\n            \n\nIf this parameter is not set, then there will be no major alarm\nmonitoring.\n\n",
  "export_registrar": "### export_registrar (int)\n\nThe SNMPStats module will export registrar (usrloc) records if this\nparameter is set to 1. This will result in more memory usage and bigger\nexporter structure.\n\nIf you enable this setting and NOT use it (i.e. not check the SNMP\ntables for registrations) an internal memory queue of usrloc changes\nwill keep growing in shared (core) memory. To release the queue memory,\nrun snmpwalk or use a monitoring tool to check the tables with regular\nintervals.\n\n*Default value is \u201c0\u201d (don't export).*\n\n    ...\n    modparam(\"snmpstats\", \"export_registrar\", 1)\n    ...\n            \n\n"
 },
 "xhttp": {
  "url_skip": "### url_skip (str)\n\nRegular expression to match the HTTP URL. If there is a match, the event\nroute is not executed.\n\n*Default value is null (don't skip).*\n\n    ...\n    modparam(\"xhttp\", \"url_skip\", \"^/RPC2\")\n    ...\n\n",
  "url_match": "### url_match (str)\n\nRegular expression to match the HTTP URL. If there is no match, the\nevent route is not executed. This check is done after url_skip, so if\nboth url_skip and url_match would match then the event route is not\nexecuted (url_skip has higher priority).\n\n*Default value is null (match everything).*\n\n    ...\n    modparam(\"xhttp\", \"url_match\", \"^/sip/\")\n    ...\n\n",
  "event_callback": "### event_callback (str)\n\nThe name of the function in the kemi configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[xhttp:request\\] block.\n\nThe function has one string parameter with the value \"xhttp:request\".\n\n*Default value is 'empty' (no function is executed for events).*\n\n    ...\n    modparam(\"xhttp\", \"event_callback\", \"ksr_xhttp_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_xhttp_event(evname)\n        KSR.info(\"===== xhttp module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n    ...\n\n"
 },
 "ndb_redis": {
  "server": "### server (str)\n\nSpecify the details to connect to REDIS server. It takes a list of\nattribute=value separated by semicolon, the attributes can be name,\nunix, addr, port, db and pass. Name is a generic identifier to be used\nwith module functions. unix is the path to the unix domain socket\nprovided by redis server. addr and port are the IP address and the port\nto connect to REDIS server. pass is the server password. unix and (addr,\nport) are mutually exclusive. If both appear in same server settings\nunix domain socket is configured. db is the DB number to use (defaults\nto 0 if not specified).\n\nYou can set this parameter many times, in case you want to connect to\nmany REDIS servers, just give different attributes and use the specific\nserver name when querying the REDIS instance.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"ndb_redis\", \"server\", \"name=srvN;addr=127.0.0.1;port=6379;db=1\")\n    modparam(\"ndb_redis\", \"server\", \"name=srvX;addr=127.0.0.2;port=6379;db=4;pass=mypassword\")\n\n    # Unix domain socket\n    modparam(\"ndb_redis\", \"server\", \"name=srvY;unix=/tmp/redis.sock;db=3\")\n\n    # sentinel (for a redis slave)\n    modparam(\"ndb_redis\", \"server\", \"name=srvZ;sentinel_group=group_name;sentinel_master=0;sentinel=1.2.3.4:26379;sentinel=1.2.3.5:26379\")\n\n    # sentinel (for a redis master)\n    modparam(\"ndb_redis\", \"server\", \"name=srvZ;sentinel_group=group_name;sentinel_master=1;sentinel=1.2.3.4:26379;sentinel=1.2.3.5:26379\")\n\n    ...\n\n",
  "init_without_redis": "### init_without_redis (integer)\n\nIf set to 1, the module will correctly initialize even if redis is not\navailable at start up.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"ndb_redis\", \"init_without_redis\", 1)\n    ...\n                \n\n",
  "connect_timeout": "### connect_timeout (int)\n\nThe timeout when connecting to the redis server\n\n*Default value is 1000 ms.*\n\n    ...\n    modparam(\"ndb_redis\", \"connect_timeout\", 500)\n    ...\n                \n\n",
  "cmd_timeout": "### cmd_timeout (int)\n\nThe timeout for each query to the redis server. If the redis server does\nnot reply within the timeout value, the command will fail and kamailio\nwill continue executing the cfg file.\n\n*Default value is 1000 ms.*\n\n    ...\n    modparam(\"ndb_redis\", \"cmd_timeout\", 500)\n    ...\n                \n\n",
  "cluster": "### cluster (integer)\n\nIf set to 1, the module will connect to servers indicated in the \"MOVED\"\nreply.\n\nThe module needs to know all existing REDIS-Nodes at startup. The nodes\nare searched by the name \"ip:port\", e.g. if REDIS replies with \"MOVED\n127.0.0.1:4711\", ndb_redis needs to know the databases \"127.0.0.1:4711\".\n\n*Default value is \u201c0\u201d (disabled).*\n\n    ...\n    modparam(\"ndb_redis\", \"server\", \"name=127.0.0.1:26001;addr=127.0.0.1;port=26001\")\n    modparam(\"ndb_redis\", \"server\", \"name=127.0.0.1:26004;addr=127.0.0.1;port=26004\")\n    modparam(\"ndb_redis\", \"server\", \"name=127.0.0.1:26008;addr=127.0.0.1;port=26008\")\n    ...\n    modparam(\"ndb_redis\", \"cluster\", 1)\n    ...\n                \n\n",
  "allowed_timeouts": "### allowed_timeouts (integer)\n\nIf this is set to a non-negative value, it sets the number of\nconsecutive REDIS commands that can fail before temporarily disabling\nthe REDIS server. This is similar to rtpengine_disable_tout parameter\nfrom the rtpengine module.\n\nWhen communicating with a REDIS server, if redis_cmd or redis_execute\nwill fail for more than \u201callowed_timeouts\u201d consecutive times, the server\nwill be temporary disabled for a number of seconds configured by the\n\u201cdisable_time\u201d parameter.\n\nDisabling a server means that further redis_cmd and redis_execute\ncommands will not do anything and return a negative value \u201c-2\u201d. Messages\nare also logged when disabling and re-enabling a server.\n\nThe number of consecutive fails are counted by each Kamailio process, so\nwhen disabling a server this is done just for that process, not\nglobally.\n\n*Default value is \u201c-1\u201d (disabled).*\n\n    ...\n    modparam(\"ndb_redis\", \"allowed_timeouts\", 3)\n    ...\n                \n\n",
  "disable_time": "### disable_time (integer)\n\nIf allowed_timeouts is set to a non negative value this determines the\nnumber of seconds the REDIS server will be disabled\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"ndb_redis\", \"allowed_timeouts\", 0)\n    modparam(\"ndb_redis\", \"disable_time\", 30)\n    ...\n                \n\n",
  "flush_on_reconnect": "### flush_on_reconnect (integer)\n\nIf this is set to a non zero value, a \"FLUSHALL\" command is issued after\nreconnecting to a REDIS server, to clear the entire database.\n\nWhen a command to a REDIS server fails, a reconnection to that server is\nmade, so with this parameter each failed command will result in a flush\nof the database.\n\nThis is useful in scenarios when a REDIS server does not respond to\ncommands, but the commands might have been issued, and the responses\nlost. If this leaves the data in the db in an uncertain state, a flush\nmight fix any issues that may occur.\n\n*Default value is \u201c0\u201d (disabled).*\n\n    ...\n    modparam(\"ndb_redis\", \"flush_on_reconnect\", 1)\n    ...\n                \n\n",
  "allow_dynamic_nodes": "### allow_dynamic_nodes (integer)\n\nIf set to 1, the module will connect to servers indicated in the \"MOVED\"\nreply, even if they are not specified at startup.\n\nWhen \u201ccluster\u201d is enabled the module supports redirections (\"MOVED\")\nreplies. Set \u201callow_dynamic_nodes\u201d to 1 to avoid listing all the nodes\nat startup. You can only list one node, e.g. by using a DNS name for the\ncluster instead of an IP address. The module will add dynamically the\nnew nodes as the MOVED replies are received. Only works if \u201ccluster\u201d is\nset to 1.\n\n*Default value is \u201c0\u201d (disabled).*\n\n    ...\n    modparam(\"ndb_redis\", \"server\", \"name=redis_cluster;addr=127.0.0.1;port=26008\")\n    ...\n    modparam(\"ndb_redis\", \"cluster\", 1)\n    modparam(\"ndb_redis\", \"allow_dynamic_nodes\", 1)\n    ...\n                \n\n",
  "debug": "### debug (integer)\n\nSet the verbosity level for some of the log messages. It has to be a log\nlevel value.\n\n*Default value is \u201c3\u201d (L_DBG).*\n\n    ...\n    modparam(\"ndb_redis\", \"debug\", 1)\n    ...\n                \n\n"
 },
 "pua_reginfo": {
  "default_domain": "### default_domain(str)\n\nThe default domain for the registered users to be used when constructing\nthe uri for the registrar callback.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"pua_reginfo\", \"default_domain\", \"kamailio.org\")\n    ...\n\n",
  "publish_reginfo": "### publish_reginfo(int)\n\nWhether or not to generate PUBLISH requests.\n\n*Default value is \u201c1\u201d (enabled).*\n\n    ...\n    modparam(\"pua_reginfo\", \"publish_reginfo\", 0)\n    ...\n\n",
  "outbound_proxy": "### outbound_proxy(str)\n\nThe outbound_proxy uri to be used when sending Subscribe and Publish\nrequests.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"pua_reginfo\", \"outbound_proxy\", \"sip:proxy@kamailio.org\")\n    ...\n\n",
  "server_address": "### server_address(str)\n\nThe IP address of the server.\n\n    ...\n    modparam(\"pua_reginfo\", \"server_address\", \"sip:reginfo@160.34.23.12\")\n    ...\n\n"
 },
 "keepalive": {},
 "geoip2": {
  "path": "### path (string)\n\nPath to the GeoIP2 database file.\n\n*Default value is \u201cnull\u201d.*\n\n    ...\n    modparam(\"geoip2\", \"path\", \"/usr/local/share/GeoIP/GeoLite2-City.mmdb\")\n    ...\n\n",
  "resid": "### resid (str)\n\nPreregister result container id during initialization, enabling the use\nof the module in KEMI scripts. In native Kamailio.cfg file, registration\nis done when parsing config and finding variables.\n\n*Default value is \u201c\u201d (empty).*\n\n    ...\n    modparam(\"geoip2\", \"resid\", \"src\")\n    ...\n    if(geoip2_match(\"$si\", \"src\")) {\n       ...\n    }\n    ...\n\n"
 },
 "auth_identity": {
  "privatekey_path": "### privatekey_path (string)\n\nNote: this parameter is for authorizer service.\n\nThe path of private key of the authentication service. The key must be\nin PEM format.\n\nThis parameter is required by authentication service.\n\n    ...\n    modparam(\"auth_identity\",\"privatekey_path\",\"/etc/ssl/private/key.pem\")\n    ...\n                    \n\n",
  "certificate_path": "### certificate_path (string)\n\nNote: this parameter is for authorizer service.\n\nThe path of certificate of the authentication service. The certificate\nmust be in PEM format.\n\nThis parameter is required by authentication service.\n\n    ...\n    modparam(\"auth_identity\",\"certificate_path\",\"/var/www/ssl/mycert.pem\")\n    ...\n                    \n\n",
  "certificate_url": "### certificate_url (string)\n\nNote: this parameter is for authorizer service.\n\nThe url where certificate is available for other verifier services.\n(value of Identity-info header) The certificate should be in DER format.\n\nThis parameter is required by authentication service.\n\n    ...\n    modparam(\"auth_identity\",\"certificate_url\",\"https://foo.bar/mycert.der\")\n    ...\n                    \n\n",
  "msg_timeout": "### msg_timeout (integer)\n\nNote: this parameter is for authorizer service.\n\nIf the Date header of message which is needed to be authenticated\ncontains a time different by more than this seconds from the current\ntime noted by the authentication service then it rejects the message.\n\nThis parameter is optional. The default value is \"600\".\n\n    ...\n    modparam(\"auth_identity\",\"msg_timeout\",600)\n    ...\n                    \n\n",
  "auth_validity_time": "### auth_validity_time (integer)\n\nNote: this parameter is for verifier service.\n\nThe validity time of an authenticated message. The message will be\nrefused if it contains a time different by more than this seconds from\nthe current time noted by the verification service.\n\nThis parameter is optional. The default value is \"3600\".\n\n    ...\n    modparam(\"auth_identity\",\"auth_validity_time\",3600)\n    ...\n                    \n\n",
  "callid_cache_limit": "### callid_cache_limit (integer)\n\nNote: this parameter is for verifier service.\n\nThe number of Call-IDs stored in order to recognize call replay attacks.\nA Call-ID is stored `auth_validity_time` long and uses approximately 100\nbytes memory.\n\nThis parameter is optional. The default value is \"32768\". (you should\nincrease the size of shared memory with -m command line switch if you\nliked to store more callid than 10000)\n\n    ...\n    modparam(\"auth_identity\",\"callid_cache_limit\",32768)\n    ...\n                    \n\n",
  "certificate_cache_limit": "### certificate_cache_limit (integer)\n\nNote: this parameter is for verifier service.\n\nThe number of certificates stored in order to avoid needless download. A\ncertificate is stored until its expiration date and uses approximately\n600 bytes memory.\n\nThis parameter is optional. The default value is \"4096\".\n\n    ...\n    modparam(\"auth_identity\",\"certificate_cache_limit\",4096)\n    ...\n                    \n\n",
  "cainfo_path": "### cainfo_path (string)\n\nNote: this parameter is for verifier service.\n\nA file of trusted certificates. The file should contain multiple\ncertificates in PEM format concatenated together. It could be useful for\nverifying a certificate signed by a private CA.\n\nThis parameter is optional. It has not got default value.\n\n    ...\n    modparam(\"auth_identity\",\"cainfo_path\",\"/etc/ssl/certs/ca-certificates.crt\")\n    ...\n                    \n\n",
  "accept_pem_certs": "### accept_pem_certs (int)\n\nNote: this parameter is for verifier service.\n\nEnables the acquired certificate processing if it is in PEM format.\nValue can be 0 or 1.\n\nThis parameter is optional. The default value is \"0\".\n\n    ...\n    modparam(\"auth_identity\",\"accept_pem_certs\",1)\n    ...\n                    \n\n"
 },
 "auth_radius": {
  "radius_config": "### radius_config (string)\n\nThis is the location of the configuration file of radius client\nlibraries.\n\nDefault value is \u201c/usr/local/etc/radiusclient-ng/radiusclient.conf\u201d.\n\n    modparam(\"auth_radius\", \"radius_config\", \"/etc/radiusclient.conf\")\n            \n\n",
  "service_type": "### service_type (integer)\n\nThis is the value of the Service-Type radius attribute to be used. The\ndefault should be fine for most people. See your radius client include\nfiles for numbers to be put in this parameter if you need to change it.\n\nDefault value is \u201c15\u201d.\n\n    modparam(\"auth_radius\", \"service_type\", 15)\n            \n\n",
  "auth_extra": "### auth_extra (string)\n\nSemi-colon separated list of extra RADIUS attribute name=pseudo variable\npairs. When radius_www_authorize() or radius_proxy_authorize() function\nis called, listed extra attributes are included in RADIUS request with\ncurrent values of corresponding pseudo variables.\n\nThere is no default value, i.e., by default no extra attributes are\nincluded.\n\n    modparam(\"auth_radius\", \"auth_extra\", \"Acct-Session-Id=$ci\")\n            \n\n",
  "use_ruri_flag": "### use_ruri_flag (integer)\n\nWhen this parameter is set to the value other than \"-1\" and the request\nbeing authenticated has flag with matching number set via setflag()\nfunction, use Request URI instead of uri parameter value from the\nAuthorization / Proxy-Authorization header field to perform RADIUS\nauthentication. This is intended to provide workaround for misbehaving\nNAT / routers / ALGs that alter request in the transit, breaking\nauthentication. At the time of this writing, certain versions of Linksys\nWRT54GL are known to do that.\n\nDefault value is \u201c-1\u201d.\n\n    modparam(\"auth_radius\", \"use_ruri_flag\", 22)\n                    \n\n",
  "radius_avps_mode": "### radius_avps_mode (integer)\n\nIf set to 1, all RADIUS AVPs returned by RADIUS server are stored in\nKamailio AVPs list. If set to 0, only the SIP_AVP type of RADIUS AVPs\nare stored in Kamailio AVPs list.\n\nDefault value is 0.\n\n    modparam(\"auth_radius\", \"radius_avps_mode\", 1)\n            \n\n",
  "append_realm_to_username": "### append_realm_to_username (integer)\n\nIf set to 1, the username passed to the RADIUS server will have the\ndigest realm appended to it, if no domain is provided in the digest\nusername.\n\nDefault value is 1.\n\n    modparam(\"auth_radius\", \"append_realm_to_username\", 0)\n            \n\n"
 },
 "sipdump": {
  "enable": "### enable (int)\n\nEnable sipdump activity.\n\n*Default value is 0 (0 - off; 1 - on).*\n\n    ...\n    modparam(\"sipdump\", \"enable\", 1)\n    ...\n\n",
  "mode": "### mode (int)\n\nSet the type of activity done by the module, the value can be set based\non flags index: 0 (value 1) - write to text files; 1 (value 2) - execute\nevent route; 2 (value 4) - write to pcap files; 3 (value 8) - insert the\nP-KSR-SIPDump header with meta data inside the SIP message written in\npcap file.\n\nTo enable several activity modes, set the parameter to the sum of\ncorresponding values.\n\n*Default value is 1 (write to text files).*\n\n    ...\n    modparam(\"sipdump\", \"mode\", 3)\n    ...\n\n",
  "wait": "### wait (int)\n\nWait time (microseconds) when no SIP traffic is received.\n\n*Default value is 100.*\n\n    ...\n    modparam(\"sipdump\", \"wait\", 2000)\n    ...\n\n",
  "rotate": "### rotate (int)\n\nTime interval in seconds to rotate files.\n\n*Default value is 7200 (2 hours).*\n\n    ...\n    modparam(\"sipdump\", \"rotate\", 3600)\n    ...\n\n",
  "folder": "### folder (str)\n\nPath to the folder where to save the files.\n\n*Default value is \"/tmp\".*\n\n    ...\n    modparam(\"sipdump\", \"folder\", \"/run/kamailio\")\n    ...\n\n",
  "fprefix": "### fprefix (str)\n\nFile name prefix. The date is appended to this prefix in the format\nyyyy-mm-dd--hh-mm-ss. The extension of the text file is \".data\", of the\nmeta file is \".meta\" and of the pcap file is \".pcap\".\n\n*Default value is \"kamailio-sipdump-\".*\n\n    ...\n    modparam(\"sipdump\", \"fprefix\", \"ksipdump-\")\n    ...\n\n",
  "fage": "### fage (int)\n\nAge of created files (in seconds) to be removed if they become older.\nCleanup is done on a timer routine running every 600 seconds.\n\n*Default value is 0 (no cleanup of created files).*\n\n    ...\n    # cleanup files older than two days\n    modparam(\"sipdump\", \"fage\", 172800)\n    ...\n\n",
  "event_callback": "### event_callback (str)\n\nName of the KEMI function to be executed instead of the event route.\n\n*Default value is not set.*\n\n    ...\n    modparam(\"sipdump\", \"event_callback\", \"ksr_sipdump_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_sipdump_event(evname)\n        KSR.info(\"===== sipdump module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n    ...\n\n"
 },
 "mqtt": {
  "host": "### host (str)\n\nMQTT Broker IP/Hostname.\n\n*No default, this parameter is mandatory.*\n\n    ...\n    modparam(\"mqtt\", \"host\", \"1.2.3.4\")\n    ...\n\n",
  "port": "### port (int)\n\nMQTT Broker port number.\n\n*Default value is 1883.*\n\n    ...\n    modparam(\"mqtt\", \"port\", 1883)\n    ...\n\n",
  "keepalive": "### keepalive (int)\n\nThe number of seconds after which the broker should send a PING message\nto the kamailio if no other messages have been exchanged in that time.\n\n*Default value is 5.*\n\n    ...\n    modparam(\"mqtt\", \"keepalive\", 5)\n    ...\n\n",
  "id": "### id (str)\n\nString to use as the mqtt client id. If NULL, a random client id will be\ngenerated.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"mqtt\", \"id\", \"kamailio123\")\n    ...\n\n",
  "username": "### username (str)\n\nThe username to send as a string or NULL to disable authentication.\n\n*Default value is NULL (no authentication). Must be used together with\n`password`.*\n\n    ...\n    modparam(\"mqtt\", \"username\", \"kamailio-user\")\n    ...\n\n",
  "password": "### password (str)\n\nThe password to send as a string or NULL to disable authentication.\n\n*Default value is NULL (no authentication). Must be used together with\n`username`.*\n\n    ...\n    modparam(\"mqtt\", \"password\", \"supers3cre7\")\n    ...\n\n",
  "will_topic": "### will_topic (str)\n\nThe topic on which to publish the mqtt will.\n\n*Default value is NULL. Must be used together with `will`.*\n\n    ...\n    modparam(\"mqtt\", \"will_topic\", \"kamailio123\")\n    ...\n\n",
  "will": "### will (str)\n\nThe mqtt will payload to be published.\n\n*Default value is NULL. Must be used together with `will_topic`.*\n\n    ...\n    modparam(\"mqtt\", \"will\", \"gone\")\n    ...\n            \n\n",
  "event_callback": "### event_callback (str)\n\nThe name of the function in the kemi configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[...\\] blocks.\n\nThe function receives a string parameter with the name of the event, the\nvalues are: 'mqtt:connected', 'mqtt:disconnected', 'mqtt:message'.\n\n*Default value is 'empty' (no function is executed for events).*\n\n    ...\n    modparam(\"mqtt\", \"event_callback\", \"ksr_mqtt_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_mqtt_event(evname)\n        KSR.info(\"===== mqtt module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n\n    -- event callback function implemented in Python\n    function ksr_mqtt_event(self, msg, evname)\n        KSR.info(\"===== mqtt module triggered event: %s\\n\" % evname);\n        return 1;\n    end\n    ...\n\n",
  "ca_file": "### ca_file (str)\n\nPath to a file containing the PEM encoded trusted CA certificate files.\n\n*Default value is NULL. Set either this parameter or `ca_path` if you\nwant to connect via TLS.*\n\n    ...\n    modparam(\"mqtt\", \"ca_file\", \"/etc/ssl/certs/myca.pem\")\n    ...\n            \n\n",
  "ca_path": "### ca_path (str)\n\nUsed to define a directory that contains PEM encoded CA certificates\nthat are trusted. For `ca_path` to work correctly, the certificates\nfiles must have \".pem\" as the file ending and you must run \"openssl\nrehash /your/ca_path\" each time you add/remove a certificate.\n\n*Default value is NULL. Set either this parameter or `ca_file` if you\nwant to connect via TLS. `ca_file` and `ca_path` are mutual exclusive.*\n\n    ...\n    modparam(\"mqtt\", \"ca_path\", \"/etc/ssl/certs\")\n    ...\n            \n\n",
  "tls_method": "### tls_method (str)\n\nThe version of the SSL/TLS protocol to use as a string. If NULL, the\ndefault value is used. The default value and the available values depend\non the version of openssl that libmosquitto was compiled against.\n\nPossible values:\n\n- tlsv1.3 is available with openssl \\>= 1.1.1 together with libmosquitto\n  v1.6.8 and newer.\n\n- For openssl \\>= 1.0.1, the available options are tlsv1.2, tlsv1.1 and\n  tlsv1, with tlv1.2 as the default.\n\n- For openssl \\< 1.0.1, only tlsv1 is available.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"mqtt\", \"tls_method\", \"tlsv1.3\")\n    ...\n            \n\n",
  "tls_alpn": "### tls_alpn (str)\n\nUsed to set the TLS ALPN option for cases where one TLS port is used to\nshare multiple services. Prominent example is AWS IoT, where you have to\nset the `tls_alpn` to \"mqtt\" to be able to connect via MQTT.\n\n*Default value is NULL, where no ALPN is set on the TLS connection.*\n\n    ...\n    modparam(\"mqtt\", \"tls_alpn\", \"mqtt\")\n    ...\n            \n\n",
  "certificate": "### certificate (str)\n\nPath to a file containing the PEM encoded certificate file for a TLS\nclient connection.\n\n*Default value is NULL. If NULL, `private_key` must also be NULL and no\nclient certificate will be used.*\n\n    ...\n    modparam(\"mqtt\", \"certificate\", \"/etc/ssl/certs/myclient.pem\")\n    ...\n            \n\n",
  "private_key": "### private_key (str)\n\nPath to a file containing the PEM encoded private key for a TLS client\nconnection.\n\n*Default value is NULL. If NULL, `certificate` must also be NULL and no\nclient certificate will be used.*\n\n    ...\n    modparam(\"mqtt\", \"private_key\", \"/etc/ssl/private/myclient.key\")\n    ...\n            \n\n",
  "cipher_list": "### cipher_list (str)\n\nA string describing the ciphers available for use. See the\n[cipher(1)](https://www.openssl.org/docs/manmaster/man1/ciphers.html)\nOpenSSL man page. If NULL, the libssl default ciphers will be used.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"mqtt\", \"cipher_list\", \"HIGH\")\n    ...\n            \n\n",
  "verify_certificate": "### verify_certificate (str)\n\nConfigure verification of the server certificate. If value is set to 0,\nit is impossible to guarantee that the host you are connecting to is not\nimpersonating your server.\n\nThis can be useful in initial server testing, but makes it possible for\na malicious third party to impersonate your server through DNS spoofing,\nfor example.\n\nDo not disable verification in a real system as it makes the connection\nencryption pointless.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"mqtt\", \"verify_certificate\", \"0\")\n    ...\n            \n\n"
 },
 "htable": {
  "htable": "### htable (str)\n\nThe definition of a hash table. The value of the parameter may have the\nfollowing format:\n\n- \"htname=\\>size=\\_number\\_;autoexpire=\\_number\\_;dbtable=\\_string\\_\"\n\nThe parameter can be set multiple times to get more hash tables in same\nconfiguration file.\n\n- *htname* - string specifying the name of the hash table. This string\n  is used by *\\$sht(...)* to refer to the hash table.\n\n- *size* - number to control how many slots (buckets) to create for the\n  hash table. Larger value means more slots with higher probability for\n  less collisions. The actual number slots (or buckets) created for the\n  table is 2^size. The possible range for this value is from 2 to 31,\n  smaller or larger values will be increased to 3 (8 slots) or decreased\n  to 14 (16384 slots). Note that each slot can store more than one item,\n  when there are collisions of hash ids computed for keys. The items in\n  the same slot are stored in a linked list. In other words, the size is\n  not setting a limit of how many items can be stored in a hash table,\n  as long as there is enough free shared memory, new items can be added.\n\n- *autoexpire* -time in seconds to delete an item from a hash table if\n  no update was done to it. If it is missing or set to 0, the items\n  won't expire.\n\n- *dbtable* - name of database to be loaded at startup in hash table. If\n  empty or missing, no data will be loaded.\n\n- *cols* - the column names of the database table. They must be enclosed\n  in quotes in order to form a valid SIP parameter value and be\n  separated by comma. The first column corresponds to key_name. When\n  specified, there must be at least two columns. If this attribute is\n  not specified, then the global module parameters for column names are\n  used. If more than one value columns are specified, the hash table\n  will pack the column values in a comma separated string, which will be\n  associated with the key (string transformation {s.select,...} can be\n  used in configuration file to extract a specific column value). When\n  cols attribute is present, writing back to database table is disabled.\n\n- *dbmode* - if set to 1, the content of hash table is written to\n  database table when the SIP server is stopped (i.e., ensure\n  persistency over restarts). Default value is 0 (no write back to db\n  table).\n\n- *initval* - the integer value to be returned instead of \\$null when a\n  requested key is not set.\n\n- *updateexpire* - if set to 1 (default), the time until expiration of\n  an item is reset when that item is updated. Certain uses of htable may\n  dictate that updates should not reset the expiration timeout, however,\n  in which case this attribute can be set to 0.\n\n- *dmqreplicate* - if set to 1, any actions (set, update, delete etc.)\n  performed upon entries in this table will be replicated to other nodes\n  (htable peers). Please note, module parameter \u201cenable_dmq\u201d must also\n  be set in order for this to apply (see below). Default is 0 (no\n  replication).\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"htable\", \"htable\", \"a=>size=4;autoexpire=7200;dbtable=htable_a;\")\n    modparam(\"htable\", \"htable\", \"b=>size=5;\")\n    modparam(\"htable\", \"htable\", \"c=>size=4;autoexpire=7200;initval=1;dmqreplicate=1;\")\n    ...\n\n",
  "db_url": "### db_url (str)\n\nThe URL to connect to database for loading values in hash table at start\nup.\n\n*Default value is NULL (do not connect).*\n\n    ...\n    modparam(\"htable\", \"db_url\", \"mysql://kamailio:kamailiorw@localhost/kamailio\")\n    ...\n\n",
  "key_name_column": "### key_name_column (str)\n\nThe name of the column containing the hash table key name.\n\n*Default value is 'key_name'.*\n\n    ...\n    modparam(\"htable\", \"key_name_column\", \"kname\")\n    ...\n\n",
  "key_type_column": "### key_type_column (str)\n\nThe name of the column containing the hash table key type.\n\n*Default value is 'key_type'.*\n\n    ...\n    modparam(\"htable\", \"key_type_column\", \"ktype\")\n    ...\n\n",
  "value_type_column": "### value_type_column (str)\n\nThe name of the column containing the hash table value type.\n\n*Default value is 'value_type'.*\n\n    ...\n    modparam(\"htable\", \"value_type_column\", \"vtype\")\n    ...\n\n",
  "key_value_column": "### key_value_column (str)\n\nThe name of the column containing hash table key value.\n\n*Default value is 'key_value'.*\n\n    ...\n    modparam(\"htable\", \"key_value_column\", \"kvalue\")\n    ...\n\n",
  "expires_column": "### expires_column (str)\n\nThe name of the column containing the expires value.\n\n*Default value is 'expires'.*\n\n    ...\n    modparam(\"htable\", \"expires_column\", \"expiry\")\n    ...\n\n",
  "array_size_suffix": "### array_size_suffix (str)\n\nThe suffix to be added to store the number of items in an array (see key\ntype).\n\n*Default value is '::size'.*\n\n    ...\n    modparam(\"htable\", \"array_size_suffix\", \"-count\")\n    ...\n\n",
  "fetch_rows": "### fetch_rows (integer)\n\nHow many rows to fetch at once from database.\n\n*Default value is 100.*\n\n    ...\n    modparam(\"htable\", \"fetch_rows\", 1000)\n    ...\n\n",
  "timer_interval": "### timer_interval (integer)\n\nInterval in seconds to check for expired htable values.\n\n*Default value is 20.*\n\n    ...\n    modparam(\"htable\", \"timer_interval\", 10)\n    ...\n\n",
  "db_expires": "### db_expires (integer)\n\nIf set to 1, the module loads/saves the value for expire of the items in\nhash table from/to database. It applies only to hash tables that have\nthe auto-expires attribute defined. If set to 0, only the key name and\nthe value are loaded, the expires for each item being set to 0.\n\nNote that the module is not reloading automatically the items from\ndatabase when they expire, the reloading can be done only via RPC\ncommand.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"htable\", \"db_expires\", 1)\n    ...\n\n",
  "enable_dmq": "### enable_dmq (integer)\n\nIf set to 1, will enable DMQ replication of actions performed upon\nentries in all tables having \"dmqreplicate\" parameter set. Any update\naction performed via pseudo-variables and RPC commands will be repeated\non all other nodes. Therefore, it is important to ensure the table\ndefinition (size, autoexpire etc.) is identical across all instances.\n\n*Important: If this parameter is enabled, the DMQ module must be loaded\nfirst - otherwise, startup will fail.*\n\nCurrently, values are not replicated on load from DB as it is expected\nthat in these cases, all servers will load their values from the same\nDB.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"htable\", \"enable_dmq\", 1)\n    ...\n\n",
  "dmq_init_sync": "### dmq_init_sync (integer)\n\nIf set to 1, will request synchronization from other nodes at startup.\nIt applies to all tables having the \"dmqreplicate\" parameter set. As\nabove, it is important to ensure the definition (size, autoexpire etc.)\nof replicated tables is identical across all instances.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"htable\", \"dmq_init_sync\", 1)\n    ...\n\n",
  "timer_procs": "### timer_procs (integer)\n\nIf set to 1 or greater, the module will create its own timer processes\nto scan for expired items in hash tables. If set to zero, it will use\nthe core timer for this task. Set it to 1 if you store a lot of items\nwith autoexpire property.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"htable\", \"timer_procs\", 4)\n    ...\n\n",
  "event_callback": "### event_callback (str)\n\nThe name of the function in the kemi configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[...\\] blocks.\n\nThe function receives a string parameter with the name of the event, the\nvalues can be: 'htable:mod-init', 'htable:expired:htname' ('htname'\nbeing the name of hash table).\n\n*Default value is 'empty' (no function is executed for events).*\n\n    ...\n    modparam(\"htable\", \"event_callback\", \"ksr_htable_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_htable_event(evname)\n        KSR.info(\"===== htable module triggered event: \" .. evname .. \"\\n\");\n        return 1;\n    end\n    ...\n\n",
  "event_callback_mode": "### event_callback_mode (int)\n\nControl when event_route\\[htable:init\\] is executed: 0 - after all\nmodules were initialized; 1 - in first worker process.\n\nSet it to 1 if used in a KEMI script or when needing to use database\n(e.g., via sqlops) inside event_route\\[htable:init\\].\n\n*Default value is 0.*\n\n    ...\n    modparam(\"htable\", \"event_callback_mode\", 1)\n    ...\n\n"
 },
 "xhttp_pi": {
  "xhttp_pi_root": "### xhttp_pi_root (str)\n\nIt specifies the root path for provisioning http requests. The link to\nthe provisioning web interface must be constructed using the following\npattern: http://\\[server_IP\\]:\\[tcp_port\\]/\\[xhttp_pi_root\\]\n\n*Default value is \"pi\".*\n\n    ...\n    modparam(\"xhttp_pi\", \"xhttp_pi_root\", \"pi\")\n    ...\n\n",
  "xhttp_pi_buf_size": "### xhttp_pi_buf_size (int)\n\nIt specifies the maximum length of the buffer (in bytes) used to write\nin the HTML reply information in order to build the HTML response.\n\n*Default value is 0 (auto set to 1/3 of the size of the configured pkg\nmem).*\n\n    ...\n    modparam(\"xhttp_pi\", \"xhttp_pi_buf_size\", 1024)\n    ...\n\n",
  "framework": "### framework (string)\n\nIt specifies the full path for xml framework descriptor.\n\n*There's no default value. This parameter is mandatory.*\n\n    ...\n    modparam(\"xhttp_pi\", \"framework\", \"/usr/local/etc/kamailio/pi_framework.xml\")\n    ...\n\n"
 },
 "nat_traversal": {},
 "xmlrpc": {
  "route": "### route (string)\n\nName of the route called for XMLRPC messages.\n\nThis route will be called only for HTTP messages whose method is either\nGET or POST. The message visible inside the route will be a HTTP request\nconverted to SIP (the uri will be fixed and a fake via will be added).\n\nThe route should perform additional security checks to ensure the client\nis authorized to execute management/RPC functions and then it should\ncall the `dispatch_rpc()`.\n\nDefault: the main route is used.\n\n    modparam(\"xmlrpc\", \"route\", \"route_for_xmlrpcs\")\n            \n\n",
  "autoconversion": "### autoconversion (string)\n\nEnable or disable automatic parameter type conversion globally, for all\nthe methods parameters. If on, a type mismatch in a method parameter\nwill not cause a fault if it is possible to automatically convert it to\nthe type expected by the method.\n\nDefault: off.\n\nIt is recommended to leave this parameter to its default off value and\nfix instead the client application (which should use the proper types)\nor to modify the target rpc to accept any type (see the rpc scan '.'\nmodifier).\n\n    modparam(\"xmlrpc\", \"autoconversion\", 1)\n            \n\n",
  "escape_cr": "### escape_cr (integer)\n\nEnable CR ('\\r') escaping in replies. If enabled each '\\r' in the xmlrpc\nreply will be replaced with \"&#xD;\", according to the xml spec.\n\nIt should be turned off only if you suspect interoperability problems\nwith older clients.\n\nDefault: on.\n\n    modparam(\"xmlrpc\", \"escape_cr\", 1)\n            \n\n",
  "double_lf_to_crlf": "### double_lf_to_crlf (integer)\n\nWhen enabled double LFs ('\\n\\n') in the input xmlrpc strings will be\nreplaced with CR LF ('\\r\\n'). This makes LF LF behave like an escape\ncharacter for CR LF and is needed for compatibility with Kamailio tools\nand to work around buggy xmlrpc clients that don't escape the CR in CR\nLF ('\\r' should be escaped to \"&#xD;\" otherwise according to the xml\nspec \"\\r\\n\" will be transformed to '\\n'), but need to send CR LF in the\nstrings (e.g. they use `tm.t_uac_wait`).\n\nNote: when this option is turned on, there is no way to send a double LF\n('\\n\\n'), it will always be transformed in CR LF ('\\r\\n').\n\nDefault: off.\n\n    modparam(\"xmlrpc\", \"double_lf_to_crlf\", 1)\n            \n\n",
  "mode": "### mode (integer)\n\nWhen set to 1, the xmlrpc module does not register to core the callback\nfunctions for non-SIP messages. Useful when another module registers a\ncallback for HTTP request, letting the admin decide when to call the\nXMLRPC route (or functions).\n\nDefault: 0.\n\n    modparam(\"xmlrpc\", \"mode\", 1)\n            \n\n",
  "url_skip": "### url_skip (str)\n\nRegular expression to match the HTTP URL. If there is a match, then the\nxmlrpc route is not executed.\n\n*Default value is null (don't skip).*\n\n    ...\n    modparam(\"xmlrpc\", \"url_skip\", \"^/sip\")\n    ...\n\n",
  "url_match": "### url_match (str)\n\nRegular expression to match the HTTP URL. If there is no match, then\nxmlrpc route is not executed. This check is done after url_skip, so if\nboth url_skip and url_match would match then the xmlrpc route is not\nexecuted (url_skip has higher priority).\n\n*Default value is null (match everything).*\n\n    ...\n    modparam(\"xmlrpc\", \"url_match\", \"^/RPC2\")\n    ...\n\n",
  "event_callback": "### event_callback (string)\n\nThe name of the function in the kemi configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nroute blocks defined by route parameter for xmlrpc request.\n\nThis route will be called only for HTTP messages whose method is either\nGET or POST. The message visible inside the route will be a HTTP request\nconverted to SIP (the uri will be fixed and a fake via will be added).\n\nThe route should perform additional security checks to ensure the client\nis authorized to execute management/RPC functions and then it should\ncall the `dispatch_rpc()`.\n\n    ...\n    modparam(\"xmlrpc\", \"event_callback\", \"ksr_xmlrpc_event\")\n    ...\n    -- event callback function implemented in Lua\n    function ksr_xmlrpc_event(evname)\n        KSR.info(\"===== xmlrpc triggered event: \" .. evname .. \"\\n\");\n        local rpc_method = KSR.pv.get(\"$rm\") or \"\"\n        if ((rpc_method == \"POST\" or rpc_method == \"GET\")) then\n            if (KSR.xmlrpc.dispatch_rpc() < 0) then\n                KSR.err(\"error while executing xmlrpc event\")\n            end\n        end\n        return 1;\n    end\n    ...\n\n"
 },
 "app_lua": {
  "load": "### load (string)\n\nSet the path to the Lua script to be loaded at startup. Then you can use\nlua_run(function, params) to execute a function from the script at\nruntime. The script can be in Lua-source or bytecode.\n\n*Default value is \u201cnull\u201d.*\n\n    ...\n    modparam(\"app_lua\", \"load\", \"/usr/local/etc/kamailio/lua/myscript.lua\")\n    ...\n\n",
  "reload": "### reload (boolean)\n\nIf reload is 1 enables the ability to reload the scripts using the RPC\napp_lua.reload command. To disable reload feature, set this parameter to\n0.\n\n*Default value is \u201c1 (on)\u201d.*\n\n    ...\n    modparam(\"app_lua\", \"reload\", 0)\n    ...\n\n",
  "log_mode": "### log_mode (int)\n\nControl what is printed in log messages. If bit 1 is set, then the\nmodule prints debug messages for each KEMI export.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"app_lua\", \"log_mode\", 1)\n    ...\n\n"
 },
 "nosip": {
  "msg_match": "### msg_match (str)\n\nRegular expression to match against content of the packet in order to\nexecute the event_route\\[nosip:msg\\].\n\n*Default value is empty.*\n\n    ...\n    modparam(\"nosip\", \"msg_match\", \"^KREQUEST-\")\n    ...\n\n",
  "msg_skip": "### msg_skip (str)\n\nRegular expression to match against content of the packet in order to\nskip execution the event_route\\[nosip:msg\\].\n\n*Default value is empty.*\n\n    ...\n    modparam(\"nosip\", \"msg_skip\", \"^GET \")\n    ...\n\n"
 },
 "db_postgres": {
  "retries": "### retries (integer)\n\nHow many retries to attempt to reconnect if connection to Postgres\nserver becomes broken.\n\n*Default value is 2 (that means three attempts to submit the query,\nfirst will trigger the connection error and two more (the value of this\nparameter) after resetting the connection).*\n\n    ...\n    modparam(\"db_postgres\", \"retries\", 3)\n    ...\n\n",
  "timeout": "### timeout (integer)\n\nSetting this variable to any value larger than zero (which is the\ndefault value) enables mainly query timeout. For backward compatibility\nit also enables connection timeout if connect_timeout param is not set\nusing the con_param below. If a connection attempt or a query takes\nlonger than this many seconds, the operation will be aborted and an\nerror will be returned.\n\nNote that this timeout is applied to each underlying operation (i.e. for\neach connection attempt), so depending on circumstances and on the value\nof the \u201cretries\u201d variable, a single query from the SIP proxy's point of\nview can take longer than the \u201ctimeout\u201d.\n\n    ...\n    modparam(\"db_postgres\", \"timeout\", 10)\n    ...\n\n",
  "tcp_keepalive": "### tcp_keepalive (integer)\n\nEnable the TCP keepalive timer and set the number of seconds the\nconnection must be idle before to start sending keepalive packets.\nDefaults to zero, which disables TCP keepalive packets.\n\n*Only supported on platforms which understand and support the\n\u201cTCP_KEEPIDLE\u201d socket option.*\n\n    ...\n    modparam(\"db_postgres\", \"tcp_keepalive\", 600)\n    ...\n\n",
  "lockset": "### lockset (integer)\n\nThe value is used as power of two to compute the size of the lock set\nneeded to implement the equivalent of REPLACE SQL statement.\n\nDefault value is 4 (lock set size is 16).\n\n    ...\n    modparam(\"db_postgres\", \"lockset\", 6)\n    ...\n\n",
  "bytea_output_escape": "### bytea_output_escape (integer)\n\nControl if the module should request escaping the output for bytea\nfields.\n\nDefault value is 1 (do the escape).\n\n    ...\n    modparam(\"db_postgres\", \"bytea_output_escape\", 0)\n    ...\n\n",
  "con_param": "### con_param (str)\n\nSpecifies the connection string parameters. Parameter definition must be\nin the format param1=value1;param2=value2. Many parameters can be set.\n\nNOTE: See postgres connection keyword list\n(https://www.postgresql.org/docs/12/libpq-connect.html#LIBPQ-PARAMKEYWORDS)\n\n    ...\n    modparam(\"db_postgres\", \"con_param\", \"connect_timeout=15;tcp_user_timeout=5000\")\n    ...\n\n"
 },
 "ctl": {
  "binrpc": "### binrpc (string)\n\nSpecifies the transport used for the binrpc protocol. The following\ntransport protocol are supported: Unix datagram sockets, Unix stream\nsockets, UDP and TCP.\n\nThe format is: \\[ protocol:\\] address_port\\|path .\n\n- For *Unix* sockets: \\[unixd\\|unixs\\|unix\\]:path where `\"unixd\"` means\n  Unix datagram sockets and `\"unix\"` `\"unixs\"` mean Unix stream sockets.\n  Examples: \"unixd:/tmp/unix_dgram\", \"unixs:/tmp/unix_stream\",\n  \"unix:/tmp/unix_stream\".\n\n- For *UDP* or *TCP* sockets: \\[udp\\|tcp\\]:address:port. If the address\n  is \"\\*\" or missing, it will bind to all the local addresses (0.0.0.0).\n  Examples: \"udp:localhost:2046\", \"tcp:localhost:2046\", \"tcp:3012\",\n  \"udp:\\*:3012\".\n\nIf the protocol part is missing and the address/path part looks like a\nfile system path it will default to a Unix stream socket and if not to a\nUnix UDP socket. Examples:\n\n- \"/tmp/unix_test\" - equivalent to \"unixs:/tmp/unix_test\".\n- \"localhost:3000\" - equivalent to \"udp:localhost:3000\".\n\nMultiple transports / listen addresses can be specified, just by setting\nthe parameter multiple times.\n\n*Default:* \"unix:/run/kamailio/kamailio_ctl\" (Unix stream socket). The\ndefault value is used *only* if no `binrpc` parameter is found in the\nconfig file.\n\n    loadmodule \"ctl\"\n    # optional listen addresses, if no one is specified,\n    # ctl will listen on unixs:/tmp/kamailio_ctl\n\n    modparam(\"ctl\", \"binrpc\", \"unix:/run/kamailio/kamailio_ctl\") # default\n    modparam(\"ctl\", \"binrpc\", \"udp:localhost:2046\")\n    modparam(\"ctl\", \"binrpc\", \"tcp:localhost:2046\")\n    modparam(\"ctl\", \"binrpc\", \"unixd:/tmp/unix_dgram\")  # unix datagram\n    modparam(\"ctl\", \"binrpc\", \"unixs:/tmp/unix_stream\") # unix stream\n    modparam(\"ctl\", \"binrpc\", \"unix:/tmp/unix_default\") # unix stream\n    modparam(\"ctl\", \"binrpc\", \"/tmp/unix_test\")         # unix stream\n    modparam(\"ctl\", \"binrpc\", \"localhost:3000\")         # udp\n    modparam(\"ctl\", \"binrpc\", \"tcp:3012\")               # tcp any , port 3012\n    modparam(\"ctl\", \"binrpc\", \"udp:*:3012\")             # udp any , port 3012\n            \n\n",
  "binrpc_buffer_size": "### binrpc_buffer_size (integer)\n\nThe size of the internal buffer used for printing elements of the RPC\nresponse (e.g., internal RPC printf()). The value is given in bytes.\n\nDefault: 1024.\n\n                ...\n                modparam(\"ctl\", \"binrpc_buffer_size\", 4096)\n                ...\n            \n\n",
  "mode": "### mode (integer)\n\nPermissions used for the created Unix sockets or for the fifo.\n\nDefault: 0600.\n\n    modparam(\"ctl\", \"mode\", 0600) # permissions\n            \n\n",
  "user": "### user (integer or string)\n\nUsername or uid used for the created Unix sockets or for the fifo.\n\nDefault: not set (the user under which SER runs).\n\n    ...\n    modparam(\"ctl\", \"user\", \"andrei\")\n    ...\n            \n\n",
  "group": "### group (integer or string)\n\nGroup name or gid used for the created Unix sockets or for the fifo.\n\nDefault: not set (the group under which SER runs).\n\n    ...\n    modparam(\"ctl\", \"group\", 100)\n    ...\n            \n\n",
  "fifo": "### fifo (integer)\n\nfifo used for the obsolete fifo protocol. The fifo protocol can be run\nover a real fifo, over UDP or over TCP. Format:\n\\[protocol:\\]path\\|address. If no protocol is specified the default is\n\"fifo\". Examples: \"fifo:/tmp/kamailio_fifo\", \"/tmp/kamailio_fifo2\",\n\"udp:\\*:2050\", \"tcp:localhost:2050\". For more details on the UDP and TCP\nformats see `binrpc`. Multiple fifos or fifo transports can be used in\nthe same time (just by setting the `fifo` parameter multiple times in\nthe config).\n\nDefault: not set (no fifo will be used).\n\n    ...\n    # old fifo support\n    modparam(\"ctl\", \"fifo\", \"fifo:/tmp/kamailio_fifo\")      # classic fifo\n    modparam(\"ctl\", \"fifo\", \"/tmp/kamailio_fifo2\")\n    modparam(\"ctl\", \"fifo\", \"udp:*:2050\")              # fifo protocol over udp\n    modparam(\"ctl\", \"fifo\", \"tcp:*:2050\")              # fifo over tcp\n    ...\n            \n\n",
  "autoconversion": "### autoconversion (integer)\n\nEnable or disable automatic type conversion globally, for all the\nmethods parameters. If on, a type mismatch in a method parameter will\nnot cause a fault if it is possible to automatically convert it to the\nexpected type.\n\nDefault: off\n\nIt is recommended to leave this parameter to its default off value and\nfix instead the client application (which should use the proper types)\nor to modify the target rpc to accept any type (see the rpc scan '.'\nmodifier).\n\n    ...\n    modparam(\"ctl\", \"autoconversion\", 1)\n    ...\n            \n\n",
  "binrpc_max_body_size": "### binrpc_max_body_size (integer)\n\nSet the size of binrpc buffer for RPC reply. Value represents kilobytes.\n\nDefault: 32 (meaning 32KB);\n\n    ...\n    modparam(\"ctl\", \"binrpc_max_body_size\", 16)\n    ...\n            \n\n",
  "binrpc_struct_max_body_size": "### binrpc_struct_max_body_size (integer)\n\nSet the size of binrpc structure buffer for RPC reply. Value represents\nkilobytes.\n\nDefault: 8 (meaning 8KB);\n\n    ...\n    modparam(\"ctl\", \"binrpc_struct_max_body_size\", 4)\n    ...\n            \n\n"
 },
 "acc_json": {
  "acc_flag": "### acc_flag (integer)\n\nRequest flag which needs to be set to account a transaction in acc_json.\nSee acc_output_mqueue and acc_output_syslog\n\nDefault value is not-set (no flag).\n\n    ...\n    modparam(\"acc_json\", \"acc_flag\", 2)\n    ...\n            \n\n",
  "acc_missed_flag": "### acc_missed_flag (integer)\n\nRequest flag which needs to be set to account missed calls in acc_json.\nSee acc_output_mqueue and acc_output_syslog\n\nDefault value is not-set (no flag).\n\n    ...\n    modparam(\"acc_json\", \"acc_missed_flag\", 3)\n    ...\n\n",
  "acc_extra": "### acc_extra (string)\n\nExtra values to be added to the json dictionary.\n\nDefault value is NULL.\n\n    ...\n    modparam(\"acc_json\", \"acc_extra\", \"via=$hdr(Via[*]); email=$avp(s:email)\")\n    ...\n\n",
  "acc_json_pre_encoded_prefix": "### acc_json_pre_encoded_prefix (string)\n\nPrefix to identify values that will be considered to be already json\nencoded.\n\nDefault value is NULL.\n\n    ...\n    modparam(\"acc_json\", \"acc_extra\", \"json_data=$avp(json_data);\")\n    modparam(\"acc_json\", \"acc_json_pre_encoded_prefix\", \"json_\")\n    ...\n    $avp(json_data) = '{\"b\":2, \"c\":3}';\n    ...\n\n",
  "acc_time_mode": "### acc_time_mode (integer)\n\nStore additional value related to the time of event.\n\nValues can be:\n\n- *0* - (default), save only unix timestamp for syslog and datetime for\n  database.\n\n- *1* - save seconds in time_attr and microseconds in time_exten.\n\n- *2* - save seconds.milliseconds in time_attr.\n\n- *3* - save formatted time according to time_format parameter, using\n  the output of localtime(). Used for cdr entries too.\n\n- *4* - save formatted time according to time_format parameter, using\n  the output of gmtime(). Used for cdr entries too.\n\n<!-- -->\n\n    ...\n    modparam(\"acc_json\", \"acc_time_mode\", 1)\n    ...\n            \n\n",
  "acc_time_format": "### acc_time_format (str)\n\nSpecify the format to print the time for time_mode 3 or 4.\n\nDefault value is %Y-%m-%d %H:%M:%S\".\n\n    ...\n    modparam(\"acc_json\", \"acc_time_format\", \"%Y/%m/%d %H:%M:%S\")\n    ...\n\n",
  "acc_output_mqueue": "### acc_output_mqueue (integer)\n\nRequires the mqueue module. The acc module will queue json acc events in\nthe specified mqueue. Using a rtimer module exec you can access the\nqueue and process them.\n\nYou can also fetch the acc events using mqueue.fetch over JSON-RPC.\n\nDefault value is not-set mqueue will not be required.\n\n    ...\n    # example using json_mqueue/http_client to publish to NSQD\n    max_while_loops=100000\n    modparam(\"mqueue\", \"mqueue\", \"name=acc_events;size=100000\")\n    modparam(\"acc_json\", \"acc_output_mqueue\", \"acc_events\")\n    modparam(\"acc_json\", \"acc_flag\", 2)\n    modparam(\"acc_json\", \"acc_extra\", \"caller_ip_port=$avp(caller_ip_port);\")\n    modparam(\"rtimer\", \"timer\", \"name=nsqt;interval=1;mode=1;\")\n    modparam(\"rtimer\", \"exec\", \"timer=nsqt;route=RUN_CDR_PUBLISH\")\n    modparam(\"http_client\", \"keep_connections\", 1)\n    modparam(\"http_client\", \"httpcon\", \"nsqd=>http://localhost:4151/pub?topic=acc\")\n\n    route[RUN_ACC_PUBLISH] {\n       $var(count) = 0;\n       while (mq_fetch(\"acc_events\")) {\n          $var(q_size) = mq_size(\"acc_events\");\n          $var(count) = $var(count) + 1;\n          xinfo(\"[RUN_ACC_PUBLISH][$var(q_size)][$var(count)][$mqk(acc_events)][$mqv(acc_events)]\\n\");\n          $var(res) = http_connect_raw(\"nsqd\", \"\", \"application/json\", $mqv(acc_events), \"$var(nsq_res)\");\n          if ($var(res) < 0) {\n             xerr(\"[RUN_ACC_PUBLISH][$var(res)] http_connect_raw: timeout or error !\\n\");\n             mq_add(\"acc_events\", \"acc_key\", \"$mqv(acc_events)\");\n          } else if ($var(res) < 200 || $var(res) > 299) {\n             xerr(\"[RUN_ACC_PUBLISH][$var(res)] http unexpected response code !\\n\");\n             mq_add(\"acc_dead_letter_queue\", \"acc_key\", \"$mqv(acc_events)\");\n             return;\n          }\n       }\n       if ($var(count) > 0 ) {\n          xinfo(\"[RUN_CDR_PUBLISH]done count[$var(count)]\\n\");\n       }\n    }\n    ...\n\n",
  "acc_output_syslog": "### acc_output_syslog (integer)\n\nControl if the output of acc json should be sent to syslog. This is not\ndependent on Kamailio global logging settings, we can use syslog even if\nKamailio is not daemonized and/or logging is done to sdtout stderr.\n\nDefault value is not-set (no flag).\n\n    ...\n    modparam(\"acc_json\", \"acc_output_syslog\", 1)\n    modparam(\"acc_json\", \"acc_log_level\", 2)\n    modparam(\"acc_json\", \"acc_log_facility\", \"LOG_DAEMON\")\n    ...\n\n",
  "acc_log_facility": "### acc_log_facility (integer)\n\nLog facility to which accounting messages are issued to syslog. This\nallows to easily separate the accounting specific logging from the other\nlog messages.\n\nDefault value is LOG_DAEMON.\n\n    ...\n    modparam(\"acc_json\", \"acc_log_facility\", \"LOG_LOCAL0\")\n\n    # modify you syslog/rsyslog config\n    # /etc/rsyslog.d/default.conf\n    # remove local0 from default log file\n    # *.*;local0,auth,authpriv.none /var/log/syslog\n    # add local0 to another log file\n    # local0.*                      /var/log/json_acc.log\n    ...\n\n",
  "acc_log_level": "### acc_log_level (integer)\n\nLog level at which accounting messages are issued to syslog.\n\nDefault value is 1 (L_NOTICE).\n\n    ...\n    modparam(\"acc_json\", \"acc_log_level\", 2) # Set acc_log_level to 2 (L_INFO)\n    ...\n\n",
  "cdr_enable": "### cdr_enable (int)\n\nEnable CDR reporting - one record per call is reported, relying on\ndialog module.\n\nThe value can be:\n\n- 0 - off (default).\n\n  1 - on.\n\n<!-- -->\n\n    ...\n    modparam(\"acc_json\", \"cdr_enable\", 1)\n    ...\n\n",
  "cdr_extra": "### cdr_extra (str)\n\nSet of pseudo-variables defining custom CDR fields.\n\nDefault value is NULL.\n\n    ...\n    modparam(\"acc_json\", \"cdr_extra\", \"ci=$dlg_var(call_id);ft=$dlg_var(from_tag)\")\n    ...\n\n",
  "cdr_json_pre_encoded_prefix": "### cdr_json_pre_encoded_prefix (string)\n\nPrefix to identify values that will be considered to be already json\nencoded.\n\nDefault value is NULL.\n\n    ...\n    modparam(\"acc_json\", \"cdr_extra\", \"json_data=$avp(json_data);\")\n    modparam(\"acc_json\", \"cdr_json_pre_encoded_prefix\", \"json_\")\n    ...\n    $avp(json_data) = '{\"b\":2, \"c\":3}';\n    ...\n\n",
  "cdr_expired_dlg_enable": "### cdr_expired_dlg_enable (str)\n\nShould CDR-based logging be enabled in case of expired dialogs?\n\n0 - off (default). 1 - on.\n\n    ...\n    modparam(\"acc_json\", \"cdr_expired_dlg_enable\", 1)\n    ...\n\n",
  "cdr_output_mqueue": "### cdr_output_mqueue (integer)\n\nRequires the mqueue module. The acc module will queue json cdr events in\nthe specified mqueue. Using a rtimer module exec you can access the\nqueue and process them.\n\nYou can also fetch the cdr events using mqueue.fetch over JSON-RPC.\n\nDefault value is not-set mqueue will not be required.\n\n    ...\n    # example using json_mqueue/http_client to publish to NSQD\n    modparam(\"mqueue\", \"mqueue\", \"name=cdr_events;size=100000\")\n    modparam(\"acc_json\", \"cdr_enable\", 1)\n    modparam(\"acc_json\", \"cdr_output_mqueue\", \"cdr_events\")\n    modparam(\"acc_json\", \"cdr_extra\", \"ci=$dlg_var(call_id)\")\n    modparam(\"rtimer\", \"timer\", \"name=nsqt;interval=1;mode=1;\")\n    modparam(\"rtimer\", \"exec\", \"timer=nsqt;route=RUN_CDR_PUBLISH\")\n    modparam(\"http_client\", \"keep_connections\", 1)\n    modparam(\"http_client\", \"httpcon\", \"nsqd=>http://localhost:4151/pub?topic=acc\")\n\n    route[RUN_CDR_PUBLISH] {\n       $var(count) = 0;\n       while (mq_fetch(\"cdr_events\")) {\n          $var(q_size) = mq_size(\"cdr_events\");\n          $var(count) = $var(count) + 1;\n          xinfo(\"[RUN_CDR_PUBLISH][$var(q_size)][$var(count)][$mqk(cdr_events)][$mqv(cdr_events)]\\n\");\n          $var(res) = http_connect_raw(\"nsqd\", \"\", \"application/json\", $mqv(cdr_events), \"$var(nsq_res)\");\n          if ($var(res) < 0) {\n             xerr(\"[RUN_CDR_PUBLISH][$var(res)] http_connect_raw: timeout or error !\\n\");\n             mq_add(\"cdr_events\", \"cdr_key\", \"$mqv(cdr_events)\");\n          } else if ($var(res) < 200 || $var(res) > 299) {\n             xerr(\"[RUN_CDR_PUBLISH][$var(res)] http unexpected response code !\\n\");\n             mq_add(\"cdr_dead_letter_queue\", \"cdr_key\", \"$mqv(cdr_events)\");\n             return;\n          }\n       }\n       if ($var(count) > 0 ) {\n          xinfo(\"[RUN_CDR_PUBLISH]done count[$var(count)]\\n\");\n       }\n    }\n    ...\n\n",
  "cdr_output_syslog": "### cdr_output_syslog (integer)\n\nThe acc module will log json cdr events to syslog.\n\n",
  "cdr_log_facility": "### cdr_log_facility (integer)\n\nLog facility to which accounting messages are issued to syslog. This\nallows to easily separate the accounting specific logging from the other\nlog messages.\n\nDefault value is LOG_DAEMON.\n\n    ...\n    modparam(\"acc_json\", \"cdr_log_facility\", \"LOG_LOCAL0\")\n\n    # modify you syslog/rsyslog config\n    # /etc/rsyslog.d/default.conf\n    # remove local0 from default log file\n    # *.*;local0,auth,authpriv.none /var/log/syslog\n    # add local0 to another log file\n    # local0.*                      /var/log/json_cdr.log\n    ...\n\n",
  "cdr_log_level": "### cdr_log_level (integer)\n\nLog level at which accounting messages are issued to syslog.\n\nDefault value is 1 (L_NOTICE).\n\n    ...\n    modparam(\"acc_json\", \"cdr_log_level\", 2) # Set cdr_log_level to 2 (L_INFO)\n    ...\n"
 },
 "posops": {
  "idx0": "### idx0 (int)\n\nThe value to return by functions seeking a position when the index is 0\n(note: returning 0 is stopping the execution of configuration file like\n'exit', but for KEMI usage it is ok).\n\n*Default value is -255.*\n\n    ...\n    modparam(\"posops\", \"idx0\", -200)\n    ...\n\n"
 },
 "uuid": {},
 "db2_ldap": {
  "config": "### config (string)\n\nDefault value is *ldap.cfg*.\n\nThe filename (relatively to ser config file) of mapping database to LDAP\ndefinition. It is the main configuration file for the LDAP module in\nSER. The configuration file maps database table names used in SER to\nLDAP directory sub-trees to be searched. In addition to that the\nconfiguration file also allows to configure the LDAP search filter and\nmaps database field names to LDAP attribute names and vice versa.\n\n        ...\n        modparam(\"ldap\", \"config\", \"my-ldap.cfg\");\n        ...\n                    \n\n    # Supported Attribute Type Names:\n    #  * GeneralizedTime\n    #  * Integer\n    #  * BitString\n    #  * Boolean\n    #  * String\n    #  * Binary\n    #  * Float\n    #\n\n    [connection:ldap_server1]\n    host=127.0.0.1\n    port=389\n    username=ser\n    password=heslo\n    # LDAP or LDAP SASL authentication mechanism.\n    # Allowed values: none (default), simple, digest-md5, external\n    authtype=simple\n\n    # tls encryption\n    tls=off\n\n    # Specifies the file that contains certificates for all of the Certificate\n    # Authorities the ldap module will recognize.\n    ca_list=/home/kg/work/openssl/demoCA/cacert.pem\n\n    # Specifies what checks to perform on server certificates in a TLS session\n    # allowed values are never/allow/try/demand\n    # see the TLS_REQCERT tls option part of ldap.conf(8) man page for more details\n    require_certificate=demand\n\n    #\n    # Table credentials contains SIP digest authentication credentials.\n    #\n    [table:credentials]\n\n    # In our LDAP directory we store SIP digest credentials under\n    # \"Digest Credentials\" organization unit so this is where searches for digest\n    # credentials should start.\n    base = \"ou=Digest Credentials,dc=iptel,dc=org\"\n\n    # We search the whole subtree.\n    scope = subtree\n\n    # For digest credentials we are only interested in objects with objectClass\n    # 'digestAuthCredentials', objects of all other types are ignored.\n    filter = \"(objectClass=digestAuthCredentials)\"\n\n    # Mapping of field names to LDAP attribute names and vice versa. Names are\n    # delimited using ':', the first name is database field name as used in SER\n    # modules, the second name (after :) is corresponding LDAP attribute name,\n    # optionally preceded with LDAP attribute syntax name in parentheses.\n    field_map = password : (Binary) digestPassword\n    field_map = realm : digestRealm\n    field_map = auth_username : digestUsername\n    field_map = uid : serUID\n    field_map = flags : (BitString) serFlags\n\n    # retrieve at most sizelimit entries for a search\n    #sizelimit = 2147483647\n\n    # wait at most timelimit seconds for a search to complete\n    #timelimit = 120\n\n    # chase references automatically by OpenLDAP. Default is \"never\"\n    # chase_references = never | searching | finding | always\n\n    # chase referrals automatically by OpenLDAP. Default is \"no\"\n    # chase_referrals = yes | no\n\n    #\n    # Domain table stores information about virtual domains\n    #\n    [table:domain]\n\n    # Objects mapping domain IDs to domain names and vice versa are stored\n    # in the subtree with the following root:\n    base = \"ou=Domains,dc=iptel,dc=org\"\n\n    scope = subtree\n\n    # We are only interested in serDomain objects when looking up information\n    # about virtual domains.\n    filter = \"(objectClass=serDomain)\"\n\n    field_map = did : (String) serDID\n    field_map = domain : (String) serDomain\n    field_map = flags : (BitString) serFlags\n\n    #\n    # Table domain_attrs contains domain attributes, domain attributes store\n    # extra information about virtual domains.\n    #\n    [table:domain_attrs]\n    base = \"ou=Domains, dc=iptel,dc=org\"\n    scope = subtree\n\n    filter = \"(objectClass=serDomainAttr)\"\n\n    field_map = did : serDID\n    field_map = name : serAttrName\n    field_map = type : (Integer) serAttrType\n    field_map = value : serAttrValue\n    field_map = flags : (BitString) serFlags\n                    \n\n",
  "reconnect_attempt": "### reconnect_attempt (integer)\n\nDefault value is *3*.\n\nNumber of reconnect attempts when connection to the LDAP server is lost.\n\n        ...\n        modparam(\"ldap\", \"reconnect_attempt\", \"5\");\n        ...\n                    \n\n"
 },
 "domain": {
  "db_url": "### db_url (string)\n\nThis is URL of the database to be used.\n\nDefault value is \u201cmysql://kamailioro:kamailioro@localhost/kamailio\u201d\n\n    modparam(\"domain\", \"db_url\", \"mysql://ser:pass@db_host/ser\")\n\n",
  "domain_table": "### domain_table (string)\n\nName of table containing names of local domains that the proxy is\nresponsible for.\n\nDefault value is \u201cdomain\u201d.\n\n    modparam(\"domain\", \"domain_table\", \"new_name\")\n\n",
  "domain_attrs_table": "### domain_attrs_table (string)\n\nName of table containing attributes of local domains.\n\nDefault value is \u201cdomain_attrs\u201d.\n\n    modparam(\"domain\", \"domain_attrs_table\", \"local_domain_attributes\")\n\n",
  "did_col": "### did_col (string)\n\nName of column containing domain id (did) of domain in domain and\ndomain_attrs tables. In domain table, a did column value may be NULL,\nwhich means that it has same value as domain column.\n\nDefault value is \u201cdid\u201d.\n\n    modparam(\"domain\", \"did_col\", \"domain_did\")\n\n",
  "domain_col": "### domain_col (string)\n\nName of column containing domain name in domain table.\n\nDefault value is \u201cdomain\u201d.\n\n    modparam(\"domain\", \"domain_col\", \"domain_name\")\n\n",
  "name_col": "### name_col (string)\n\nName of column containing attribute name in domain_attrs table.\n\nDefault value is \u201cname\u201d.\n\n    modparam(\"domain\", \"name_col\", \"attr_name\")\n\n",
  "type_col": "### type_col (string)\n\nName of column containing attribute type in domain_attrs table. Type\nvalue 0 is integer and type value 2 is string.\n\nDefault value is \u201ctype\u201d.\n\n    modparam(\"domain\", \"type_col\", \"attr_type\")\n\n",
  "value_col": "### value_col (string)\n\nName of column containing attribute value in domain_attrs table.\n\nDefault value is \u201cvalue\u201d.\n\n    modparam(\"domain\", \"value_col\", \"attr_value\")\n\n",
  "register_myself": "### register_myself (integer)\n\nRegister the list of domains to match 'myself' check: 0 means no myself\nregistration, 1 means enable myself registration.\n\nDefault value is 0 (disable).\n\n    modparam(\"domain\", \"register_myself\", 1)\n\n"
 },
 "kazoo": {
  "node_hostname": "#### node_hostname(str)\n\nThe name of this host to register in rabbitmq.\n\n*Default value is NULL. you must set this parameter value for the module\nto work*\n\n    ...\n    modparam(\"kazoo\", \"node_hostname\", \"sipproxy.mydomain.com\")\n    ...\n\n",
  "amqp_consumer_processes": "#### amqp_consumer_processes(int)\n\nThe number of worker processes to handle messages consumption.\n\n*Default value is 4.*\n\n    ...\n    modparam(\"kazoo\", \"amqp_consumer_processes\", 10)\n    ...\n\n",
  "amqp_consumer_event_key": "#### amqp_consumer_event_key(str)\n\nThe default name of the field in json payload to compose the event name\n1st part\n\n*Default value is \u201cEvent-Category\u201d.*\n\n    ...\n    modparam(\"kazoo\", \"amqp_consumer_event_key\", \"My-JSON-Field-Name\")\n    ...\n\n",
  "amqp_consumer_event_subkey": "#### amqp_consumer_event_subkey(str)\n\nThe default name of the field in json payload to compose the event name\n2nd part\n\n*Default value is \u201cEvent-Name\u201d.*\n\n    ...\n    modparam(\"kazoo\", \"amqp_consumer_event_subkey\", \"My-JSON-SubField-Name\")\n    ...\n\n",
  "amqp_max_channels": "#### amqp_max_channels(str)\n\nThe number of pre allocated channels for the connection.\n\n*Default value is 50.*\n\n    ...\n    modparam(\"kazoo\", \"amqp_max_channels\", 100)\n    ...\n\n",
  "amqp_connection": "#### amqp_connection(str)\n\nThe connection url to rabbitmq. can be set multiple times for failover.\n\n    ...\n    modparam(\"kazoo\", \"amqp_connection\", \"amqp://guest:guest@localhost:5672\")\n    modparam(\"kazoo\", \"amqp_connection\", \"kazoo://guest:guest@otherhost:5672\")\n    ...\n\n",
  "event_callback": "#### event_callback(str)\n\nThe name of the function in the kemi configuration file (embedded\nscripting language such as Lua, Python, ...) to be executed instead of\nevent_route\\[...\\] blocks.\n\nThe function receives a string parameter with the name of the event, the\nvalues can be: 'kazoo:mod-init', 'kazoo:consumer-event'.\n\n        ...\n        modparam(\"kazoo\", \"event_callback\", \"ksr_kazoo_event\")\n        ...\n        \n\n",
  "amqp_consumer_loop_count": "#### amqp_consumer_loop_count(int)\n\nThe consumer loop count.\n\n*Default value is 10.*\n\n    ...\n    modparam(\"kazoo\", \"amqp_consumer_loop_count\", 3)\n    ...\n\n",
  "amqp_internal_loop_count": "#### amqp_internal_loop_count(int)\n\nThe internal listen for commands loop count.\n\n*Default value is 5.*\n\n    ...\n    modparam(\"kazoo\", \"amqp_internal_loop_count\", 1)\n    ...\n\n",
  "amqp_consumer_ack_loop_count": "#### amqp_consumer_ack_loop_count(int)\n\nThe work ack loop count.\n\n*Default value is 20.*\n\n    ...\n    modparam(\"kazoo\", \"amqp_consumer_ack_loop_count\", 5)\n    ...\n\n",
  "consume_messages_on_reconnect": "#### consume_messages_on_reconnect(int)\n\nThis parameter indicates if the module ignores the loop counters on\nreconnect and consumes all the pending messages ready to be consumed.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"kazoo\", \"consume_messages_on_reconnect\", 0)\n    ...\n\n",
  "single_consumer_on_reconnect": "#### single_consumer_on_reconnect(int)\n\nWhen the main loop receives a message from rabbitmq it will defer the\nexecution to a worker in a round-robin manner. This parameter allows to\nuse the same worker when kazoo reconnects to rabbitmq.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"kazoo\", \"single_consumer_on_reconnect\", 0)\n    ...\n\n",
  "amqp_consumer_ack_timeout": "#### amqp_consumer_ack_timeout(str)\n\nTimeout when checking for acknowledge from workers.\n\n*Default value is 100000 micro.*\n\n    ...\n    modparam(\"kazoo\", \"amqp_consumer_ack_timeout_sec\", 1)\n    modparam(\"kazoo\", \"amqp_consumer_ack_timeout_micro\", 200000)\n    ...\n\n",
  "amqp_interprocess_timeout": "#### amqp_interprocess_timeout(str)\n\nTimeout when checking for commands (publish/query) for sending to\nrabbitmq.\n\n*Default value is 100000 micro.*\n\n    ...\n    modparam(\"kazoo\", \"amqp_interprocess_timeout_sec\", 1)\n    modparam(\"kazoo\", \"amqp_interprocess_timeout_micro\", 200000)\n    ...\n\n",
  "amqp_waitframe_timeout": "#### amqp_waitframe_timeout(str)\n\nTimeout when checking for messages from rabbitmq.\n\n*Default value is 100000 micro.*\n\n    ...\n    modparam(\"kazoo\", \"amqp_waitframe_timeout_sec\", 1)\n    modparam(\"kazoo\", \"amqp_waitframe_timeout_micro\", 200000)\n    ...\n\n",
  "amqp_query_timeout": "#### amqp_query_timeout(str)\n\nTimeout when checking for reply messages from rabbitmq for kazoo_query\ncommands.\n\n*Default value is 2 sec.*\n\n    ...\n    modparam(\"kazoo\", \"amqp_query_timeout_sec\", 1)\n    modparam(\"kazoo\", \"amqp_query_timeout_micro\", 200000)\n    ...\n\n",
  "amqp_query_timeout_avp": "#### amqp_query_timeout_avp(str)\n\navp holding the value in seconds for Timeout when checking for reply\nmessages from rabbitmq for kazoo_query commands.\n\n*Default value is NULL (no value).*\n\n    ...\n    modparam(\"kazoo\", \"amqp_query_timeout_avp\", \"$var(kz_timeout)\")\n\n    route[SOME_ROUTE]\n    {\n        $var(kz_timeout) = 12;\n        kazoo_query(exchange, routingkey, payload);\n    }\n\n    ...\n\n",
  "db_url": "#### db_url(str)\n\nThe database for the presentity table.\n\nIf set, the kazoo_ppua_publish function will update the presentity\nstatus in the database.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"kazoo\", \"db_url\", \"mysql://kamailio:kamailiorw@localhost/kamailio\")\n    ...\n\n",
  "presentity_table": "#### presentity_table(str)\n\nThe name of the presentity table in the database.\n\n*Default value is \u201cpresentity\u201d.*\n\n    ...\n    modparam(\"kazoo\", \"presentity_table\", \"my_presentity_table\")\n    ...\n\n",
  "pua_mode": "#### pua_mode(int)\n\nControl if the module has to connect to presence database tables. Set it\nto 0 to not connect to database.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"kazoo\", \"pua_mode\", 0)\n    ...\n\n"
 },
 "cplc": {
  "db_url": "### db_url (string)\n\nA SQL URL have to be given to the module for knowing where the database\ncontaining the table with CPL scripts is locates. If required a user\nname and password can be specified for allowing the module to connect to\nthe database server.\n\n*Default value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"cplc\",\"db_url\",\"dbdriver://username:password@dbhost/dbname\")\n    ...\n\n",
  "db_table": "### db_table (string)\n\nIndicates the name of the table that store the CPL scripts. This table\nmust be locate into the database specified by \u201cdb_url\u201d parameter. For\nmore about the format of the CPL table please see the\nmodules/cplc/init.mysql file.\n\n*Default value is \u201ccpl\u201d.*\n\n    ...\n    modparam(\"cplc\",\"cpl_table\",\"cpl\")\n    ...\n\n",
  "username_column": "### username_column (string)\n\nIndicates the name of the column used for storing the username.\n\n*Default value is \u201cusername\u201d.*\n\n    ...\n    modparam(\"cplc\",\"username_column\",\"username\")\n    ...\n\n",
  "domain_column": "### domain_column (string)\n\nIndicates the name of the column used for storing the domain.\n\n*Default value is \u201cdomain\u201d.*\n\n    ...\n    modparam(\"cplc\",\"domain_column\",\"domain\")\n    ...\n\n",
  "cpl_xml_column": "### cpl_xml_column (string)\n\nIndicates the name of the column used for storing the XML version of the\ncpl script.\n\n*Default value is \u201ccpl_xml\u201d.*\n\n    ...\n    modparam(\"cplc\",\"cpl_xml_column\",\"cpl_xml\")\n    ...\n\n",
  "cpl_bin_column": "### cpl_bin_column (string)\n\nIndicates the name of the column used for storing the binary version of\nthe cpl script (compiled version).\n\n*Default value is \u201ccpl_bin\u201d.*\n\n    ...\n    modparam(\"cplc\",\"cpl_bin_column\",\"cpl_bin\")\n    ...\n\n",
  "cpl_dtd_file": "### cpl_dtd_file (string)\n\nPoints to the DTD file describing the CPL grammar. The file name may\ninclude also the path to the file. This path can be absolute or relative\n(be careful the path will be relative to the starting directory of\nKamailio).\n\n*This parameter is MANDATORY!*\n\n    ...\n    modparam(\"cplc\",\"cpl_dtd_file\",\"/etc/kamailio/cpl-06.dtd\")\n    ...\n\n",
  "log_dir": "### log_dir (string)\n\nPoints to a directory where should be created all the log file generated\nby the LOG CPL node. A log file per user will be created (on demand)\nhaving the name username.log.\n\n*If this parameter is absent, the logging will be disabled without\ngenerating error on execution.*\n\n    ...\n    modparam(\"cplc\",\"log_dir\",\"/var/log/kamailio/cpl\")\n    ...\n\n",
  "proxy_recurse": "### proxy_recurse (int)\n\nTells for how many time is allow to have recurse for PROXY CPL node If\nit has value 2, when doing proxy, only twice the proxy action will be\nre-triggered by a redirect response; the third time, the proxy execution\nwill end by going on REDIRECTION branch. The recurse feature can be\ndisable by setting this parameter to 0\n\n*Default value of this parameter is 0.*\n\n    ...\n    modparam(\"cplc\",\"proxy_recurse\",2)\n    ...\n\n",
  "proxy_route": "### proxy_route (string)\n\nBefore doing proxy (forward), a script route can be executed. This\nparameter indicates the name of the route called. All modifications made\nby that route will be reflected only for the current branch.\n\n*Default value of this parameter is NULL (none).*\n\n    ...\n    modparam(\"cplc\",\"proxy_route\",\"CPL_PROXY\")\n    ...\n\n",
  "case_sensitive": "### case_sensitive (int)\n\nTells if the username matching should be perform case sensitive or not.\nSet it to a non zero value to force a case sensitive handling of\nusernames.\n\n*Default value of this parameter is 0.*\n\n    ...\n    modparam(\"cplc\",\"case_sensitive\",1)\n    ...\n\n",
  "realm_prefix": "### realm_prefix (string)\n\nDefines a prefix for the domain part which should be ignored in handling\nusers and scripts.\n\n*Default value of this parameter is empty string.*\n\n    ...\n    modparam(\"cplc\",\"realm_prefix\",\"sip.\")\n    ...\n\n",
  "timer_avp": "### timer_avp (string)\n\nFull specification (ID, NAME, ALIAS) of the AVP to be used to set the\nvalue of the Final Response INVITE timeout - it's used by the TIMEOUT\nattribute from the PROXY tag.\n\nNOTE: take care and synchronize this value with the similar parameters\nin TM module.\n\n*Default value of this parameter is NULL.*\n\n    ...\n    modparam(\"cplc\",\"timer_avp\",\"$avp(i:14)\")\n    ...\n\n",
  "lookup_domain": "### lookup_domain (string)\n\nUsed by lookup tag to indicate where to perform user location. Basically\nthis is the name of the usrloc domain (table) where the user\nregistrations are kept.\n\nIf set to empty string, the lookup node will be disabled - no user\nlocation will be performed.\n\n*Default value of this parameter is NULL.*\n\n    ...\n    modparam(\"cplc\",\"lookup_domain\",\"location\")\n    ...\n\n",
  "lookup_append_branches": "### lookup_append_branches (int)\n\nTells if the lookup tag should append branches (to do parallel forking)\nif user_location lookup returns more than one contact. Set it to a non\nzero value to enable parallel forking for location lookup tag.\n\n*Default value of this parameter is 0.*\n\n    ...\n    modparam(\"cplc\",\"lookup_append_branches\",1)\n    ...\n\n",
  "use_domain": "### use_domain (integer)\n\nIndicates if the domain part of the URI should be used in user\nidentification (otherwise only username part will be used).\n\n*Default value is \u201c0 (disabled)\u201d.*\n\n    ...\n    modparam(\"cplc\",\"use_domain\",1)\n    ...\n\n",
  "redirect_route": "### redirect_route (string)\n\nBefore doing redirect (deflection), a script route can be executed. This\nparameter indicates the name of the route called. All modifications made\nby that route will be reflected only for the current branch.\n\n*Default value of this parameter is NULL (none).*\n\n    ...\n    modparam(\"cplc\",\"redirect_route\", \"CPL_REDIRECT\")\n    ...\n                    \n\n",
  "ignore3xx": "### ignore3xx (integer)\n\nIndicates if 3xx SIP response must be ignored.\n\n*Default value is \u201c0 (disabled)\u201d.*\n\n    ...\n    modparam(\"cplc\",\"ignore3xx\",1)\n    ...\n                    \n\n"
 },
 "siputils": {
  "options_accept": "### options_accept (string)\n\nThis parameter is the content of the Accept header field. Note: it is\nnot clearly written in RFC3261 if a proxy should accept any content (the\ndefault \u201c\\*/\\*\u201d) because it does not care about content. Or if it does\nnot accept any content, which is \u201c\u201d.\n\n*Default value is \u201c\\*/\\*\u201d.*\n\n    ...\n    modparam(\"siputils\", \"options_accept\", \"application/*\")\n    ...\n\n",
  "options_accept_encoding": "### options_accept_encoding (string)\n\nThis parameter is the content of the Accept-Encoding header field.\nPlease do not change the default value because Kamailio does not support\nany encodings yet.\n\n*Default value is \u201c\u201d.*\n\n    ...\n    modparam(\"siputils\", \"options_accept_encoding\", \"gzip\")\n    ...\n\n",
  "contact_flds_separator": "### contact_flds_separator (string)\n\nFirst char of this parameter is used as separator for encoding/decoding\nContact header.\n\n<div class=\"warning\">\n\nFirst char of this field must be set to a value which is not used inside\nusername, password or other fields of contact. Otherwise it is possible\nfor the decoding step to fail/produce wrong results.\n\n</div>\n\n*Default value is \u201c\\*\u201d.*\n\n    ...\n    modparam(\"siputils\", \"contact_flds_separator\", \"-\")\n    ...\n\nthen an encoded uri might look\nsip:user-password-ip-port-protocol@PublicIP\n\n",
  "options_accept_language": "### options_accept_language (string)\n\nThis parameter is the content of the Accept-Language header field. You\ncan set any language code which you prefer for error descriptions from\nother devices, but presumably there are not many devices around which\nsupport other languages than the default English.\n\n*Default value is \u201cen\u201d.*\n\n    ...\n    modparam(\"siputils\", \"options_accept_language\", \"de\")\n    ...\n\n",
  "options_support": "### options_support (string)\n\nThis parameter is the content of the Support header field, indicating\nSIP extensions. Please do not change the default value, because Kamailio\ncurrently does not support any of the SIP extensions registered at the\nIANA.\n\n*Default value is \u201c\u201d.*\n\n    ...\n    modparam(\"siputils\", \"options_support\", \"100rel\")\n    ...\n\n",
  "rpid_prefix": "### rpid_prefix (string)\n\nPrefix to be added to Remote-Party-ID header field just before the URI\nreturned from either radius or database.\n\nDefault value is \u201c\u201d.\n\n    modparam(\"siputils\", \"rpid_prefix\", \"Whatever <\")\n\n",
  "rpid_suffix": "### rpid_suffix (string)\n\nSuffix to be added to Remote-Party-ID header field after the URI\nreturned from either radius or database.\n\nDefault value is \u201c;party=calling;id-type=subscriber;screen=yes\u201d.\n\n    modparam(\"siputils\", \"rpid_suffix\", \"@1.2.3.4>\")\n\n",
  "rpid_avp": "### rpid_avp (string)\n\nFull AVP specification for the AVP which stores the RPID value. It used\nto transport the RPID value from authentication backend modules (auth_db\nor auth_radius) or from script to the auth function append_rpid_hf and\nis_rpid_user_e164.\n\nIf defined to NULL string, all RPID functions will fail at runtime.\n\nDefault value is \u201c\\$avp(s:rpid)\u201d.\n\n    modparam(\"siputils\", \"rpid_avp\", \"$avp(myrpid)\")\n            \n\n",
  "e164_max_len": "### e164_max_len (int)\n\nThe maximum length for checking e164 numbers, including the leading '+'.\n\nDefault value is \u201c16\u201d.\n\n    modparam(\"siputils\", \"e164_max_len\", 20)\n\n"
 },
 "p_usrloc": {
  "write_db_url": "### write_db_url (string)\n\nThe url to the master database where errors are written to.\n\nDefault value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d\n\n    ...\n    modparam(\"p_usrloc\", \"write_db_url\", \"mysql://username:password@localhost/databasename\")\n    ...\n\n",
  "read_db_url": "### read_db_url (string)\n\nThe url to the master database where the distribution data is read from.\nIt is separated from write access, so for better performance, a local\nreplicate can be used for read access.\n\n*Default value is mysql://kamailio:kamailiorw@localhost/kamailio .*\n\n    ...\n    modparam(\"p_usrloc\", \"read_db_url\", \"mysql://user:passwd@localhost/db\")\n    ...\n\n",
  "reg_db_table": "### reg_db_table (string)\n\nSpecifies the table where the information about the distributed\ndatabases is stored.\n\n*Default value is \u201clocdb\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"reg_db_table\", \"locdb\")\n    ...\n\n",
  "id_column": "### id_column (string)\n\nSpecifies the column where the id of a distributed database is stored.\n\n*Default value is \u201cid\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"id_column\", \"id\")\n    ...\n\n",
  "num_column": "### num_column (string)\n\nSpecifies the column where the associated number of the distributed\ndatabase is stored. For each distributed database ID there must be at\nleast two databases available, the databases above the second are\nignored.\n\n*Default value is \u201cno\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"num_column\", \"nr\")\n    ...\n\n",
  "url_column": "### url_column (string)\n\nSpecifies the column where the url of the distributed database is\nstored.\n\n*Default value is \u201curl\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"url_column\", \"url\")\n    ...\n\n",
  "status_column": "### status_column (string)\n\nSpecifies the column where the status of the distributed database is\nstored.\n\n*Default value is \u201cstatus\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"status_column\", \"status\")\n    ...\n\n",
  "failover_time_column": "### failover_time_column (string)\n\nSpecifies the column where the failover time of the location databases\nis stored. This field is set to the current time when a databases is\nturned off or turned on.\n\n*Default value is \u201cfailover\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"failover_time_column\", \"fail\")\n    ...\n\n",
  "spare_flag_column": "### spare_flag_column (string)\n\nSpecifies the column where the spare flag of the location databases is\nstored. It is possible to declare an entry in the p_usrloc table as\nspare which is used in a failover. Due to the fact that the data is\nstored in two databases and it takes the spare the complete expire time\nto be up to date, it is not very useful.\n\n*Default value is \u201cspare\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"spare_flag_column\", \"spare\")\n    ...\n\n",
  "error_column": "### error_column (string)\n\nSpecifies the column where the errors of the distributed databases are\nstored. Each call to db_handle_error increases the error counter. After\nexceeding the error threshold, the database's status is set to off.\n\n*Default value is \u201cerrors\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"error_column\", \"error\")\n    ...\n\n",
  "risk_group_column": "### risk_group_column (string)\n\nSpecifies the column where the risk group of the distributed databases\nis stored. All databases on one host are in the same risk group. This is\nonly useful when using spares and prevents the module from taking a\nspare which shares the same risk as the broken database.\n\n*Default value is \u201crg\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"risk_group_column\", \"rg\")\n    ...\n\n",
  "expire_time": "### expire_time (int)\n\nSpecifies the time (in seconds) when a contact expires, used for\nresetting the failover time of a reactivated database. It should be\nequal or greater than the contact expiration time of the registrar\nmodule.\n\n*Default value is \u201c3600\u201d.*\n\nCan be set at runtime, e.g.:\n\n                $ kamcmd cfg.set_now_int p_usrloc expire_time 7200\n                \n\n    ...\n    modparam(\"p_usrloc\", \"expire_time\", \"3600\")\n    ...\n\n",
  "db_err_threshold": "### db_err_threshold (int)\n\nSpecifies the error value on which a database shall be turned of.\n\n*Default value is \u201c50\u201d.*\n\nCan be set at runtime, e.g.:\n\n                $ kamcmd cfg.set_now_int p_usrloc db_err_threshold 20\n                \n\n    ...\n    modparam(\"p_usrloc\", \"db_err_threshold\", \"50\")\n    ...\n\n",
  "failover_level": "### failover_level (int)\n\nSpecifies the manner a failover is done. Following modes are supported:\n\n- *1* - Just turn off the broken database\n\n- *2* - Try to find a spare, if none found, just turn off the broken\n  database\n\n*Default value is \u201c1\u201d.*\n\nCan be set at runtime, e.g.:\n\n                $ kamcmd cfg.set_now_int p_usrloc failover_level 2\n                \n\n    ...\n    modparam(\"p_usrloc\", \"failover_level\", \"1\")\n    ...\n\n",
  "db_retry_interval": "### db_retry_interval (int)\n\nSpecifies the interval (in seconds) in which a timer process shall check\nthe availability of the databases and try to reconnect to broken ones.\nIt doesn't make sense to choose a lower value as 10. It's necessary to\nprovide a writeable master database, otherwise this check stays\ndisabled.\n\n*Default value is \u201c10\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"db_retry_interval\", \"10\")\n    ...\n\n",
  "db_use_transactions": "### db_use_transactions (int)\n\nSpecifies if transactions should be used (set to 1) to reach a higher\ndata consistency. Keep in mind that this will probably decrease\nperformance.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"db_use_transactions\", \"0\")\n    ...\n\n",
  "db_transaction_level": "### db_transaction_level (string)\n\nSpecifies the isolation level on which transactions are performed.\nPossible values: Modes supported by the database backend. In order to\nactivate transaction the db_use_transactions parameter must be also set.\n\n*Default value is \u201cREAD UNCOMMITTED\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"db_transaction_level\", \"READ UNCOMMITTED\")\n    ...\n\n",
  "write_on_master_db": "### write_on_master_db (int)\n\nSets the write access to the master database. If set to 0, no write\noperations are permitted on the master database.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"write_on_master_db\", \"0\")\n    ...\n\n",
  "mdb_availability_control": "### mdb_availability_control(str)\n\nChecks the master database in certain time intervals specified by the\n\u201cretry_interval\u201d parameter. Overwrites the \u201cwrite_on_master_db\u201d\nparameter based on the reachability of master database. If the master db\nis unavailable then the aforementioned parameter will be deactivated.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"mdb_availability_control\", 1)\n    ...\n\n",
  "write_on_db": "### write_on_db (int)\n\nSets the write access to the distributed databases. If set to 0, no\nwrite operations are permitted on the databases.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"write_on_db\", \"0\")\n    ...\n\n",
  "connection_expires": "### connection_expires (int)\n\nSpecifies the period (in seconds) after a database connection expires.\nUsage of a too small value will probably decrease the performance.\n\n*Default value is \u201c300\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"connection_expires\", \"300\")\n    ...\n\n",
  "alg_location": "### alg_location (int)\n\nSpecify the way the distribution of the subscriptions are computed. At\nthe moment the only way is to use the CRC32 algorithm to compute the\nlocation ID. Any integer value is fine.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"alg_location\", 1)\n    ...\n\n",
  "domain_db": "### domain_db(str)\n\nSpecify the way the lookup is made. In can be either partitioned or\nsingle. For example, if you have a location table that is large and\nneeds to be partitioned, and a smaller table cfa that is ok to be on\nonly the master db(so there is no need to have it distributed), you can\nset this parameter to \u201clocation=cluster,cfa=single\u201d. This means that a\ncall to\n\n    lookup(location)\n\nwill be done via the partition databases configured via the reg_db_table\nparameter, but a call to\n\n    lookup(cfa)\n\nwill be done on only the master database (as with usrloc module)\n\n*Default value is \u201clocation=cluster,cfa=single\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"domain_db\", \"location=cluster,cfa=single\")\n    ...\n\n",
  "default_db_type": "### default_db_type(str)\n\nIn case a domain (like location,cfa) is not matched by a domain_db\ndefinition, the type is configured by using this parameter. Accepted\nvalues are single and cluster.\n\n*Default value is \u201csingle\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"default_db_type\", \"cluster\")\n    ...\n\n",
  "db_ops_ruid": "### db_ops_ruid (int)\n\nDefines how database queries are done:\n\n- *0* uses the old style using aor, contact and call-id\n\n- *1* uses ruid value\n\n- *2* uses the new style using aor, contact and call-id\n\n*Default value is 0*\n\nCan be set at runtime, e.g.:\n\n            $ kamcmd cfg.set_now_int p_usrloc db_ops_ruid 1\n            \n\n    ...\n    modparam(\"p_usrloc\", \"db_ops_ruid\", 2)\n    ...\n        \n\n",
  "db_update_as_insert": "### db_update_as_insert (string)\n\nSet this parameter if you want to do INSERT DB operations instead of\nUPDATE DB operations. It is recommended to set this parameter if you use\nCassandra as a DB backend.\n\n*Default value is \u201c1\u201d.*\n\nCan be set at runtime, e.g.:\n\n            $ kamcmd cfg.set_now_int p_usrloc db_update_as_insert 1\n            \n\n    ...\n    modparam(\"usrloc\", \"db_update_as_insert\", 1)\n    ...\n\n",
  "default_db_url": "### default_db_url(str)\n\nThe URL of the default database for Location domains (for domains that\nare single). This must be configured if they are use.\n\n*Default value is \u201cDEFAULT_DB_URL\u201d.*\n\n    ...\n    modparam(\"p_usrloc\", \"default_db_url\", \"mysql://ser:ser@localhost/ser\")\n    ...\n\n",
  "matching_mode": "### matching_mode(int)\n\n*Defines the matching algorithm. Possible values are: 0 (CONTACT_ONLY) 1\n(CONTACT_CALLID) 2 (CONTACT_PATH)*\n\n*Default value is \u201c0\u201d (CONTACT_ONLY).*\n\n    ...\n    modparam(\"p_usrloc\", \"matching_mode\", 1)\n    modparam(\"p_usrloc\", \"matching_mode\", 2)\n    ...\n\n    kamcmd cfg.set_now_int p_usrloc matching_mode 2\n    kamcmd cfg.get p_usrloc matching_mode\n                \n\n"
 },
 "db_oracle": {
  "timeout": "### timeout (fixedpoint)\n\nTimeout value for any operation with BD.\n\nPossible values is from 0.1 to 10.0 seconds.\n\n*Default value is 3.0 (3 second).*\n\nIf the value of timeout parameter is set to 0, the module uses\nsynchronous mode (without timeout).\n\n    ...\n    modparam(\"db_oracle\", \"timeout\", 1.5)\n    ...\n\n    ...\n    modparam(\"db_oracle\", \"timeout\", 0)\n    ...\n\n",
  "reconnect": "### reconnect (fixedpoint)\n\nTimeout value for connect (create session) operation.\n\nPossible values is from 0.1 to 10.0 seconds.\n\n*Default value is 0.2 (200 milliseconds).*\n\n    ...\n    modparam(\"db_oracle\", \"reconnect\", 0.5)\n    ...\n\n"
 },
 "matrix": {
  "db_url": "### db_url (string)\n\nThe URL for the database connection.\n\n*Default value is \u201cmysql://kamailioro:kamailioro@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"matrix\", \"db_url\", \"mysql://kamailioro:kamailioro@localhost/kamailio\")\n    ...\n              \n\n",
  "matrix_table": "### matrix_table (string)\n\nThe name of the table containing the matrix data.\n\n*Default value is \u201cmatrix\u201d.*\n\n    ...\n    modparam(\"matrix\", \"matrix_table\", \"matrix\")\n    ...\n              \n\n",
  "matrix_first_col": "### matrix_first_col (string)\n\nThe name of the column containing the first row in the matrix.\n\n*Default value is \u201cfirst\u201d.*\n\n    ...\n    modparam(\"matrix\", \"matrix_first_col\", \"first\")\n    ...\n              \n\n",
  "matrix_second_col": "### matrix_second_col (string)\n\nThe name of the column containing the second row in the matrix.\n\n*Default value is \u201csecond\u201d.*\n\n    ...\n    modparam(\"matrix\", \"matrix_second_col\", \"second\")\n    ...\n              \n\n",
  "matrix_res_col": "### matrix_res_col (string)\n\nThe name of the column containing the result ID to be used.\n\n*Default value is \u201cres\u201d.*\n\n    ...\n    modparam(\"matrix\", \"matrix_res_col\", \"res\")\n    ...\n              \n\n"
 },
 "xcap_server": {
  "db_url": "### db_url (string)\n\nDatabase URL.\n\n*Default value is \u201cmysql://kamailio:kamailiorw@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"xcap_server\", \"db_url\", \"mysql://user:passwd@host.com/dbname\")\n    ...\n\n",
  "xcap_table": "### xcap_table (string)\n\nThe name of table where to store the xcap documents.\n\n*Default value is \u201cxcap\u201d.*\n\n    ...\n    modparam(\"xcap_server\", \"xcap_table\", \"xcapdocs\")\n    ...\n\n",
  "xcap_root": "### xcap_root (str)\n\nXCAP root URL.\n\n*Default value is '/xcap-root/'.*\n\n    ...\n    modparam(\"xcap_server\", \"xcap_root\", \"/xcap-root/\")\n    ...\n\n",
  "buf_size": "### buf_size (int)\n\nSize of local buffer for handling XCAP documents.\n\n*Default value is \u201c1024\u201d.*\n\n    ...\n    modparam(\"xcap_server\", \"buf_size\", 2048)\n    ...\n\n",
  "xml_ns": "### xml_ns (str)\n\nRegister extra XML namespaces to be used with XPath. You can set the\nparameter many times to add more namespaces. The format is\n'prefix=href'.\n\n*Default value is 'null'.*\n\n    ...\n    modparam(\"xcap_server\", \"xml_ns\",\n        \"rl=urn:ietf:params:xml:ns:resource-lists\")\n    modparam(\"xcap_server\", \"xml_ns\",\n        \"my=urn:my:prefix\")\n    ...\n\n",
  "directory_scheme": "### directory_scheme (int)\n\nAllows the scheme used in org.openmobilealliance.xcap-directory listings\nto be set to a specific value.\n\nThe URLs in an org.oma.xcap-directory listing must be be paths a client\ncan use to download the listed XCAP documents. In some cases (for\nexample, when the XCAP server is accessed using HTTP from an HTTP proxy\nthe client connected to using HTTPS) the XCAP server may not be able to\nautomatically determine the correct scheme to use based on the HTTP\nconnection.\n\n- *-1 (default)* - determine scheme automatically. HTTP for TCP\n  connections and HTTPS for TLS connections.\n\n- *0* - use the HTTP scheme.\n\n- *1* - use the HTTPS scheme.\n\n<!-- -->\n\n    ...\n    modparam(\"xcap_server\", \"directory_scheme\", 0)\n    ...\n\n",
  "directory_hostname": "### directory_hostname (string)\n\nAllows the hostname (and port) used in\norg.openmobilealliance.xcap-directory listings to be set to a specific\nvalue.\n\nThe URLs in an org.oma.xcap-directory listing must be be paths a client\ncan use to download the listed XCAP documents. In some cases (for\nexample, when the XCAP server is accessed through a proxy that re-writes\nheaders, or a client is non-conforming and does not include a Host:\nheader) the XCAP server may not be able to automatically determine the\ncorrect hostname to use.\n\nWhen this parameter is not set the XCAP server will attempt to use the\ncontents of the (mandatory) Host: header. If the Host: header is not\npresent the XCAP server will use the IP address and port the XCAP\nrequest was received on.\n\n    ...\n    modparam(\"xcap_server\", \"directory_hostname\", \"xcap.example.com\")\n    ...\n\n"
 },
 "auth_xkeys": {
  "xkey": "### xkey (str)\n\nSpecify the attributes for a shared secret. The value is in the format\n'name1=value1;name2=value2;...'. The attributes can be:\n\n- *id* - the id of the group for keys\n\n- *name* - the name of the key within group\n\n- *value* - the value of the key\n\n- *expires* - expiration time (seconds)\n\n*Default value is empty.*\n\n    ...\n    modparam(\"auth_xkeys\", \"xkey\", \"id=abc;name=xyz;value=secret;expires=72000\")\n    ...\n\n"
 },
 "ims_diameter_server": {},
 "pdb": {
  "timeout": "### timeout (integer)\n\nThis is the timeout in milliseconds for the pdb_query function.\n\n*Default value is \u201c50\u201d.*\n\n    ...\n    modparam(\"pdb\", \"timeout\", 10)\n    ...\n                \n\n",
  "server": "### server (string)\n\nThis is the list of servers to be used by the pdb_query function.\nQueries will be sent in parallel to all servers configured in this list.\nThis parameter is mandatory.\n\n    ...\n    modparam(\"pdb\", \"server\", \"localhost:10001,host.name:10001,192.168.1.7:10002\")\n    ...\n                \n\n"
 },
 "presence_reginfo": {
  "default_expires": "### default_expires (int)\n\nThe default expires value used when missing from SUBSCRIBE message (in\nseconds).\n\n*Default value is \u201c3600\u201d.*\n\n            ...\n            modparam(\"presence_reginfo\", \"default_expires\", 3600)\n            ...\n            \n\n",
  "aggregate_presentities": "### aggregate_presentities (int)\n\nWhether to aggregate in a single notify body all registration\npresentities. Useful to have all registrations on first NOTIFY following\ninitial SUBSCRIBE.\n\n*Default value is \u201c0\u201d (disabled).*\n\n                        ...\n                        modparam(\"presence_reginfo\", \"aggregate_presentities\", 1)\n                        ...\n                        \n\n"
 },
 "app_sqlang": {
  "load": "### load (str)\n\nSet the path to the SQLang file to be loaded at startup. Then you can\nuse sqlang_run(function, params) to execute a function from the script\nat runtime. If you use it for KEMI configuration, then it has to include\nthe required functions.\n\n*Default value is \u201cnull\u201d.*\n\n    ...\n    modparam(\"app_sqlang\", \"load\", \"/usr/local/etc/kamailio/sqlang/myscript.sq\")\n    ...\n\n"
 },
 "stirshaken": {
  "as_default_key": "### as_default_key (str)\n\nSSL private key to be used as default. Default key must be set if calls\nto stirshaken_add_identity() are executed. When set, module starts\nAuthentication Service which makes each call to\nstirshaken_add_identity() using this key. Default key doesn't need to be\nset (Authentication Service doesn't need to be running) for the\nstirshaken_add_identity_with_key(..., key) to be available. This param\nhas no meaning for calls to stirshaken_add_identity_with_key(..., key).\n\n*Default value is \"\" (not set).*\n\n    ...\n    modparam(\"stirshaken\", \"as_default_key\", \"/path/to/key\")\n    ...\n\n",
  "vs_verify_x509_cert_path": "### vs_verify_x509_cert_path (int)\n\nIf set, then stirshaken_check_identity() will execute X509 certificate\npath check on certificate referenced in PASSporT. This param has no\nmeaning for calls to stirshaken_check_identity_with_key(key) and\nstirshaken_check_identity_with_cert(cert).\n\n*Default value is 1, (turned on).*\n\n    ...\n    modparam(\"stirshaken\", \"vs_verify_x509_cert_path\", 1)\n    ...\n\n",
  "vs_ca_dir": "### vs_ca_dir (str)\n\nThe path to folder containing CA root certificates with names hashed. If\nset then must point to existing directory. This must be set when enabled\nX509 certificate path check, otherwise no end entity certificate will\npass that check. This param has no meaning for calls to\nstirshaken_check_identity_with_key(key) and\nstirshaken_check_identity_with_cert(cert).\n\n*Default value is \"\" (not set).*\n\n    ...\n    modparam(\"stirshaken\", \"vs_ca_dir\", \"/path/to/ca_dir\")\n    ...\n\n",
  "vs_crl_dir": "### vs_crl_dir (str)\n\nThe path to folder containing CRLs. If set, then must point to existing\ndirectory. This is optional when X509 certificate path check is enabled,\nonly vs_ca_dir is mandatory. If X509 certificate path check is enabled,\nand vs_crl_dir is set, then CRLs are loaded from this directory, which\nrenders revoked certificates invalid (not trusted). This param has no\nmeaning for calls to stirshaken_check_identity_with_key(key) and\nstirshaken_check_identity_with_cert(cert).\n\n*Default value is \"\" (not set).*\n\n    ...\n    modparam(\"stirshaken\", \"vs_crl_dir\", \"/path/to/crl_dir\")\n    ...\n\n",
  "vs_identity_expire_s": "### vs_identity_expire_s (int)\n\nThis parameter defines a maximum time in seconds for which PASSporT is\nconsidered valid.\n\n*Default value is 60 seconds.*\n\n    ...\n    modparam(\"stirshaken\", \"vs_identity_expire_s\", 20)\n    ...\n\n",
  "vs_connect_timeout_s": "### vs_connect_timeout_s (int)\n\nDuring a call verification with stirshaken_check_identity() a blocking\nHTTP(s) call is executed to download certificate referenced in PASSporT\n(unless certificate caching is turned on and a valid cert is found in\ncache). This parameter defines a maximum time in seconds for this\nblocking HTTP(s) connection to be established. After this time had\npassed and connection did not succeed (could not resolve host, address\nunreachable or other network errors) a call to\nstirshaken_check_identity() will return with error. This param has no\nmeaning for calls to stirshaken_check_identity_with_key(key) and\nstirshaken_check_identity_with_cert(cert).\n\n*Default value is 5 seconds.*\n\n    ...\n    modparam(\"stirshaken\", \"vs_connect_timeout_s\", 10)\n    ...\n\n",
  "vs_cache_certificates": "### vs_cache_certificates (int)\n\nIf set, then certificates caching is turned on. This means that\ncertificates downloaded during call verification with\nstirshaken_check_identity() are cached inside vs_cache_dir, and will be\nloaded from that cache as long as they are not there for more than\nvs_cache_expire_s seconds (see vs_cache_expire_s). If\nvs_cache_certificates is set then vs_cache_dir must be set too and\npointing to existing directory. This param has no meaning for calls to\nstirshaken_check_identity_with_key(key) and\nstirshaken_check_identity_with_cert(cert).\n\n*Default value is 0 (turned off).*\n\n    ...\n    modparam(\"stirshaken\", \"vs_cache_certificates\", 1)\n    ...\n\n",
  "vs_cache_dir": "### vs_cache_dir (str)\n\nIf vs_cache_certificates is set then vs_cache_dir must be set too and\npointing to existing directory. Cached certificates are saved in this\ndirectory and loaded from there when needed during a call verification\nexecuted with stirshaken_check_identity(), as long as they are not there\nfor more than vs_cache_expire_s seconds. This param has no meaning for\ncalls to stirshaken_check_identity_with_key(key) and\nstirshaken_check_identity_with_cert(cert).\n\n*Default value is \"\" (not set).*\n\n    ...\n    modparam(\"stirshaken\", \"vs_cache_dir\", \"/tmp/cert_cache\")\n    ...\n\n",
  "vs_cache_expire_s": "### vs_cache_expire_s (int)\n\nIf vs_cache_certificates is set then cached certificates are saved in\nvs_cache_dir directory and loaded from there when needed during a call\nverification executed with stirshaken_check_identity(), as long as they\nare not there for more than vs_cache_expire_s seconds. If they are in\ncache for more than vs_cache_expire_s seconds, then a blocking HTTP(s)\ncall is executed to download a new version of (expired) certificate. If\nthis is successful then old version is removed and new version is saved\nin cache. This param has no meaning for calls to\nstirshaken_check_identity_with_key(key) and\nstirshaken_check_identity_with_cert(cert).\n\n*Default value is 120 seconds.*\n\n    ...\n    modparam(\"stirshaken\", \"vs_cache_expire_s\", 15)\n    ...\n\n",
  "vs_certsubject_pvname": "### vs_certsubject_pvname (str)\n\nIf vs_certsubject_pvname is set then the Subject of the authenticated\nx509 certificate will be written to this pseudo-variable when\nstirshaken_check_identity() is executed. If the Identity header cannot\nbe fully authenticated the pseudo-variable will be set to \\$null.\n\n*Default value is blank (disabled).*\n\n    ...\n    modparam(\"stirshaken\", \"vs_certsubject_pvname\", \"$vn(certsubject)\")\n    ...\n\n",
  "vs_pptgrants_pvname": "### vs_pptgrants_pvname (str)\n\nIf vs_pptgrants_pvname is set then the JSON string of the authenticated\nPASSporT's grants will be written to this pseudo-variable when\nstirshaken_check_identity() is executed. If the Identity header cannot\nbe fully authenticated the pseudo-variable will be set to \\$null.\n\n*Default value is blank (disabled).*\n\n    ...\n    modparam(\"stirshaken\", \"vs_pptgrants_pvname\", \"$vn(grants)\")\n    ...\n\n"
 },
 "ims_dialog": {
  "enable_stats": "### enable_stats (integer)\n\nThis function is currently not supported by the ims_dialog module. To be\nincorporated in the future.\n\n",
  "hash_size": "### hash_size (integer)\n\nThe size of the hash table internally used to keep the dialogs. A larger\ntable is much faster but consumes more memory. The hash size must be a\npower of two number.\n\nIMPORTANT: If dialogs' information should be stored in a database, a\nconstant hash_size should be used, otherwise the restoring process will\nnot take place. If you really want to modify the hash_size you must\ndelete all table's rows before restarting the server.\n\n*Default value is \u201c4096\u201d.*\n\n    ...\n    modparam(\"ims_dialog\", \"hash_size\", 1024)\n    ...\n                    \n\n",
  "rr_param": "### rr_param (string)\n\nName of the Record-Route parameter to be added with the dialog cookie.\nIt is used for the fast dialog matching of sequential requests.\n\n*Default value is \u201cdid\u201d.*\n\n    ...\n    modparam(\"ims_dialog\", \"rr_param\", \"xyz\")\n    ...\n                    \n\n",
  "dlg_flag": "### dlg_flag (integer)\n\nFlag to be used for marking if a dialog should be constructed for the\ncurrent request (this makes sense only for initial requests).\n\n*Default value is \u201cnone\u201d.*\n\n    ...\n    modparam(\"ims_dialog\", \"dlg_flag\", 4)\n    ...\n                    \n\n",
  "timeout_avp": "### timeout_avp (string)\n\nThe specification of an AVP that contain a custom timeout (in seconds)\nfor the dialog. It may be used only in a request (initial or sequential)\ncontext\n\n*Default value is \u201cnone\u201d.*\n\n    ...\n    modparam(\"ims_dialog\", \"timeout_avp\", \"$avp(i:10)\")\n    ...\n                    \n\n",
  "default_timeout": "### default_timeout (integer)\n\nThe default dialog timeout (in seconds) if no custom one is set.\n\n*Default value is \u201c43200 (12 hours)\u201d.*\n\n    ...\n    modparam(\"ims_dialog\", \"default_timeout\", 21600)\n    ...\n                    \n\n",
  "dlg_extra_hdrs": "### dlg_extra_hdrs (string)\n\nA string containing the extra headers (full format, with EOH) to be\nadded in the requests generated by the module (like BYEs).\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"ims_dialog\", \"dlg_extra_hdrs\", \"Hint: credit expired\\r\\n\")\n    ...\n                    \n\n",
  "dlg_match_mode": "### dlg_match_mode (integer)\n\nDeprecated - in the new dialog module we always match using DID ONLY\n\n",
  "detect_spirals": "### detect_spirals (integer)\n\nWhether spirals (i.e., messages routed through the proxy multiple times)\nshould be detected or not.\n\nIf set to 0, spirals will not be detected and result in the generation\nof a new, possibly dangling dialog structure per occurring spiral. If\nset to 1, spirals are detected and internally mapped to existing dialog\nstructures.\n\nDefault value is 1.\n\n    ...\n    modparam(\"ims_dialog\", \"detect_spirals\", 1)\n    ...\n                    \n\n",
  "db_url": "### db_url (string)\n\nDb storage not yet supported by ims_dialog - this to be done in future.\n\n",
  "db_mode": "### db_mode (integer)\n\nDb storage not yet supported by ims_dialog - this to be done in future.\n\n",
  "db_update_period": "### db_update_period (integer)\n\nDb storage not yet supported by ims_dialog - this to be done in future.\n\n",
  "db_fetch_rows": "### db_fetch_rows (integer)\n\nDb storage not yet supported by ims_dialog - this to be done in future.\n\n",
  "table_name": "### table_name (string)\n\nDb storage not yet supported by ims_dialog - this to be done in future.\n\n",
  "profiles_with_value": "### profiles_with_value (string)\n\nList of names for profiles with values.\n\n*Default value is \u201cempty\u201d.*\n\n    ...\n    modparam(\"ims_dialog\", \"profiles_with_value\", \"caller ; my_profile\")\n    ...\n                    \n\n",
  "profiles_no_value": "### profiles_no_value (string)\n\nList of names for profiles without values.\n\n*Default value is \u201cempty\u201d.*\n\n    ...\n    modparam(\"ims_dialog\", \"profiles_no_value\", \"inbound ; outbound\")\n    ...\n                    \n\n",
  "bridge_controller": "### bridge_controller (string)\n\nSIP address to be used in From header when initiating a call bridge.\n\n*Default value is \u201csip:controller@kamailio.org\u201d.*\n\n    ...\n    modparam(\"ims_dialog\", \"bridge_controller\", \"sip:ctd@kamailio.org\")\n    ...\n                    \n\n",
  "initial_cbs_inscript": "### initial_cbs_inscript (string)\n\nThis has been deprecated since dlg_manage has been removed.\n\n"
 },
 "tmx": {
  "precheck_trans": "### precheck_trans (int)\n\nEnable/disable transaction pre-check via t_precheck_trans() function. If\nset to 0, the internal structures are not created at startup and the\nfunction will return false always.\n\nDefault value is *1* (enabled).\n\n    ...\n    modparam(\"tmx\", \"precheck_trans\", 0)\n    ...\n\n"
 },
 "drouting": {
  "db_url": "### db_url(str)\n\nThe database url.\n\n*Default value is \u201cmysql://kamailioro:kamailioro@localhost/kamailio\u201d.*\n\n    ...\n    modparam(\"drouting\", \"db_url\",\n        \"mysql://kamailio:kamailiorw@localhost/kamailio\")\n    ...\n\n",
  "drd_table": "### drd_table(str)\n\nThe name of the db table storing gateway addresses.\n\n*Default value is \u201cdr_gateways\u201d.*\n\n    ...\n    modparam(\"drouting\", \"drd_table\", \"dr_gateways\")\n    ...\n\n",
  "drr_table": "### drr_table(str)\n\nThe name of the db table storing routing rules.\n\n*Default value is \u201cdr_rules\u201d.*\n\n    ...\n    modparam(\"drouting\", \"drr_table\", \"rules\")\n    ...\n\n",
  "drg_table": "### drg_table(str)\n\nThe name of the db table storing groups.\n\n*Default value is \u201cdr_groups\u201d.*\n\n    ...\n    modparam(\"drouting\", \"drg_table\", \"groups\")\n    ...\n\n",
  "drl_table": "### drl_table(str)\n\nThe name of the db table storing definitions of destination lists (to be\nused directly by the routing rules). You will have an identifier to a\ngroup of gateways instead of having all the members of the group as\nindividual elements. Very useful to reuse a list of gateways in\ndifferent places.\n\n*Default value is \u201cdr_gw_lists\u201d.*\n\n    ...\n    modparam(\"drouting\", \"drl_table\", \"my_gw_lists\")\n    ...\n\n",
  "sort_order": "### sort_order (int)\n\nDefines how the destination list should be processed (ordering of the\nelements). Possible modes are\n\n- 0\n  \\- destination groups are ignored and all the destinations are tried\n  in the given order; Ex: list 1,2;3,4,5;6 will lead to usage as\n  1,2,3,4,5,6\n- 1\n  \\- the destinations from each group are randomly arranged (only the\n  two first elements are randomly selected); groups do maintain their\n  order (as given); the resulting list is used (with all the defined\n  destinations). Ex: 1,2;3,4,5;6 -\\> randomizer -\\> (A) 2,1;4,3,5;6 -\\>\n  usage 2,1,4,3,5,6 (B) 1,2;3,5,4;6 -\\> usage 1,2,3,5,4,6\n- 2\n  \\- from each destination group, only a single destination is randomly\n  selected; groups do maintain their order (as given);\n  Ex: 1,2;3,4,5;6 -\\> randomizer -\\>\n\n  \\(A\\) 2;4;6 -\\> usage 2,4,6\n\n  \\(B\\) 1;5;6 -\\> usage 1,5,6\n\n  It is ok to have repeating gateways in different groups. The module\n  will take care internally in case of failure not to choose a gateway\n  that was tried already.\n\n  Ex: 1,2,3; 1,2,3; 1,2,3 -\\> no gateway will be chosen twice. So in\n  case there are 2 failures, all the three gateways (1,2,3) will be\n  tried in a random order.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"drouting\", \"sort_order\", 2)\n    ...\n\n",
  "ruri_avp": "### ruri_avp (str)\n\nThe name of the avp for storing Request URIs to be later used\n(alternative destinations for the current one).\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"drouting\", \"ruri_avp\", '$avp(dr_ruri)')\n    modparam(\"drouting\", \"ruri_avp\", '$avp(i:33)')\n    ...\n        \n\n",
  "attrs_avp": "### attrs_avp (str)\n\nThe name of the avp for storing the attribute of the current selected\ndestination - once a new destination is selected (via the use_next_gw()\nfunction), the AVP will be updated with the attrs of the new used\ndestination.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"drouting\", \"attrs_avp\", '$avp(dr_attrs)')\n    modparam(\"drouting\", \"atrrs_avp\", '$avp(i:67)')\n    ...\n        \n\n",
  "use_domain": "### use_domain (int)\n\nFlag to configure whether to use domain match when querying database for\nuser's routing group.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"drouting\", \"use_domain\", 0)\n    ...\n\n",
  "drg_user_col": "### drg_user_col (str)\n\nThe name of the column in group db table where the username is stored.\n\n*Default value is \u201cusername\u201d.*\n\n    ...\n    modparam(\"drouting\", \"drg_user_col\", \"user\")\n    ...\n\n",
  "drg_domain_col": "### drg_domain_col (str)\n\nThe name of the column in group db table where the domain is stored.\n\n*Default value is \u201cdomain\u201d.*\n\n    ...\n    modparam(\"drouting\", \"drg_domain_col\", \"host\")\n    ...\n\n",
  "drg_grpid_col": "### drg_grpid_col (str)\n\nThe name of the column in group db table where the group id is stored.\n\n*Default value is \u201cgroupid\u201d.*\n\n    ...\n    modparam(\"drouting\", \"drg_grpid_col\", \"grpid\")\n    ...\n\n",
  "fetch_rows": "### fetch_rows (int)\n\nThe number of rows that should be fetched from the result of a query in\nrules db table.\n\n*Default value is \u201c2000\u201d.*\n\n    ...\n    modparam(\"drouting\", \"fetch_rows\", 1500)\n    ...\n\n",
  "force_dns": "### force_dns (int)\n\nForce DNS resolving of GW/destination names (if not IPs) during startup.\nIf not enabled, the GW name will be blindly used during routing.\n\n*Default value is \u201c1 (enabled)\u201d.*\n\n    ...\n    modparam(\"drouting\", \"force_dns\", 0)\n    ...\n        \n\n",
  "enable_keepalive": "### enable_keepalive (int)\n\nEnable monitoring of GW/destinations using keepalive module.\nDestinations found unavailable will not be used on do_routing() call.\n\n*Default value is \u201c0 (disabled)\u201d.*\n\n    ...\n    modparam(\"drouting\", \"enable_keepalive\", 1)\n    ...\n        \n\n"
 },
 "cfgutils": {
  "initial_probability": "### initial_probability (string)\n\nThe initial value of the probability.\n\nDefault value is \u201c10\u201d.\n\n    ...\n    modparam(\"cfgutils\", \"initial_probability\", 15)\n    ...\n\n",
  "hash_file": "### hash_file (string)\n\nThe config file name for that a hash value should be calculated on\nstartup.\n\nThere is no default value, is no parameter is given the hash\nfunctionality is disabled.\n\n    ...\n    modparam(\"cfgutils\", \"hash_file\", \"/etc/kamailio/kamailio.cfg\")\n    ...\n\n",
  "initial_gflags": "### initial_gflags (integer)\n\nThe initial value of global flags bitmap.\n\nDefault value is \u201c0\u201d.\n\n    ...\n    modparam(\"cfgutils\", \"initial_gflags\", 15)\n    ...\n            \n\n",
  "lock_set_size": "### lock_set_size (integer)\n\nSize of lock set - the value is used as power of two to compute the size\nof lock array.\n\nDefault value is \u201c0\u201d - no lock set created.\n\n    ...\n    modparam(\"cfgutils\", \"lock_set_size\", 4)\n    ...\n            \n\n"
 },
 "nsq": {
  "lookupd_address": "### lookupd_address(str)\n\nThe nsqlookupd address.\n\nUsage: nsq related.\n\n*Default value is 127.0.0.1*\n\n    ...\n    modparam(\"nsq\", \"lookupd_address\", \"nsqlookupd.mydomain.com\")\n    ...\n\n",
  "lookupd_port": "### lookupd_port(int)\n\nThe nsqlookupd TCP port.\n\nUsage: nsq related.\n\n*Default value is 4161.*\n\n    ...\n    modparam(\"nsq\", \"lookupd_port\", 4161)\n    ...\n                    \n\n",
  "nsqd_address": "### nsqd_address(str)\n\nThe nsqd address. You can specify connecting directly to nsqd instead of\nusing nsqlookupd.\n\nUsage: nsq related.\n\n*Default value is 127.0.0.1*\n\n    ...\n    modparam(\"nsq\", \"nsqd_address\", \"nsqd.mydomain.com\")\n    ...\n\n",
  "nsqd_port": "### nsqd_port(int)\n\nThe nsqd TCP port.\n\nUsage: nsq related.\n\n*Default value is 4150.*\n\n    ...\n    modparam(\"nsq\", \"nsqd_port\", 4150)\n    ...\n\n",
  "consumer_use_nsqd": "### consumer_use_nsqd(int)\n\nSet to 1 if you'd like to connect to nsqd instead of nsqlookupd.\n\nUsage: nsq related.\n\n*Default value is 0.*\n\n    ...\n    modparam(\"nsq\", \"consumer_use_nsqd\", 1)\n    ...\n\n",
  "consumer_event_key": "### consumer_event_key(str)\n\nThe default name of the field in json payload to compose the event name\n1st part\n\nUsage: nsq related.\n\n*Default value is \u201cEvent-Category\u201d.*\n\n    ...\n    modparam(\"nsq\", \"consumer_event_key\", \"My-JSON-Field-Name\")\n    ...\n\n",
  "consumer_event_subkey": "### consumer_event_subkey(str)\n\nThe default name of the field in json payload to compose the event name\n2nd part\n\nUsage: nsq related.\n\n*Default value is \u201cEvent-Name\u201d.*\n\n    ...\n    modparam(\"nsq\", \"consumer_event_subkey\", \"My-JSON-SubField-Name\")\n    ...\n\n",
  "max_in_flight": "### max_in_flight(int)\n\nThe number of messages the consumer can receive before nsqd expects a\nresponse.\n\nUsage: nsq related.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"nsq\", \"max_in_flight\", 2)\n    ...\n\n",
  "consumer_workers": "### consumer_workers(int)\n\nNumber of consumer connections to NSQ per topic_channel.\n\nUsage: nsq related.\n\n*Default value is 4.*\n\n    ...\n    modparam(\"nsq\", \"consumer_workers\", 2)\n    ...\n\n",
  "topic_channel": "### topic_channel(str)\n\nThe NSQ Topic and Channel. Delimiter-separated by \u201c:\u201d. It be set\nmultiple times to subscribe to multiple topics and channels. The value\nof consumer_workers is allocated per topic_channel.\n\nUsage: nsq related.\n\n*Default value is \u201cKamailio-Topic:Kamailio-Channel\u201d.*\n\n    ...\n    modparam(\"nsq\", \"topic_channel\", \"My-NSQ-Topic:My-NSQ-Channel\")\n    modparam(\"nsq\", \"topic_channel\", \"My-NSQ-Topic-2:My-NSQ-Channel-2\")\n    ...\n                    \n\n"
 },
 "ims_ipsec_pcscf": {
  "ipsec_listen_addr": "### ipsec_listen_addr (string)\n\nIP address which the Proxy-CSCF will use for incoming/outgoing SIP\ntraffic over IPSec.\n\n*Default value is empty string (null) - IPv4 listen interface will not\nbe added*\n\n    ...\n    modparam(\"ims_ipsec_pcscf\", \"ipsec_listen_addr\", \"\")\n    ...\n            \n\n",
  "ipsec_listen_addr6": "### ipsec_listen_addr6 (string)\n\nIPv6 address which the Proxy-CSCF will use for incoming/outgoing SIP\ntraffic over IPSec.\n\n*Default value is empty string (null) - IPv6 listen interface will not\nbe added*\n\n    ...\n    modparam(\"ims_ipsec_pcscf\", \"ipsec_listen_addr6\", \"\")\n    ...\n            \n\n",
  "ipsec_client_port": "### ipsec_client_port (int)\n\nPort number which will be bound for incoming (server) IPSec traffic.\n\n*Default value is 5062.*\n\n    ...\n    modparam(\"ims_ipsec_pcscf\", \"ipsec_client_port\", 5062)\n    ...\n            \n\n",
  "ipsec_server_port": "### ipsec_server_port (int)\n\nPort number which will be bound for incoming (server) IPSec traffic.\n\n*Default value is 5063.*\n\n    ...\n    modparam(\"ims_ipsec_pcscf\", \"ipsec_server_port\", 5063)\n    ...\n            \n\n",
  "ipsec_max_connections": "### ipsec_max_connections (int)\n\nMaximum simultaneous IPSec connections\n\n*Default value is 2.*\n\n    ...\n    modparam(\"ims_ipsec_pcscf\", \"ipsec_max_connections\", 10)\n    ...\n            \n\n",
  "ipsec_reuse_server_port": "### ipsec_reuse_server_port (int)\n\nReuse (1) or not (0) the P-CSCF IPSec information for Re-registration\nfor one UA. When set to 0 - During Re-registration P-CSCF will create\nnew IPSec tunnels. When set to 1 - During Re-registration P-CSCF will\nreuse the old IPSec tunnels.\n\n*Default value is 1.*\n\n    ...\n    modparam(\"ims_ipsec_pcscf\", \"ipsec_reuse_server_port\", 1)\n    ...\n            \n\n",
  "ipsec_spi_id_start": "### ipsec_spi_id_start (int)\n\nEach IPSec tunnel has a unique system-wide identifier. This and the\nfollowing option allows to tune the SPIs used by Kamailio in order to\navoid collisions with other IPSec useres. If Kamailio is the only\nprocess on the system which uses IPSec, don't bother with this option.\n\n*Default value is 100.*\n\n    ...\n    modparam(\"ims_ipsec_pcscf\", \"ipsec_spi_id_start\", 100)\n    ...\n            \n\n",
  "ipsec_spi_id_range": "### ipsec_spi_id_range (int)\n\nHow many SPIs to be allocated for the process. E.g. if\nipsec_spi_id_start = 100 and ipsec_spi_id_range = 1000, SPIs between 100\nand 1100 will be used.\n\n*Default value is 1000.*\n\n    ...\n    modparam(\"ims_ipsec_pcscf\", \"ipsec_spi_id_range\", 1000)\n    ...\n            \n\n",
  "ipsec_preferred_alg": "### ipsec_preferred_alg (string)\n\nA name of an authentication algorithm which the Proxy-CSCF will *prefer*\nwhen creating IPSec tunnels.\n\n*Default value is empty string (null) - the last algorithm in the\nSec-Agree header will be used.*\n\n    ...\n    modparam(\"ims_ipsec_pcscf\", \"ipsec_preferred_alg\", \"hmac-sha-1-96\")\n    ...\n            \n\n",
  "ipsec_preferred_ealg": "### ipsec_preferred_ealg (string)\n\nA name of an encrytion algorithm which the Proxy-CSCF will *prefer* when\ncreating IPSec tunnels.\n\n*Default value is empty string (null) - the last algorithm in the\nSec-Agree header will be used. Note that the possibility of it being the\n\"null\" algorithm is not insignificant.*\n\n    ...\n    modparam(\"ims_ipsec_pcscf\", \"ipsec_preferred_ealg\", \"aes-cbc\")\n    ...\n            \n\n"
 },
 "seas": {},
 "sworker": {},
 "rtimer": {
  "default_interval": "### default_interval (int)\n\nThe definition of the default interval of timers (if not present on the\n\"timer\" parameter)\n\nThe parameter can be set multiple times to get different intervals in\nsame configuration file.\n\n    ...\n    # default time interval set to 300 seconds\n    modparam(\"rtimer\", \"default_interval\", 300)\n    ...\n            \n\n",
  "timer": "### timer (str)\n\nThe definition of a timer. The value of the parameter must have the\nfollowing format:\n\n- \"name=\\_string\\_;mode=\\_number\\_;interval=\\_number\\_\"\n\nThe parameter can be set multiple times to get more timers in same\nconfiguration file.\n\n- *name* - name of the timer.\n\n- *mode* - if set to 0, the timer will use the main (shared) timer. Any\n  number \\> 0 will create the specified amount of new timer processes\n  (which will only be handling this timer).\n\n- *interval* - timer interval in seconds or micro-seconds (the value\n  must be ended in 'u'). For micro-seconds intervals, mode is set always\n  to 1.\n\n*Default value is NULL.*\n\n    ...\n    # time interval set to 10 seconds\n    modparam(\"rtimer\", \"timer\", \"name=ta;interval=10;mode=1;\")\n    # time interval set to 100 mili-seconds\n    modparam(\"rtimer\", \"timer\", \"name=ta;interval=100000u;mode=1;\")\n    ...\n\n",
  "exec": "### exec (str)\n\nSpecify route to be executed on timer. The value of the parameter must\nhave the following format:\n\n- \"timer=\\_string\\_;route=\\_number\\_\"\n\nThe parameter can be set multiple times to get more routes executed on\nsame timer.\n\n- *timer* - name of the timer.\n\n- *route* - the name of the route block to be executed, or the name of\n  the function from kemi script. The kemi function receives a string\n  parameter with the value being the name of the module.\n\n*Default value is NULL.*\n\n    ...\n    modparam(\"rtimer\", \"timer\", \"name=ta;interval=10;mode=1;\")\n    modparam(\"rtimer\", \"exec\", \"timer=ta;route=ONTIMER\")\n\n    route[ONTIMER] {\n        xlog(\"timer routine: time is $TF\\n\");\n        # delete from my sql cache table entries older than 2H\n        sql_query(\"delete from kamailio_cache where last_updated<$TS-3600\");\n    }\n    ...\n\n    ...\n    modparam(\"rtimer\", \"timer\", \"name=ta;interval=10;mode=1;\")\n    modparam(\"rtimer\", \"exec\", \"timer=ta;route=ksr_rtimer\")\n    ...\n    -- rtimer event callback function implemented in Lua\n    function ksr_rtimer(evname)\n        KSR.info(\"===== rtimer module triggered event\\n\");\n        return 1;\n    end\n    ...\n"
 },
 "carrierroute": {
  "subscriber_table": "### subscriber_table (string)\n\nThe name of the table containing the subscribers\n\n*Default value is \u201csubscriber\u201d.*\n\n    ...\n    modparam(\"carrierroute\", \"subscriber_table\", \"subscriber\")\n    ...\n            \n\n",
  "subscriber_user_col": "### subscriber_user_col (string)\n\nThe name of the column in the subscriber table containing the usernames.\n\n*Default value is \u201cusername\u201d.*\n\n    ...\n    modparam(\"carrierroute\", \"subscriber_user_col\", \"username\")\n    ...\n            \n\n",
  "subscriber_domain_col": "### subscriber_domain_col (string)\n\nThe name of the column in the subscriber table containing the domain of\nthe subscriber.\n\n*Default value is \u201cdomain\u201d.*\n\n    ...\n    modparam(\"carrierroute\", \"subscriber_domain_col\", \"domain\")\n    ...\n            \n\n",
  "subscriber_carrier_col": "### subscriber_carrier_col (string)\n\nThe name of the column in the subscriber table containing the carrier id\nof the subscriber.\n\n*Default value is \u201ccr_preferred_carrier\u201d.*\n\n    ...\n    modparam(\"carrierroute\", \"subscriber_carrier_col\", \"cr_preferred_carrier\")\n    ...\n            \n\n",
  "config_source": "### config_source (string)\n\nSpecifies whether the module loads its config data from a file or from a\ndatabase. Possible values are \u201cfile\u201d and \u201cdb\u201d.\n\n*Default value is \u201cfile\u201d.*\n\n    ...\n    modparam(\"carrierroute\", \"config_source\", \"file\")\n    ...\n            \n\n",
  "config_file": "### config_file (string)\n\nSpecifies the path to the config file. The file has to be owned by the\nuser and group used to run Kamailio.\n\n*Default value is \u201c/etc/kamailio/carrierroute.conf\u201d.*\n\n    ...\n    modparam(\"carrierroute\", \"config_file\", \"/etc/kamailio/carrierroute.conf\")\n    ...\n            \n\n",
  "default_tree": "### default_tree (string)\n\nThe name of the carrier tree used per default (if the current subscriber\nhas no preferred tree)\n\n*Default value is \u201cdefault\u201d.*\n\n    ...\n    modparam(\"carrierroute\", \"default_tree\", \"default\")\n    ...\n            \n\n",
  "use_domain": "### use_domain (int)\n\nWhen using tree lookup per user, this parameter specifies whether to use\nthe domain part for user matching or not. This parameter is tunable via\nthe ser cfg framework.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"carrierroute\", \"use_domain\", 0)\n    ...\n            \n\n",
  "fallback_default": "### fallback_default (int)\n\nThis parameter defines the behaviour when using user-based tree lookup.\nIf the user has a non-existing tree set and fallback_default is set to\n1, the default tree is used. Otherwise, cr_user_rewrite_uri returns an\nerror. This parameter is tunable via the ser cfg framework.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"carrierroute\", \"fallback_default\", 1)\n    ...\n            \n\n",
  "fetch_rows": "### fetch_rows (integer)\n\nThe number of the rows to be fetched at once from database when loading\nthe routing data. This value can be used to tune the load time at\nstartup. For 1MB of private memory (default) it should be below 3750.\nThe database driver must support the fetch_result() capability. This\nparameter is tunable via the ser cfg framework.\n\n*Default value is \u201c2000\u201d.*\n\n    ...\n    modparam(\"carrierroute\", \"fetch_rows\", 3000)\n    ...\n            \n\n",
  "db_load_description": "### db_load_description (integer)\n\nToggle on/off loading in memory the description column in the\ncarrierroute/carrierfailureroute database tables. This reduces the\nshared memory used by the module.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"carrierroute\", \"db_load_description\", 0)\n    ...\n            \n\n",
  "match_mode": "### match_mode (integer)\n\nThe number of individual characters that are used for matching. Valid\nvalues are 10 or 128. When you specify 10, only digits will be used for\nmatching, this operation mode is equivalent to the old behaviour. When\nconfigured with 128, all standard ascii chars are available for\nmatching. Please be aware that memory requirements for storing the\nrouting tree in shared memory will also increase by a factor of 12.8.\n\n*Default value is \u201c10\u201d.*\n\n    ...\n    modparam(\"carrierroute\", \"match_mode\", 10)\n    ...\n            \n\n",
  "avoid_failed_destinations": "### avoid_failed_destinations (integer)\n\nInteger parameter to toggle on/off the possibility that in the\nfailurerouting cases destinations that previously failed are avoided.\nPossible values are 0 (off), 1 (on). Also see cr_route section.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"carrierroute\", \"avoid_failed_destinations\", 0)\n    ...\n            \n\n"
 },
 "acc": {
  "early_media": "### early_media (integer)\n\nShould be early media (any provisional reply with body) accounted too ?\n\nDefault value is 0 (no).\n\n    ...\n    modparam(\"acc\", \"early_media\", 1)\n    ...\n\n",
  "failed_transaction_flag": "### failed_transaction_flag (integer)\n\nPer transaction flag which says if the transaction should be accounted\nalso in case of failure (SIP status code \\>= 300). This flag triggers\naccounting when the whole transaction fails (on the server side).\n\nDefault value is not-set (no flag).\n\n    ...\n    modparam(\"acc\", \"failed_transaction_flag\", 4)\n    ...\n\n",
  "failed_filter": "### failed_filter (string)\n\nA string of failure response codes from 300 to 999 separated by commas.\nFailed transaction will not be accounted if its response code is in the\nlist even when failed_transaction_flag is set.\n\nDefault value is not-set (failure filtering is off).\n\n    ...\n    modparam(\"acc\", \"failed_filter\", \"404,407\")\n    ...\n\n",
  "report_ack": "### report_ack (integer)\n\nShall acc attempt to account e2e ACKs too ? Note that this is really\nonly an attempt, as e2e ACKs may take a different path (unless RR\nenabled) and mismatch original INVITE (e2e ACKs are a separate\ntransaction). The flag for accounting has to be set for each ACK as\nwell.\n\nDefault value is 0 (no).\n\n    ...\n    modparam(\"acc\", \"report_ack\", 1)\n    ...\n\n",
  "report_cancels": "### report_cancels (integer)\n\nBy default, CANCEL reporting is disabled -- most accounting applications\nwants to see INVITE's cancellation status. Turn on if you explicitly\nwant to account CANCEL transactions.\n\nDefault value is 0 (no).\n\n    ...\n    modparam(\"acc\", \"report_cancels\", 1)\n    ...\n\n",
  "detect_direction": "### detect_direction (integer)\n\nControls the direction detection for sequential requests. If enabled\n(non zero value), for sequential requests with upstream direction (from\ncallee to caller), the FROM and TO will be swapped (the direction will\nbe preserved as in the original request).\n\nIt affects all values related to TO and FROM headers (body, URI,\nusername, domain, TAG).\n\nDefault value is 0 (disabled).\n\n    ...\n    modparam(\"acc\", \"detect_direction\", 1)\n    ...\n\n",
  "acc_prepare_flag": "### acc_prepare_flag (integer)\n\nPer transaction flag which says if the transaction may be accounted\nlater, with flags set in TM module specific routes (e.g., like\nfailure_route). If this flag is not set and acc or missed_call flag are\nnot set either in request route block, there is no way to mark the\nrequest for transaction later unless you set acc_prepare_always. If\neither acc or missed_call flags are set in request route block, there is\nno need to set this flag.\n\nDefault value is not-set (no flag).\n\n    ...\n    modparam(\"acc\", \"acc_prepare_flag\", 5)\n    ...\n\n",
  "acc_prepare_always": "### acc_prepare_always (integer)\n\nPrepare all request even if acc_prepare_flag is not set to mark the\nrequest for transaction later.\n\nDefault value is not-set (previous behaviour).\n\n    ...\n    modparam(\"acc\", \"acc_prepare_always\", 1)\n    ...\n\n",
  "acc_extra_nullable": "### acc_extra_nullable (integer)\n\nIf set to 1, the database acc extra fields are set to NULL if the\ncorresponding script variable is not defined or has \\$null value. If set\nto 0, the value is saved as empty string (the existing behavior).\n\nDatabase columns may need to be altered to DROP NOT NULL constraints and\nDROP DEFAULT values in order to accept NULL values.\n\nDefault value is 0.\n\n    ...\n    modparam(\"acc\", \"acc_extra_nullable\", 1)\n    ...\n\n",
  "multi_leg_info": "### multi_leg_info (string)\n\nDefines the AVP set to be used in per-call-leg accounting. See [Multi\nCall-Legs accounting](#acc.i.multi-call-legs) for a detailed description\nof the Multi Call-Legs accounting.\n\nIf empty, the multi-leg accounting support will be disabled.\n\nDefault value is 0 (disabled).\n\n    ...\n    # for syslog-based accounting, use any text you want to be printed\n    modparam(\"acc\", \"multi_leg_info\",\n        \"text1=$avp(src);text2=$avp(dst)\")\n    # for mysql-based accounting, use the names of the columns\n    modparam(\"acc\", \"multi_leg_info\",\n        \"leg_src=$avp(src);leg_dst=$avp(dst)\")\n    # for DIAMETER-based accounting, use the DIAMETER AVP ID (as integer)\n    modparam(\"acc\", \"multi_leg_info\",\n        \"2345=$avp(src);2346=$avp(dst)\")\n    ...\n\n",
  "log_flag": "### log_flag (integer)\n\nRequest flag which needs to be set to account a transaction via syslog.\n\nDefault value is not-set (no flag).\n\n    ...\n    modparam(\"acc\", \"log_flag\", 2)\n    ...\n\n",
  "log_missed_flag": "### log_missed_flag (integer)\n\nRequest flag which needs to be set to account missed calls via syslog.\nThis can be used to e.g. account failures during the call setup phase\nfrom the callee (client) side, for example if you do forking to several\ndestinations.\n\nKeep in mind that this flag is reset after branch completion. Therefore\nit is necessary to set it again e.g. in a failure_route if you do serial\nforking and want to log all attempts.\n\nDefault value is not-set (no flag).\n\n    ...\n    modparam(\"acc\", \"log_missed_flag\", 3)\n    ...\n\n",
  "log_level": "### log_level (integer)\n\nLog level at which accounting messages are issued to syslog.\n\nDefault value is 1 (L_NOTICE).\n\n    ...\n    modparam(\"acc\", \"log_level\", 2)   # Set log_level to 2 (L_INFO)\n    ...\n\n",
  "log_facility": "### log_facility (string)\n\nLog facility to which accounting messages are issued to syslog. This\nallows to easily separate the accounting specific logging from the other\nlog messages.\n\nDefault value is LOG_DAEMON.\n\n    ...\n    modparam(\"acc\", \"log_facility\", \"LOG_DAEMON\")\n    ...\n\n",
  "log_extra": "### log_extra (string)\n\nExtra values to be logged. See section [Extra\naccounting](#acc.i.extra-accounting) for more details.\n\nDefault value is NULL.\n\n    ...\n    modparam(\"acc\", \"log_extra\", \"ua=$hdr(User-Agent);uuid=$avp(i:123)\")\n    ...\n\n",
  "db_flag": "### db_flag (integer)\n\nRequest flag which needs to be set to account a transaction -- database\nspecific.\n\nDefault value is not-set (no flag).\n\n    ...\n    modparam(\"acc\", \"db_flag\", 2)\n    ...\n\n",
  "db_missed_flag": "### db_missed_flag (integer)\n\nRequest flag which needs to be set to account missed calls via database.\nThis can be used to e.g. account failures during the call setup phase\nfrom the callee (client) side, for example if you do forking to several\ndestinations.\n\nKeep in mind that this flag is reset after branch completion. Therefore\nit is necessary to set it again e.g. in a failure_route if you do serial\nforking and want to log all attempts.\n\nDefault value is not-set (no flag).\n\n    ...\n    modparam(\"acc\", \"db_missed_flag\", 3)\n    ...\n\n",
  "db_table_acc": "### db_table_acc (string)\n\nTable name of accounting successful calls -- database specific. It can\ncontain config variables that will be evaluated at runtime.\n\nDefault value is \u201cacc\u201d\n\n    ...\n    modparam(\"acc\", \"db_table_acc\", \"myacc_table\")\n    modparam(\"acc\", \"db_table_acc\", \"acc_$time(year)_$time(mon)\")\n    ...\n\n",
  "db_table_missed_calls": "### db_table_missed_calls (string)\n\nTable name for accounting missed calls -- database specific. It can\ncontain config variables that will be evaluated at runtime.\n\nDefault value is \u201cmissed_calls\u201d\n\n    ...\n    modparam(\"acc\", \"db_table_missed_calls\", \"myMC_table\")\n    ...\n\n",
  "db_url": "### db_url (string)\n\nSQL address -- database specific. If it is set to NULL or empty string,\nthe SQL support is disabled.\n\nDefault value is \u201cNULL\u201d (SQL disabled).\n\n    ...\n    modparam(\"acc\", \"db_url\", \"mysql://user:password@localhost/kamailio\")\n    ...\n\n",
  "acc_method_column": "### acc_method_column (string)\n\nColumn name in accounting table to store the request's method name as\nstring.\n\nDefault value is \u201cmethod\u201d.\n\n    ...\n    modparam(\"acc\", \"acc_method_column\", \"method\")\n    ...\n\n",
  "acc_from_tag_column": "### acc_from_tag_column (string)\n\nColumn name in accounting table to store the From header TAG parameter.\n\nDefault value is \u201cfrom_tag\u201d.\n\n    ...\n    modparam(\"acc\", \"acc_from_tag_column\", \"from_tag\")\n    ...\n\n",
  "acc_to_tag_column": "### acc_to_tag_column (string)\n\nColumn name in accounting table to store the To header TAG parameter.\n\nDefault value is \u201cto_tag\u201d.\n\n    ...\n    modparam(\"acc\", \"acc_to_tag_column\", \"to_tag\")\n    ...\n\n",
  "acc_callid_column": "### acc_callid_column (string)\n\nColumn name in accounting table to store the request's Callid value.\n\nDefault value is \u201ccallid\u201d.\n\n    ...\n    modparam(\"acc\", \"acc_callid_column\", \"callid\")\n    ...\n\n",
  "acc_sip_code_column": "### acc_sip_code_column (string)\n\nColumn name in accounting table to store the final reply's numeric code\nvalue in string format.\n\nDefault value is \u201csip_code\u201d.\n\n    ...\n    modparam(\"acc\", \"acc_sip_code_column\", \"sip_code\")\n    ...\n\n",
  "acc_sip_reason_column": "### acc_sip_reason_column (string)\n\nColumn name in accounting table to store the final reply's reason phrase\nvalue.\n\nDefault value is \u201csip_reason\u201d.\n\n    ...\n    modparam(\"acc\", \"acc_sip_reason_column\", \"sip_reason\")\n    ...\n\n",
  "acc_time_column": "### acc_time_column (string)\n\nColumn name in accounting table to store the time stamp of the\ntransaction completion in date-time format.\n\nDefault value is \u201ctime\u201d.\n\n    ...\n    modparam(\"acc\", \"acc_time_column\", \"time\")\n    ...\n\n",
  "db_extra": "### db_extra (string)\n\nExtra values to be logged into database - DB specific. See section\n[Extra accounting](#acc.i.extra-accounting) for more details.\n\nDefault value is NULL.\n\n    ...\n    modparam(\"acc\", \"db_extra\", \"ct=$hdr(Content-type); email=$avp(s:email)\")\n    ...\n\n",
  "db_insert_mode": "### db_insert_mode (integer)\n\nIf set to 1, use INSERT DELAYED to add records to accounting tables when\nthe DB driver has support for it. If no INSERT DELAYED support is\noffered by DB driver, then standard INSERT is used. Beware that MySQL\nInnoDB engine doesn't support INSERT DELAYED, thus be sure the acc\ntables are defined with different type (e.g., MyISAM).\n\nIf set to 2, async insert is used if the db driver module has support\nfor it and if async_workers core parameter value is greater than 0. If\nnot, then standard INSERT is used.\n\nDefault value is 0 (no INSERT DELAYED nor async insert).\n\n    ...\n    modparam(\"acc\", \"db_insert_mode\", 1)\n    ...\n\n",
  "cdr_enable": "### cdr_enable (integer)\n\nEnable CDR reporting - one record per call reported to \"acc_cdrs\" table,\nrelying on dialog module.\n\nThe value can be:\n\n- 0 - off (default).\n\n- 1 - on.\n\n<!-- -->\n\n    ...\n    modparam(\"acc\", \"cdr_enable\", 1)\n    ...\n\n",
  "cdr_skip": "### cdr_skip (string)\n\nSkip cdr generation for dialogs with this dlg_var set.\n\nDefault value is NULL.\n\n    ...\n    modparam(\"acc\", \"cdr_skip\", \"nocdr\")\n    ...\n\n",
  "cdr_expired_dlg_enable": "### cdr_expired_dlg_enable (integer)\n\nShould CDR-based logging be enabled in case of expired dialogs?\n\n- 0 - off (default).\n\n- 1 - on.\n\n<!-- -->\n\n    ...\n    modparam(\"acc\", \"cdr_expired_dlg_enable\", 1)\n    ...\n\n",
  "cdr_start_on_confirmed": "### cdr_start_on_confirmed (integer)\n\nShould the start time be taken from the time when the dialog is created,\nor when the dialog is confirmed?\n\n- 0 - use time of dialog creation (default).\n\n- 1 - use time of dialog confirmation.\n\n<!-- -->\n\n    ...\n    modparam(\"acc\", \"cdr_start_on_confirmed\", 1)\n    ...\n\n",
  "cdr_facility": "### cdr_facility (integer)\n\nLog facility to which CDR messages are issued to syslog. This allows to\neasily separate CDR-specific logging from the other log messages.\n\nDefault value is LOG_DAEMON.\n\n    ...\n    modparam(\"acc\", \"cdr_facility\", \"LOG_DAEMON\")\n    ...\n\n",
  "cdr_extra": "### cdr_extra (string)\n\nSet of pseudo-variables defining custom CDR fields. See [CDR\nExtra](#acc.i.cdr-extra) for more details.\n\nDefault value is NULL.\n\n    ...\n    modparam(\"acc\", \"cdr_extra\", \"c1=$dlg_var(caller);c2=$dlg_var(callee)\"\n    ...\n\n",
  "cdr_extra_nullable": "### cdr_extra_nullable (integer)\n\nShould custom CDR fields be saved as NULL?\n\nIf set to 0, custom CDR fields not defined in config operation (or set\nto \\$null) will be saved as empty string. If set to 1, custom CDR fields\nnot defined in config operation (or set to \\$null) will be saved as\nNULL.\n\nDatabase columns may need to be altered to DROP NOT NULL constraints and\nDROP DEFAULT values in order to accept NULL values.\n\nDefault value is 0.\n\n    ...\n    modparam(\"acc\", \"cdr_extra_nullable\", 1)\n    ...\n\n",
  "cdr_start_id": "### cdr_start_id (string)\n\nModifying the id which is used to store the start time.\n\nDefault value is 'start_time'\n\n    ...\n    modparam(\"acc\", \"cdr_start_id\", \"start\")\n    ...\n\n",
  "cdr_end_id": "### cdr_end_id (string)\n\nModifying the id which is used to store the end time.\n\nDefault value is 'end_time'\n\n    ...\n    modparam(\"acc\", \"cdr_end_id\", \"end\")\n    ...\n\n",
  "cdr_duration_id": "### cdr_duration_id (string)\n\nModify the id which is used to store the duration.\n\nDefault value is 'duration'\n\n    ...\n    modparam(\"acc\", \"cdr_duration_id\", \"d\")\n    ...\n\n",
  "cdr_log_enable": "### cdr_log_enable (int)\n\nControl if CDR-based accounting should be written to syslog.\n\n0 - off. 1 - on (default).\n\n    ...\n    modparam(\"acc\", \"cdr_log_enable\", 0)\n    ...\n\n",
  "cdrs_table": "### cdrs_table (str)\n\nName of db table to store dialog-based CDRs.\n\nDefault value is \"\" (no db storage for dialog-based CDRs).\n\n    ...\n    modparam(\"acc\", \"cdrs_table\", \"acc_cdrs\")\n    ...\n\n",
  "time_mode": "### time_mode (int)\n\nStore additional value related to the time of event.\n\nValues can be:\n\n- *0* - (default), save only unix timestamp for syslog and datetime for\n  database.\n\n- *1* - save seconds in time_attr and microseconds in time_exten.\n\n- *2* - save seconds.milliseconds in time_attr.\n\n- *3* - save formatted time according to time_format parameter, using\n  the output of localtime(). Used for cdr entries too.\n\n- *4* - save formatted time according to time_format parameter, using\n  the output of gmtime(). Used for cdr entries too.\n\n<!-- -->\n\n    ...\n    modparam(\"acc\", \"time_mode\", 1)\n    ...\n\n",
  "time_attr": "### time_attr (str)\n\nName of the syslog attribute or database column where to store\nadditional value related to the time of event.\n\nFor db accounting, the column has to be of different types, depending on\ntime_mode value. When time_mode is:\n\n- *1* - time_attr column has to be int.\n\n- *2* - time_attr column has to be double.\n\n- *3* - time_attr column has to be varchar(128).\n\n- *4* - time_attr column has to be varchar(128).\n\nFor time_mode=1, this attribute is not written in syslog, because time\nvalue is already unix timestamp, but in db accounting time value is\ndatetime and requires a function to get the timestamp.\n\n    ...\n    modparam(\"acc\", \"time_attr\", \"seconds\")\n    ...\n\n",
  "time_exten": "### time_exten (str)\n\nName of the syslog attribute or database column where to store extended\nvalue related to the time of event.\n\nIt is used now only for time_mode=1 and database column has to be int:\n\n    ...\n    modparam(\"acc\", \"time_exten\", \"microsecs\")\n    ...\n\n",
  "time_format": "### time_format (str)\n\nSpecify the format to print the time for time_mode 3 or 4.\n\nDefault value is %Y-%m-%d %H:%M:%S\".\n\n    ...\n    modparam(\"acc\", \"time_format\", \"%Y/%m/%d %H:%M:%S\")\n    ...\n\n",
  "reason_from_hf": "### reason_from_hf (int)\n\nTells where to take sip_reason from. If value is 0, sip_reason is taken\nfrom status line. Otherwise, sip_reason is taken from Reason header\nfield(s) if present. Currently only the first Reason header is used.\n\nDefault value is 0.\n\n    ...\n    modparam(\"acc\", \"reason_from_hf\", 1)\n    ...\n\n",
  "clone_msg": "### clone_msg (int)\n\nIf set to 1, request structure from transaction is cloned temporarily in\nthe callback to get acc attributes. It is required if you account values\nfrom SIP headers to avoid concurrent access to the shared memory\ntransaction structure, specially when accounting 1xx events. If set to\n0, it uses directly the shared memory structure, be sure you store all\nneeded attributes in AVPs/XAVPs inside request route.\n\nDefault value is 1.\n\n    ...\n    modparam(\"acc\", \"clone_msg\", 0)\n    ...\n\n",
  "cdr_on_failed": "### cdr_on_failed (int)\n\nIf set to 1, the module stores the CDR for a failed dialog (calls not\nanswered). If set to 0, those records are not stored, only those for\nanswered calls.\n\nDefault value is 1.\n\n    ...\n    modparam(\"acc\", \"cdr_on_failed\", 0)\n    ...\n\n",
  "acc_extra_size": "### acc_extra_size (int)\n\nSet the maximum number of extra attributes that can be stored in the\naccounting record (event accounting record). It is related to log_extra\nand db_extra module parameters.\n\nDefault value is 64.\n\n    ...\n    modparam(\"acc\", \"acc_extra_size\", 100)\n    ...\n\n",
  "cdr_extra_size": "### cdr_extra_size (int)\n\nSet the maximum number of extra attributes that can be stored in the\ncall data record (cdr by dialog module). It is related to cdr_extra\nmodule parameter.\n\nDefault value is 64.\n\n    ...\n    modparam(\"acc\", \"cdr_extra_size\", 100)\n    ...\n\n"
 },
 "pua_dialoginfo": {
  "include_callid": "### include_callid (int)\n\nIf this parameter is set, the optional call-id will be put into the\ndialog element. This is needed for call-pickup features.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"include_callid\", 0)\n    ...\n\n",
  "include_tags": "### include_tags (int)\n\nIf this parameter is set, the local and remote tag will be put into the\ndialog element. This is needed for call-pickup features.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"include_tags\", 0)\n    ...\n\n",
  "include_localremote": "### include_localremote (int)\n\nIf this parameter is set, the optional local and remote elements will be\nput into the dialog element. This is needed for call-pickup features.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"include_localremote\", 0)\n    ...\n\n",
  "override_lifetime": "### override_lifetime (int)\n\nThe PUBLISH requests used to send the dialog-info contain an Expires\nheader. The value of the expires is usually taken from the lifetime of\nthe dialog (see README of dialog module). If the override_lifetime is\nset, the value specified here is used instead of the lifetime of the\ndialog module. If used, the value should at least be a few seconds more\nthan the fr_inv_timer of the tm module.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"override_lifetime\", 300)\n    ...\n\n",
  "include_req_uri": "### include_req_uri (int)\n\ncontrols if R-URI is going to be used instead of To header value in the\nPUBLISH as \"identity\" on \"remote\" node.\n\n*Default value is \u201c0\u201d. Disabled*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"include_req_uri\", 1)\n    ...\n\n",
  "caller_confirmed": "### caller_confirmed (int)\n\nUsually the dialog-info of the caller will be \"trying -\\> early -\\>\nconfirmed\" and the dialog-info of the callee will be \"early -\\>\nconfirmed\". On some phones the function LED will start blinking if the\nstate is early, regardless if is is the caller or the callee (indicated\nwith the \"direction\" parameter). To avoid blinking LEDs for the caller,\nyou can enable this parameter. Then the state of the caller will be\nsignaled as \"confirmed\" even in \"early\" state. This is a workaround for\nthe buggy Linksys SPA962 phones. SNOM phones work well with the default\nsetting.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"caller_confirmed\", 1)\n    ...\n\n",
  "send_publish_flag": "### send_publish_flag (int)\n\nThis message flag indicates whether to send PUBLISH requests or not. If\nnot set, PUBLISH requests are sent out only if their R-URI is local\n(according to myself).\n\n*Default value is \u201c-1\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"send_publish_flag\", 8)\n    ...\n\n",
  "disable_caller_publish_flag": "### disable_caller_publish_flag (int)\n\nThis message flag indicates whether to send caller (initiator) PUBLISH\nrequests or not. If set, PUBLISH requests are not sent for the caller\n(initiator).\n\n*Default value is \u201c-1\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"disable_caller_publish_flag\", 9)\n    ...\n\n",
  "disable_callee_publish_flag": "### disable_callee_publish_flag (int)\n\nThis message flag indicates whether to send callee (recipient) PUBLISH\nrequests or not. If set, PUBLISH requests are not sent for the callee\n(recipient).\n\n*Default value is \u201c-1\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"disable_callee_publish_flag\", 10)\n    ...\n\n",
  "use_pubruri_avps": "### use_pubruri_avps (int)\n\nGet Publish R-Uri from avps (see corresponding avp params), not from\nrequest to/from uri.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"use_pubruri_avps\", 1)\n    ...\n\n",
  "refresh_pubruri_avps_flag": "### refresh_pubruri_avps_flag (int)\n\nIf use_pubruri_avps is enabled, this message flag indicates whether to\nrefresh R-Uri from avps before sending the PUBLISH requests.\n\n*Default value is \u201c-1\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"refresh_pubruri_avps_flag\", 11)\n    ...\n\n",
  "pubruri_caller_avp": "### pubruri_caller_avp (str)\n\nIf use_pubruri_avps is enabled, PUBLISH-requests reporting\ndialog-information about the caller (entity=caller) are sent using the\nvalue of the specified avp as R-Uri. If multiple AVPs with the same name\n(but different indexes) are present, for each value a corresponding\nPUBLISH-request is generated. If no AVP with the specified name exists,\nno caller-related PUBLISH requests are sent.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"pubruri_caller_avp\", \"$avp(s:puburis_caller)\")\n    ...\n\n",
  "pubruri_callee_avp": "### pubruri_callee_avp (str)\n\nIf use_pubruri_avps is enabled, PUBLISH-requests reporting\ndialog-information about the callee (entity=callee) are sent using the\nvalue of the specified avp as R-Uri. If multiple AVPs with the same name\n(but different indexes) are present, for each value a corresponding\nPUBLISH-request is generated. If no AVP with the specified name exists,\nno callee-related PUBLISH requests are sent.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"pubruri_callee_avp\", \"$avp(s:puburis_callee)\")\n    ...\n\n",
  "pubruri_caller_dlg_var": "### pubruri_caller_dlg_var (str)\n\nMust be set to the name of dialog variable where to store the URI for\ncaller, used to send the notifications. This is needed to restored the\nvalue after Kamailio restart. If not set, loaded dialogs at restart are\nno longer sending notifications. New dialogs are working fine.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"pubruri_caller_dlg_var\", \"pubruri_caller\")\n    ...\n\n",
  "pubruri_callee_dlg_var": "### pubruri_callee_dlg_var (str)\n\nMust be set to the name of dialog variable where to store the URI for\ncallee, used to send the notifications. This is needed to restored the\nvalue after Kamailio restart. If not set, loaded dialogs at restart are\nno longer sending notifications. New dialogs are working fine.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"pubruri_callee_dlg_var\", \"pubruri_callee\")\n    ...\n\n",
  "callee_trying": "### callee_trying (int)\n\nIf this parameter is set, a \"Trying\" state will be sent for both the\ncaller and callee, rather than just the caller.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"callee_trying\", 1)\n    ...\n\n",
  "caller_entity_when_publish_disabled": "### caller_entity_when_publish_disabled (int)\n\nMust be a valid sip uri. If this parameter is set, this uri is used as\ncaller entity in publish xml body if associated dialog has the flag\ndisable_caller_publish_flag set. Note only the flag received on dialog\ncreation is used to activate this feature.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"caller_entity_when_publish_disabled\", \"sip:caller@publish.disabled.com\")\n    ...\n                \n\n",
  "callee_entity_when_publish_disabled": "### callee_entity_when_publish_disabled (int)\n\nMust be a valid sip uri. If this parameter is set, this uri is used as\ncallee entity in publish xml body if associated dialog has the flag\ndisable_callee_publish_flag set. Note only the flag received on dialog\ncreation is used to activate this feature.\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"callee_entity_when_publish_disabled\", \"sip:callee@publish.disabled.com\")\n    ...\n                \n\n",
  "publish_dialog_req_within": "### publish_dialog_req_within (int)\n\nIf this parameter is set to 1, subsequents requests received in dialog\ngenerate corresponding publish request.\n\n*Default value is \u201c1\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"publish_dialog_req_within\", 0)\n    ...\n                \n\n",
  "local_identity_dlg_var": "### local_identity_dlg_var (str)\n\nPUBLISH-requests reporting dialog-information will use the value of the\ndialog variable if exists\n\n*Default value is \u201cNULL\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"local_identity_dlg_var\", \"local_identity\")\n    ...\n\n",
  "attribute_display": "### attribute_display (int)\n\nIf set to 1, the display name attribute is added with user part of the\nURI for local and remote targets.\n\n*Default value is \u201c0\u201d.*\n\n    ...\n    modparam(\"pua_dialoginfo\", \"attribute_display\", 1)\n    ...\n\n"
 }
}
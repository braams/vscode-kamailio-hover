{
 "include_file": "### include_file\n\n```\n    include_file \"path_to_file\"\n```\n\nInclude the content of the file in config before parsing. path_to_file\nmust be a static string. Including file operation is done at startup. If\nyou change the content of included file, you have to restart the SIP\nserver to become effective.\n\nThe path_to_file can be relative or absolute. If it is not absolute\npath, first attempt is to locate it relative to current directory, and\nif fails, relative to directory of the file that includes it. There is\nno restriction where include can be used or what can contain - any part\nof config file is ok. There is a limit of maximum 10 includes in depth,\notherwise you can use as many includes as you want. Reporting of the cfg\nfile syntax errors prints now the file name for easier troubleshooting.\n\nIf the included file is not found, the config file parser throws error.\nYou can find this error message at the logging destination, usually in\nthe system logging (file).\n\nYou can use also the syntax **#!include_file** or **!!include_file**.\n\nExample of usage:\n\n``` c\nrequest_route {\n    ...\n    include_file \"/etc/kamailio/checks.cfg\"\n    ...\n}\n```\n\n- `/etc/kamailio/checks.cfg`:\n\n```c\n\n   if (!mf_process_maxfwd_header(\"10\")) {\n       sl_send_reply(\"483\",\"Too Many Hops\");\n       exit;\n   }\n```\n\n",
 "import_file": "### import_file\n\n```\n    import_file \"path_to_file\"\n```\n\nSimilar to `include_file`, but does not throw error if the included\nfile is not found.\n\n",
 "define": "### define\n\nControl in C-style what parts of the config file are executed. The parts\nin non-defined zones are not loaded, ensuring lower memory usage and\nfaster execution.\n\nAvailable directives:\n\n-   `#!define NAME` - define a keyword\n-   `#!define NAME VALUE` - define a keyword with value\n-   `#!ifdef NAME` - check if a keyword is defined\n-   `#!ifndef` - check if a keyword is not defined\n-   `#!ifexp` - check if an expression is true (see corresponding section for more)\n-   `#!else` - switch to false branch of `ifdef/ifndef/#!ifexp` region\n-   `#!endif` - end `ifdef/ifndef/#!ifexp` region\n-   `#!trydef` - add a define if not already defined\n-   `#!redefine` - force redefinition even if already defined\n\nPredefined keywords:\n\n-   `KAMAILIO_X[_Y[_Z]]` - Kamailio versions\n-   `MOD_X` - when module `X` has been loaded\n-   `KAMAILIO_VERSION` - associated with a number representation of Kamailio\n     version (e.g., for version `X.Y.Z`, the value is `X00Y00Z`, representing\n    `X*1000000 + Y*1000 + z`)\n-   `OS_NAME` - associated with a string representing the Operating System name\n\nExamples:\n\n```\nKAMAILIO_5\nKAMAILIO_5_6\nKAMAILIO_5_6_2\n\nMOD_acc\nMOD_corex\n```\n\nSee `kamctl rpc core.ppdefines_full` for full list.\n\nAmong benefits:\n\n-   easy way to enable/disable features (e.g., see default cfg --\n    controlling support of nat traversal, presence, etc...)\n-   switch control for parts where conditional statements were not\n    possible (e.g., global parameters, module settings)\n-   faster by not using conditional statements inside routing blocks\n    when switching between running environments\n\nExample: how to make config to be used in two environments, say testbed\nand production, controlled just by one define to switch between the two\nmodes:\n\n``` c\n...\n\n#!define TESTBED_MODE\n\n#!ifdef TESTBED_MODE\n  debug=5\n  log_stderror=yes\n  listen=192.168.1.1\n#!else\n  debug=2\n  log_stderror=no\n  listen=10.0.0.1\n#!endif\n\n...\n\n#!ifdef TESTBED_MODE\nmodparam(\"acc|auth_db|usrloc\", \"db_url\",\n    \"mysql://kamailio:kamailiorw@localhost/kamailio_testbed\")\n#!else\nmodparam(\"acc|auth_db|usrloc\", \"db_url\",\n    \"mysql://kamailio:kamailiorw@10.0.0.2/kamailio_production\")\n#!endif\n\n...\n\n#!ifdef TESTBED_MODE\nroute[DEBUG] {\n  xlog(\"SCRIPT: SIP $rm from: $fu to: $ru - srcip: $si\"\\n);\n}\n#!endif\n\n...\n\nrequest_route {\n#!ifdef TESTBED_MODE\n  route(DEBUG);\n#!endif\n\n  ...\n}\n\n...\n```\n\n-   you can define values for IDs\n\n``` c\n#!define MYINT 123\n#!define MYSTR \"xyz\"\n```\n\n-   defined IDs are replaced at startup, during config parsing, e.g.,:\n\n``` c\n$var(x) = 100 + MYINT;\n```\n\n-   is interpreted as:\n\n``` c\n$var(x) = 100 + 123;\n```\n\n-   you can have multi-line defined IDs\n\n``` c\n#!define IDLOOP $var(i) = 0; \\\n                while($var(i)<5) { \\\n                    xlog(\"++++ $var(i)\\n\"); \\\n                    $var(i) = $var(i) + 1; \\\n                }\n```\n\n-   then in routing block\n\n``` c\nrequest_route {\n    ...\n    IDLOOP\n    ...\n}\n```\n\n-   number of allowed defines is now set to 256\n\n<!-- -->\n\n-   notes:\n    -   multilines defines are reduced to single line, so line counter\n        should be fine\n    -   column counter goes inside the define value, but you have to\n        omit the `\\` and `CR` for the accurate inside-define position\n    -   text on the same line as the directive will cause problems. Keep\n        the directive lines clean and only comment on a line before or\n        after.\n\n",
 "ifexp": "### ifexp\n\nEvaluate an expression and if true, then enable first region, otherwise\nenable the `#!else` region (if it exists).\n\nThe expression has to be till the end of the line (no support for multi-line yet).\n\nThe evaluation is done using `snexpr` (which is embedded inside Kamailio code):\n\n- [https://github.com/miconda/snexpr](https://github.com/miconda/snexpr)\n\nDefined IDs can be used inside expressions with the following characteristics:\n\n- if there is an associated value, then the value is used as a string, with the\nenclosing quotes being removed\n- if there is no associated value, but the ID is defined, then the value `1`\n(integer) is used (equivalent of `true`)\n- if the ID is not defined, then the value `0` is used (equivalent of `false`)\n\nThe result of an expression is evaluated to:\n\n- `true` if it is a number different than `0`\n- `false` if it is number `0`\n- `true` if it is a string with length greater than `0`\n- `false` if it is an empty string (length is `0`)\n\nComparison operations between two strings are done using `strcmp(s1, s2)` and\nit is considered:\n\n- `s1 < s2` -  if the result of `strcmp(s1, s2)` is negative\n- `s1 == s2` -  if the result of `strcmp(s1, s2)` is `0`\n- `s1 > s2` -  if the result of `strcmp(s1, s2)` is positive\n\nOperations between two values with different types are done by converting\nthe second value (right operand) to the type of the first value (left operand).\n\nExamples:\n\n```\n1 + \"20\" -> converted to: 1 + 20 (result: 21)\n```\n\n```\n\"1\" + 20 -> converted to: \"1\" + \"20\" (result: \"120\")\n```\n\n```\n4 > \"20\" -> converted to: 4 > 20 (result: false)\n```\n\n```\n\"4\" > 20 -> converted to: \"4\" > \"20\" (result: true)\n```\n\n",
 "defexp": "### defexp\n\nPreprocessor directive to define an ID to the value of an expression.\n\n``` c\n#!defenv ID STM\n```\n\nThe evaluation of `STM` is done using `snexpr`, see the section for `#!ifexp`\nfor more details about how the expression can be built, what data types and\noperators are supported.\n\nExamples:\n\n```\n#!define IPADDR 127.0.0.1\n\n#!defexp SIPURI \"sip:\" + IPADDR + \":5060\"\n#!defexp QSIPURI '\"sip:' + IPADDR + ':5060\"'\n\n#!defexp V16 1<<4\n```\n\n",
 "defexps": "### defexps\n\nPreprocessor directive similar to `#!defexp`, but the the result being enclosed\nin double quotes, suitable to be used for string values.\n\n",
 "defenv": "### defenv\n\nPreprocessor directive to define an ID to the value of an environment\nvariable with the name ENVVAR.\n\n``` c\n#!defenv ID=ENVVAR\n```\n\nIt can also be just **$!defenv ENVVAR** and the defined ID is the ENVVAR\nname.\n\nExample:\n\n``` c\n#!defenv SHELL\n```\n\nIf environment variable $SHELL is '/bin/bash', then it is like:\n\n``` c\n#!define SHELL /bin/bash\n```\n\nFull expression variant:\n\n``` c\n#!defenv ENVSHELL=SHELL\n```\n\nThen it is like:\n\n``` c\n#!define ENVSHELL /bin/bash\n```\n\nIt is a simplified alternative of using **#!substdef** with\n**$env(NAME)** in the replacement part.\n\n",
 "defenvs": "### defenvs\n\nSimilar to **#!defenv**, but the value is defined in between double\nquotes to make it convenient to be used as a string token.\n\n``` c\n#!defenvs ENVVAR\n#!defenvs ID=ENVVAR\n```\n\n",
 "trydefenv": "### trydefenv\n\n``` c\n#!trydefenv ID=ENVVAR\n```\n\nSimilar to **defenv**, but will not error if the environmental variable\nis not set. This allows for boolean defines via system ENVVARs. For\nexample, using an environmental variable to toggle loading of db_mysql:\n\n``` c\n#!trydefenv WITH_MYSQL\n\n#!ifdef WITH_MYSQL\nloadmodule \"db_mysql.so\"\n#!ifdef\n```\n\n",
 "trydefenvns": "### trydefenvns\n\nSimilar to **#!trydefenv**, but the value is defined in between double\nquotes to make it convenient to be used as a string token.\n\n``` c\n#!trydefenvs ENVVAR\n#!trydefenvs ID=ENVVAR\n```\n\n",
 "subst": "### subst\n\n-   perform substitutions inside the strings of config (note that define\n    is replacing only IDs - alphanumeric tokens not enclosed in quotes)\n-   `#!subst` offers an easy way to search and replace inside strings\n    before cfg parsing. E.g.,:\n\n``` c\n#!subst \"/regexp/subst/flags\"\n```\n\n-   flags is optional and can be: 'i' - ignore case; 'g' - global\n    replacement\n\nExample:\n\n``` c\n#!subst \"/DBPASSWD/xyz/\"\nmodparam(\"acc\", \"db_url\", \"mysql://user:DBPASSWD@localhost/db\")\n```\n\n-   will do the substitution of db password in db_url parameter value\n\n",
 "substdef": "### substdef\n\n``` c\n#!substdef \"/ID/subst/\"\n```\n\nSimilar to `#!subst`, but in addition it adds a `#!define ID subst`.\n\n",
 "substdefs": "### substdefs\n\n``` c\n#!substdefs \"/ID/subst/\"\n```\n\nSimilar to `#!subst`, but in addition it adds a `#!define ID \"subst\"`\n(note the difference from `#!substdef` that the value for define is\nenclosed in double quotes, useful when the define is used in a place for\na string value).\n\n",
 "af": "### af\n\nThe address family of the received SIP message. It is INET if the\nmessage was received over IPv4 or INET6 if the message was received over\nIPv6.\n\nExampe of usage:\n\n``` c\n    if (af==INET6) {\n        log(\"Message received over IPv6 link\\n\");\n    }\n```\n\n",
 "dst_ip": "### dst_ip\n\nThe IP of the local interface where the SIP message was received. When\nthe proxy listens on many network interfaces, makes possible to detect\nwhich was the one that received the packet.\n\nExample of usage:\n\n``` c\n   if(dst_ip==127.0.0.1) {\n      log(\"message received on loopback interface\\n\");\n   };\n```\n\n",
 "dst_port": "### dst_port\n\nThe local port where the SIP packet was received. When Kamailio is\nlistening on many ports, it is useful to learn which was the one that\nreceived the SIP packet.\n\nExample of usage:\n\n``` c\n   if(dst_port==5061)\n   {\n       log(\"message was received on port 5061\\n\");\n   };\n```\n\n",
 "from_uri": "### from_uri\n\nThis script variable is a reference to the URI of 'From' header. It can\nbe used to test 'From'- header URI value.\n\nExample of usage:\n\n``` c\n    if(is_method(\"INVITE\") && from_uri=~\".*@kamailio.org\")\n    {\n        log(\"the caller is from kamailio.org\\n\");\n    };\n```\n\n",
 "method": "### method\n\nThe variable is a reference to the SIP method of the message.\n\nExample of usage:\n\n``` c\n    if(method==\"REGISTER\")\n    {\n       log(\"this SIP request is a REGISTER message\\n\");\n    };\n```\n\n",
 "msg": "### msg:len\n\nThe variable is a reference to the size of the message. It can be used\nin 'if' constructs to test message's size.\n\nExample of usage:\n\n``` c\n    if(msg:len>2048)\n    {\n        sl_send_reply(\"413\", \"message too large\");\n        exit;\n    };\n```\n\n.\n\n",
 "proto": "### proto\n\nThis variable can be used to test the transport protocol of the SIP\nmessage.\n\nExample of usage:\n\n``` c\n    if(proto==UDP)\n    {\n        log(\"SIP message received over UDP\\n\");\n    };\n```\n\n",
 "status": "### status\n\nIf used in onreply_route, this variable is a referece to the status code\nof the reply. If it used in a standard route block, the variable is a\nreference to the status of the last reply sent out for the current\nrequest.\n\nExample of usage:\n\n``` c\n    if(status==\"200\")\n    {\n        log(\"this is a 200 OK reply\\n\");\n    };\n```\n\n",
 "snd_af": "### snd_af\n\n",
 "snd_ip": "### snd_ip\n\n",
 "snd_port": "### snd_port\n\n",
 "snd_proto": "### snd_proto\n\n",
 "src_ip": "### src_ip\n\nReference to source IP address of the SIP message.\n\nExample of usage:\n\n``` c\n    if(src_ip==127.0.0.1)\n    {\n        log(\"the message was sent from localhost!\\n\");\n    };\n```\n\n",
 "src_port": "### src_port\n\nReference to source port of the SIP message (from which port the message\nwas sent by previous hop).\n\nExample of usage:\n\n``` c\n    if(src_port==5061)\n    {\n        log(\"message sent from port 5061\\n\");\n    }\n```\n\n",
 "to_ip": "### to_ip\n\n",
 "to_port": "### to_port\n\n",
 "to_uri": "### to_uri\n\nThis variable can be used to test the value of URI from To header.\n\nExample of usage:\n\n``` c\n  if(to_uri=~\"sip:.+@kamailio.org\")\n  {\n      log(\"this is a request for kamailio.org users\\n\");\n  };\n```\n\n",
 "uri": "### uri\n\nThis variable can be used to test the value of the request URI.\n\nExample of usage:\n\n``` c\n    if(uri=~\"sip:.+@kamailio.org\")\n    {\n        log(\"this is a request for kamailio.org users\\n\");\n    };\n```\n\n",
 "max_len": "### max_len\n\nNote: This command was removed.\n\n",
 "myself": "### myself\n\nThis is a reference to the list of local IP addresses, hostnames and\naliases that has been set in the Kamailio configuration file. This lists\ncontain the domains served by Kamailio.\n\nThe variable can be used to test if the host part of an URI is in the\nlist. The usefulness of this test is to select the messages that has to\nbe processed locally or has to be forwarded to another server.\n\nSee \"alias\" to add hostnames, IP addresses and aliases to the list.\n\nExample of usage:\n\n``` c\n    if(uri==myself) {\n        log(\"the request is for local processing\\n\");\n    };\n```\n\nNote: You can also use the is_myself() function.\n\n",
 "advertised_address": "### advertised_address\n\nIt can be an IP address or string and represents the address advertised\nin Via header. If empty or not set (default value) the socket address\nfrom where the request will be sent is used.\n\n    WARNING: \n    - don't set it unless you know what you are doing (e.g. nat traversal)\n    - you can set anything here, no check is made (e.g. foo.bar will be accepted even if foo.bar doesn't exist)\n\nExample of usage:\n\n```\n      advertised_address=\"\u200b1.2.3.4\"\u200b\n      advertised_address=\"kamailio.org\"\n```\n\nNote: this option may be deprecated and removed in the near future, it\nis recommended to set **advertise** option for **listen** parameter.\n\n",
 "advertised_port": "### advertised_port\n\nThe port advertised in Via header. If empty or not set (default value)\nthe port from where the message will be sent is used. Same warnings as\nfor 'advertised_address'.\n\nExample of usage:\n\n```\n      advertised_port=5080\n```\n\nNote: this option may be deprecated and removed in the near future, it\nis recommended to set **advertise** option for **listen** parameter.\n\n",
 "alias": "### alias\n\n**Alias name: domain**\n\nParameter to set alias hostnames for the server. It can be set many\ntimes, each value being added in a list to match the hostname when\n'myself' is checked.\n\nIt is necessary to include the port (the port value used in the \"port=\"\nor \"listen=\" defintions) in the alias definition otherwise the\nloose_route() function will not work as expected for local forwards.\nEven if you do not use 'myself' explicitly (for example if you use the\ndomain module), it is often necessary to set the alias as these aliases\nare used by the loose_routing function and might be needed to handle\nrequests with pre-loaded route set correctly.\n\nExample of usage:\n\n```\n    alias=other.domain.com:5060\n    alias=another.domain.com:5060\n\n    domain=new.domain.com:5060\n```\n\nNote: the hostname has to be enclosed in between quotes if it has\nreserved tokens such as **forward**, **drop** ... or operators such as\n**-** (minus) ...\n\n",
 "async_workers": "### async_workers\n\nSpecify how many child processes (workers) to create for asynchronous\nexecution in the group \"default\". These are processes that can receive\ntasks from various components (e.g, modules such as async, acc, sqlops)\nand execute them locally, which is different process than the task\nsender.\n\nDefault: 0 (asynchronous framework is disabled).\n\nExample:\n\n```\n    async_workers=4\n```\n\n",
 "async_nonblock": "### async_nonblock\n\nSet the non-block mode for the internal sockets used by default group of\nasync workers.\n\nDefault: `0`\n\nExample:\n\n```\n    async_nonblock=1\n```\n\n",
 "async_usleep": "### async_usleep\n\nSet the number of microseconds to sleep before trying to receive next\ntask (can be useful when async_nonblock=1).\n\nDefault: `0`\n\nExample:\n\n```\n    async_usleep=100\n```\n\n",
 "async_workers_group": "### async_workers_group\n\nDefine groups of asynchronous worker processes.\n\nPrototype:\n\n```\n    async_workers_group=\"name=X;workers=N;nonblock=[0|1];usleep=M\"\n```\n\nThe attributes are:\n\n-   **name** - the group name (used by functions such as\n    **sworker_task(name)**)\n-   **workers** - the number of processes to create for this group\n-   **nonblock** - set or not set the non-block flag for internal\n    communication socket\n-   **usleep** - the number of microseconds to sleep before trying to\n    receive next task (can be useful if nonblock=1)\n\nDefault: \"\".\n\nExample:\n\n```\n    async_workers_group=\"name=reg;workers=4;nonblock=0;usleep=0\"\n```\n\nIf the **name** is default, then it overwrites the value set by\n**async_workers**.\n\nSee also **event_route\\[core:pre-routing\\]** and **sworker** module.\n\n",
 "auto_aliases": "### auto_aliases\n\n**Alias name: auto_domains**\n\nKamailio by default discovers all IPv4 addresses on all interfaces and\ndoes a reverse DNS lookup on these addresses to find host names.\nDiscovered host names are added to aliases list, matching the **myself**\ncondition. To disable host names auto-discovery, turn off auto_aliases.\n\nExample:\n\n```\n    auto_aliases=no\n\n    auto_domains=no\n```\n\n",
 "auto_bind_ipv": "### auto_bind_ipv6\n\nWhen turned on, Kamailio will automatically bind to all IPv6 addresses\n(much like the default behaviour for IPv4). Default is 0.\n\nExample:\n\n```\n    auto_bind_ipv6=1\n```\n\n",
 "bind_ipv": "### bind_ipv6_link_local\n\nIf set to 1, try to bind also IPv6 link local addresses by discovering\nthe scope of the interface. This apply for UDP socket for now, to be\nadded for the other protocols. Default is 0.\n\nExample:\n\n```\n    bind_ipv6_link_local=1\n```\n\n",
 "check_via": "### check_via\n\nCheck if the address in top most via of replies is local. Default value\nis 0 (check disabled).\n\nExample of usage:\n\n```\n      check_via=1 \n```\n\n",
 "children": "### children\n\nNumber of children to fork for the UDP interfaces (one set for each\ninterface - ip:port). Default value is 8. For example if you configure\nthe proxy to listen on 3 UDP ports, it will create 3xchildren processes\nwhich handle the incoming UDP messages.\n\nFor configuration of the TCP/TLS worker threads see the option\n\"tcp_children\".\n\nExample of usage:\n\n```\n    children=16\n```\n\n",
 "chroot": "### chroot\n\nThe value must be a valid path in the system. If set, Kamailio will\nchroot (change root directory) to its value.\n\nExample of usage:\n\n```\n    chroot=/other/fakeroot\n```\n\n",
 "corelog": "### corelog\n\nSet the debug level used to print some log messages from core, which\nmight become annoying and don't represent critical errors. For example,\nsuch case is failure to parse incoming traffic from the network as SIP\nmessage, due to someone sending invalid content.\n\nDefault value is `-1` (`L_ERR`).\n\nExample of usage:\n\n```\n    corelog=1\n```\n\n",
 "debug": "### debug\n\nSet the debug level. Higher values make Kamailio to print more debug\nmessages. Log messages are usually sent to syslog, except if logging to\nstderr was activated (see [#log_stderror](#log_stderror) parameter).\n\nThe following log levels are defined:\n\n```\n     L_ALERT     -5\n     L_BUG       -4\n     L_CRIT2     -3\n     L_CRIT      -2\n     L_ERR       -1\n     L_WARN       0 \n     L_NOTICE     1 \n     L_INFO       2 \n     L_DBG        3 \n```\n\nA log message will be logged if its log-level is lower than the defined\ndebug level. Log messages are either produced by the the code, or\nmanually in the configuration script using log() or xlog() functions.\nFor a production server you usually use a log value between -1 and 2.\n\nDefault value: `L_WARN` (`debug=0`)\n\nExamples of usage:\n\n-   debug=3: print all log messages. This is only useful for debugging\n    of problems. Note: this produces a lot of data and therefore should\n    not be used on production servers (on a busy server this can easily\n    fill up your hard disk with log messages)\n-   debug=0: This will only log warning, errors and more critical\n    messages.\n-   debug=-6: This will disable all log messages.\n\nValue of 'debug' parameter can also be get and set dynamically using the\n'debug' Core MI function or the RPC function, e.g.:\n\n```\n    kamcmd cfg.get core debug\n    kamcmd cfg.set_now_int core debug 2\n    kamcmd cfg.set_now_int core debug -- -1\n```\n\nNote: There is a difference in log-levels between Kamailio 3.x and\nKamailio\\<=1.5: Up to Kamailio 1.5 the log level started with 4, whereas\nin Kamailio>=3 the log level starts with 3. Thus, if you were using\ndebug=3 in older Kamailio, now use debug=2.\n\nFor configuration of logging of the memory manager see the parameters\n[#memlog](#memlog) and [#memdbg](#memdbg).\n\nFurther information can also be found at:\n\n  - [https://www.kamailio.org/wiki/tutorials/3.2.x/syslog](https://www.kamailio.org/wiki/tutorials/3.2.x/syslog)\n\n",
 "description": "### description\n\n**Alias name: descr desc**\n\n",
 "disable_core_dump": "### disable_core_dump\n\nCan be 'yes' or 'no'. By default core dump limits are set to unlimited\nor a high enough value. Set this config variable to 'yes' to disable\ncore dump-ing (will set core limits to 0).\n\nDefault value is `no`.\n\nExample of usage:\n\n```\n    disable_core_dump=yes\n```\n\n",
 "disable_tls": "### disable_tls\n\n**Alias name: tls_disable**\n\nGlobal parameter to disable TLS support in the SIP server. Default value\nis 'yes'.\n\nNote: Make sure to load the \"tls\" module to get tls functionality.\n\nExample of usage:\n\n```\n    disable_tls=yes\n```\n\nIn Kamailio TLS is implemented as a module. Thus, the TLS configuration\nis done as module configuration. For more details see the README of the\nTLS module: <http://kamailio.org/docs/modules/devel/modules/tls.html>\n\n",
 "enable_tls": "### enable_tls\n\n**Alias name: tls_enable**\n\nReverse Meaning of the disable_tls parameter. See disable_tls parameter.\n\n```\n    enable_tls=yes # enable tls support in core\n```\n\n",
 "exit_timeout": "### exit_timeout\n\n**Alias name: ser_kill_timeout**\n\nHow much time Kamailio will wait for all the shutdown procedures to\ncomplete. If this time is exceeded, all the remaining processes are\nimmediately killed and Kamailio exits immediately (it might also\ngenerate a core dump if the cleanup part takes too long).\n\nDefault: 60 s. Use 0 to disable.\n\n```\n     exit_timeout = seconds\n```\n\n",
 "flags": "### flags\n\nSIP message (transaction) flags can have string names. The *name* for\nflags cannot be used for **branch** or **script flags**(\\*)\n\n``` c\n...\nflags\n  FLAG_ONE   : 1,\n  FLAG_TWO   : 2;\n...\n```\n\n- NOTE: The named flags feature was propagated from the source code merge\n  back in 2008 and is not extensively tested. The recommended way of\n  defining flags is using [#!define](../cookbooks/5.2.x/core#define.md) (which\n  is also valid for branch/script flags):\n\n``` c\n#!define FLAG_NAME FLAG_BIT\n```\n\n",
 "force_rport": "### force_rport\n\nyes/no: Similar to the force_rport() function, but activates symmetric\nresponse routing globally.\n\n### force_rport\n\nThe `force_rport()` adds the rport parameter to the first Via header of the\nreceived message. Thus, Kamailio will add the received port to the top\nmost Via header in the SIP message, even if the client does not indicate\nsupport for rport. This enables subsequent SIP messages to return to the\nproper port later on in a SIP transaction.\n\nThis is useful for NAT traversal, to enforce symmetric response\nsignaling.\n\nThe rport parameter is defined in RFC 3581.\n\nNote: there is also a force_rport parameter which changes the global\nbehavior of the SIP proxy.\n\nExample of usage:\n\n```\n    force_rport();\n```\n\n",
 "fork": "### fork\n\nIf set to 'yes' the proxy will fork and run in daemon mode - one process\nwill be created for each network interface the proxy listens to and for\neach protocol (TCP/UDP), multiplied with the value of 'children'\nparameter.\n\nWhen set to 'no', the proxy will stay bound to the terminal and runs as\nsingle process. First interface is used for listening to. This is\nequivalent to setting the server option \"-F\".\n\nDefault value is 'yes'.\n\nExample of usage:\n\n```\n    fork=no\n```\n\n",
 "fork_delay": "### fork_delay\n\nNumber of usecs to wait before forking a process.\n\nDefault is 0 (don't wait).\n\nExample of usage:\n\n``` c\nfork_delay=5000\n```\n\n",
 "group": "### group\n\n**Alias name: gid**\n\nThe group id to run Kamailio.\n\nExample of usage:\n\n```\n    group=\"kamailio\"\n```\n\n",
 "http_reply_parse": "### http_reply_parse\n\nAlias: http_reply_hack\n\nWhen enabled, Kamailio can parse HTTP replies, but does so by treating\nthem as SIP replies. When not enabled HTTP replies cannot be parsed.\nThis was previously a compile-time option, now it is run-time.\n\nDefault value is 'no'.\n\nExample of usage:\n\n```\n    http_reply_parse=yes\n```\n\n",
 "ip_free_bind": "### ip_free_bind\n\nAlias: ipfreebind, ip_nonlocal_bind\n\nControl if Kamailio should attempt to bind to non local ip. This option\nis the per-socket equivalent of the system **ip_nonlocal_bind**.\n\nDefault is 0 (do not bind to non local ip).\n\nExample of usage:\n\n``` c\n  ip_free_bind = 1\n```\n\n",
 "ipv": "### ipv6_hex_style\n\nCan be set to `a`, `A` or `c` to specify if locally computed string\nrepresentation of IPv6 addresses should be expanded lowercase, expanded\nuppercase or compacted lowercase hexa digits.\n\nDefault is `c` (compacted lower hexa digits, conforming better with RFC\n5952).\n\n`A` is preserving the behaviour before this global parameter was\nintroduced, while `a` enables the ability to follow some of the\nrecommendations of RFC 5952, section 4.3.\n\nExample of usage:\n\n``` c\n  ipv6_hex_style = \"a\"\n```\n\n",
 "kemi": "### kemi.onsend_route_callback\n\nSet the name of callback function in the KEMI script to be executed as\nthe equivalent of `onsend_route` block (from the native configuration\nfile).\n\nDefault value: ksr_onsend_route\n\nSet it to empty string or `none` to skip execution of this callback\nfunction.\n\nExample:\n\n``` c\nkemi.onsend_route_callback=\"ksr_my_onsend_route\"\n```\n\n### kemi.received_route_callback\n\nSet the name of callback function in the KEMI script to be executed as\nthe equivalent of `event_route[core:msg-received]` block (from the\nnative configuration file). For execution, it also require to have the\nreceived_route_mode global parameter set to 1.\n\nDefault value: `none`\n\nSet it to empty string or `none` to skip execution of this callback\nfunction.\n\nExample:\n\n``` c\nkemi.received_route_callback=\"ksr_my_receieved_route\"\n```\n\n### kemi.reply_route_callback\n\nSet the name of callback function in the KEMI script to be executed as\nthe equivalent of `reply_route` block (from the native configuration\nfile).\n\nDefault value: `ksr_reply_route`\n\nSet it to empty string or `none` to skip execution of this callback\nfunction.\n\nExample:\n\n``` c\nkemi.reply_route_callback=\"ksr_my_reply_route\"\n```\n\n### kemi.pre_routing_callback\n\nSet the name of callback function in the KEMI script to be executed as\nthe equivalent of `event_route[core:pre-routing]` block (from the\nnative configuration file).\n\nDefault value: `none`\n\nSet it to empty string or `none` to skip execution of this callback\nfunction.\n\nExample:\n\n``` c\nkemi.pre_routing_callback=\"ksr_pre_routing\"\n```\n\n",
 "latency_cfg_log": "### latency_cfg_log\n\nIf set to a log level less or equal than debug parameter, a log message\nwith the duration in microseconds of executing request route or reply\nroute is printed to syslog.\n\nDefault value is `3` (`L_DBG`).\n\nExample:\n\n``` c\nlatency_cfg_log=2\n```\n\n",
 "latency_limit_action": "### latency_limit_action\n\nLimit of latency in us (micro-seconds) for config actions. If a config\naction executed by cfg interpreter takes longer than its value, a\nmessage is printed in the logs, showing config path, line and action\nname when it is a module function, as well as internal action id.\n\nDefault value is `0` (disabled).\n\n``` c\nlatency_limit_action=`500`\n```\n\n",
 "latency_limit_db": "### latency_limit_db\n\nLimit of latency in us (micro-seconds) for db operations. If a db\noperation executed via DB API v1 takes longer that its value, a message\nis printed in the logs, showing the first 50 characters of the db query.\n\nDefault value is `0` (disabled).\n\n``` c\nlatency_limit_db=`500`\n```\n\n",
 "latency_log": "### latency_log\n\nLog level to print the messages related to latency.\n\nDefault value is `-1` (`L_ERR`).\n\n``` c\nlatency_log=3\n```\n\n",
 "listen": "### listen\n\nSet the network addresses the SIP server should listen to. It can be an\n`IP address`, `hostname` or `network interface id` or combination of\n`protocol:address:port` (e.g., `udp:10.10.10.10:5060`). This parameter can\nbe set multiple times in same configuration file, the server is listening\non all addresses specified.\n\nExample of usage:\n\n``` c\n    listen=10.10.10.10\n    listen=eth1:5062\n    listen=udp:10.10.10.10:5064\n```\n\nIf you omit this directive then the SIP server will listen on all network\ninterfaces. On start the SIP server reports all the interfaces that it\nis listening on. Even if you specify only UDP interfaces here, the\nserver will start the TCP engine too. If you don't want this, you need\nto disable the TCP support completely with the core parameter\n`disable_tcp`.\n\nIf you specify IPv6 addresses, you should put them into square brackets,\ne.g.:\n\n``` c\n    listen=udp:[2a02:1850:1:1::18]:5060\n```\n\nYou can specify an advertise address (like `ip:port`) per listening socket\n- it will be used to build the SIP headers such as Via and Record-Route:\n\n``` c\n    listen=udp:10.10.10.10:5060 advertise 11.11.11.11:5060\n```\n\nThe advertise address must be in the format `address:port`, the protocol is\ntaken from the bind socket. The advertise address is a convenient\nalternative to `advertised_address` / `advertised_port` config parameters or\n`set_advertised_address()` / `set_advertised_port()` config functions.\n\nA typical use case for advertise address is when running SIP server\nbehind a NAT/Firewall, when the local IP address (to be used for bind)\nis different than the public IP address (to be used for advertising).\n\nA unique name can be set for sockets to simplify the selection of the\nsocket for sending out. For example, the rr and path modules can use the\nsocket name to advertise it in header URI parameter and use it as a\nshortcut to select the corresponding socket for routing subsequent\nrequests.\n\nThe name has to be provided as a string enclosed in between quotes after\nthe `name` keyword.\n\n``` c\n    listen=udp:10.0.0.10:5060 name \"s1\"\n    listen=udp:10.10.10.10:5060 advertise 11.11.11.11:5060 name \"s2\"\n    listen=udp:10.10.10.20:5060 advertise \"mysipdomain.com\" name \"s3\"\n    listen=udp:10.10.10.30:5060 advertise \"mysipdomain.com\" name \"s4\"\n    ...\n    $fsn = \"s4\";\n    t_relay();\n```\n\nNote that there is no internal check for uniqueness of the socket names,\nthe admin has to ensure it in order to be sure the desired socket is\nselected, otherwise the first socket with a matching name is used.\n\nAs of 5.6, there is now a `virtual` keyword which can be added to\nthe end of each listen directive. This can be used in combination with\nany other keyword, but must be added at the end of the line.\n\n``` c\n    listen=udp:10.1.1.1:5060 virtual\n    listen=udp:10.0.0.10:5060 name \"s1\" virtual\n    listen=udp:10.10.10.10:5060 advertise 11.11.11.11:5060 virtual\n    listen=udp:10.10.10.20:5060 advertise \"mysipdomain.com\" name \"s3\" virtual\n```\n\nThe `virtual` keyword is meant for use in situations where you have\na floating/virtual IP address on your system that may not always be\nactive on the system. It is particularly useful for active/active\nvirtual IP situations, where otherwise things like usrloc PATH support\ncan break due to incorrect `check_self` results.\n\nThis identifier will change the behaviour of how `myself`, `is_myself()`\nor `check_self` matches against traffic destined to this IP address. By\ndefault, Kamailio always considers traffic destined to a listen IP as\n`local` regardless of if the IP is currently locally active. With this\nflag set, Kamailio will do an extra check to make sure the IP is\ncurrently a local IP address before considering the traffic as local.\n\nThis means that if Kamailio is listening on an IP that is not currently\nlocal, it will recognise that, and can relay the traffic to another\nKamailio node as needed, instead of thinking it always needs to handle\nthe traffic.\n\n",
 "loadmodule": "### loadmodule\n\nLoads a module for later usage in the configuration script. The modules\nis searched in the path specified by `loadpath` (or `mpath`).\n\nPrototypes:\n\n  - `loadmodule \"modulepath\"`\n  - `loadmodule(\"modulepath\")`\n  - `loadmodule(\"modulepath\", \"opts\")`\n\nIf `modulepath` is only `modulename` or `modulename.so`, then Kamailio will\ntry to search also for `modulename/modulename.so`, very useful when\nusing directly the version compiled in the source tree.\n\nThe `opts` parameter is a list of characters that can specify loading options.\nThey can be:\n\n  - `g` (or `G`) - open the module shared object file with `RTLD_GLOBAL` set,\n  which can be used for modules related to external scripting languages to avoid\n  reloading.\n\nExample of usage:\n\n``` c\n    loadpath \"/usr/local/lib/kamailio/:usr/local/lib/kamailio/modules/\"\n\n    loadmodule \"/usr/local/lib/kamailio/modules/db_mysql.so\"\n    loadmodule \"modules/usrloc.so\"\n    loadmodule \"tm\"\n    loadmodule \"dialplan.so\"\n    loadmodule(\"app_lua.so\", \"g\")\n```\n\n",
 "loadmodulex": "### loadmodulex\n\nSimilar to `loadmodule` with the ability to evaluate variables in its\nparameter.\n\n",
 "loadpath": "### loadpath\n\n**Alias name:** `mpath`\n\nSet the module search path. `loadpath` takes a list of directories\nseparated by `:`. The list is searched in-order. For each directory `d`,\n`$d/${module_name}.so` and `$d/${module_name}/${module_name}.so` are tried.\n\nThis can be used to simplify the loadmodule parameter and can include\nmany paths separated by colon. First module found is used.\n\nExample of usage:\n\n``` c\n    loadpath \"/usr/local/lib/kamailio/modules:/usr/local/lib/kamailio/mymodules\"\n\n    loadmodule \"mysql\"\n    loadmodule \"uri\"\n    loadmodule \"uri_db\"\n    loadmodule \"sl\"\n    loadmodule \"tm\"\n```\n\nThe proxy tries to find the modules in a smart way, e.g: `loadmodule \"uri\"`\ntries to find `uri.so` in the loadpath, but also `uri/uri.so`.\n\n",
 "local_rport": "### local_rport\n\nSimilar to **add_local_rport()** function, but done in a global scope,\nso the function does not have to be executed for each request.\n\nDefault: off\n\nExample:\n\n``` c\nlocal_rport = on\n```\n\n",
 "log_engine_data": "### log_engine_data\n\nSet specific data required by the log engine. See also the\n**log_engine_type**.\n\n``` c\nlog_engine_type=\"udp\"\nlog_engine_data=\"127.0.0.1:9\"\n```\n\n",
 "log_engine_type": "### log_engine_type\n\nSpecify what logging engine to be used and its initialization data. A\nlogging engine is implemented as a module. Supported values are a matter\nof the module.\n\nFor example, see the readme of **log_custom** module for more details.\n\n``` c\nlog_engine_type=\"udp\"\nlog_engine_data=\"127.0.0.1:9\"\n```\n\n",
 "log_facility": "### log_facility\n\nIf Kamailio logs to syslog, you can control the facility for logging.\nVery useful when you want to divert all Kamailio logs to a different log\nfile. See the man page syslog(3) for more details.\n\nFor more see:\n\n- [https://www.kamailio.org/dokuwiki/doku.php/tutorials:debug-syslog-messages](https://www.kamailio.org/dokuwiki/doku.php/tutorials:debug-syslog-messages)\n\nDefault value is LOG_DAEMON.\n\nExample of usage:\n\n```\n    log_facility=LOG_LOCAL0\n```\n\n",
 "log_name": "### log_name\n\nAllows to configure a log_name prefix which will be used when printing\nto syslog -- it is also known as syslog tag, and the default value is\nthe application name or full path that printed the log message. This is\nuseful to filter log messages when running many instances of Kamailio on\nsame server.\n\n```\n    log_name=\"kamailio-proxy-5080\"\n```\n\n",
 "log_prefix": "### log_prefix\n\nSpecify the text to be prefixed to the log messages printed by Kamailio\nwhile processing a SIP message (that is, when executing route blocks).\nIt can contain script variables that are evaluated at runtime. See\n[#log_prefix_mode](#log_prefix_mode) about when/how evaluation is done.\n\nIf a log message is printed from a part of the code executed out of\nrouting blocks actions (e.g., can be timer, evapi worker process, ...),\nthere is no log prefix set, because this one requires a valid SIP\nmessage structure to work with.\n\nExample - prefix with message type (1 - request, 2 - response), CSeq and\nCall-ID:\n\n```\n    log_prefix=\"{$mt $hdr(CSeq) $ci} \"\n```\n\n",
 "log_prefix_mode": "### log_prefix_mode\n\nControl if [log prefix](#log_prefix) is re-evaluated.\n\nIf set to 0 (default), then log prefix is evaluated when the sip message\nis received and then reused (recommended if the **log_prefix** has only\nvariables that have same value for same message). This is the current\nbehaviour of **log_prefix** evaluation.\n\nIf set to 1, then the log prefix is evaluated before/after each config\naction (needs to be set when the **log_prefix** has variables that are\ndifferent based on the context of config execution, e.g., $cfg(line)).\n\nExample:\n\n```\n    log_prefix_mode=1\n```\n\n",
 "log_stderror": "### log_stderror\n\nWith this parameter you can make Kamailio to write log and debug\nmessages to standard error. Possible values are:\n\n- `yes` - write the messages to standard error\n- `no` - write the messages to syslog\n\nDefault value is `no`.\n\nFor more see:\n\n - [https://www.kamailio.org/dokuwiki/doku.php/tutorials:debug-syslog-messages](https://www.kamailio.org/dokuwiki/doku.php/tutorials:debug-syslog-messages)\n\nExample of usage:\n\n```\n    log_stderror=yes\n```\n\n",
 "cfgengine": "### cfgengine\n\nSet the config interpreter engine for execution of the routing logic\ninside the configuration file. Default is the native interpreter.\n\nExample of usage:\n\n```\n    cfgengine=\"name\"\n    cfgengine \"name\"\n```\n\nIf name is `native` or `default`, it expects to have in native config\ninterpreter for routing logic.\n\nThe name can be the identifier of an embedded language interpreter, such\nas `lua` which is registered by the `app_lua` module:\n\n```\n    cfgengine \"lua\"\n```\n\n",
 "maxbuffer": "### maxbuffer\n\nThe size in bytes not to be exceeded during the auto-probing procedure\nof discovering and increasing the maximum OS buffer size for receiving\nUDP messages (socket option SO_RCVBUF). Default value is 262144.\n\nExample of usage:\n\n```\n    maxbuffer=65536\n```\n\nNote: it is not the size of the internal SIP message receive buffer.\n\n",
 "max_branches": "### max_branches\n\nThe maximum number of outgoing branches for each SIP request. It has\nimpact on the size of destination set created in core (e.g., via\nappend_branch()) as well as the serial and parallel forking done via tm\nmodule. It replaces the old defined constant MAX_BRANCHES.\n\nThe value has to be at least 1 and the upper limit is 31.\n\nDefault value: 12\n\nExample of usage:\n\n```\n    max_branches=16\n```\n\n",
 "max_recursive_level": "### max_recursive_level\n\nThe parameters set the value of maximum recursive calls to blocks of\nactions, such as sub-routes or chained IF-ELSE (for the ELSE branches).\nDefault is 256.\n\nExample of usage:\n\n```\n    max_recursive_level=500\n```\n\n",
 "max_while_loops": "### max_while_loops\n\nThe parameters set the value of maximum loops that can be done within a\n\"while\". Comes as a protection to avoid infinite loops in config file\nexecution. Default is 100. Setting to 0 disables the protection (you\nwill still get a warning when you start Kamailio if you do something\nlike while(1) {...}).\n\nExample of usage:\n\n```\n    max_while_loops=200\n```\n\n",
 "mcast": "### mcast\n\nThis parameter can be used to set the interface that should join the\nmulticast group. This is useful if you want to **listen** on a multicast\naddress and don't want to depend on the kernel routing table for\nchoosing an interface.\n\nThe parameter is reset after each **listen** parameter, so you can join\nthe right multicast group on each interface without having to modify\nkernel routing beforehand.\n\nExample of usage:\n\n```\n    mcast=\"eth1\"\n    listen=udp:224.0.1.75:5060\n```\n\n",
 "mcast_loopback": "### mcast_loopback\n\nIt can be 'yes' or 'no'. If set to 'yes', multicast datagram are sent\nover loopback. Default value is 'no'.\n\nExample of usage:\n\n```\n    mcast_loopback=yes\n```\n\n",
 "mcast_ttl": "### mcast_ttl\n\nSet the value for multicast ttl. Default value is OS specific (usually\n1).\n\nExample of usage:\n\n```\n    mcast_ttl=32\n```\n\n",
 "memdbg": "### memdbg\n\n**Alias name:** `mem_dbg`\n\nThis parameter specifies on which log level the memory debugger messages\nwill be logged. If memdbg is active, every request (alloc, free) to the\nmemory manager will be logged. (Note: if compile option NO_DEBUG is\nspecified, there will never be logging from the memory manager).\n\nDefault value: L_DBG (memdbg=3)\n\nFor example, memdbg=2 means that memory debugging is activated if the\ndebug level is 2 or higher.\n\n```\n    debug=3    # no memory debugging as debug level \n    memdbg=4   # is lower than memdbg\n\n    debug=3    # memory debugging is active as the debug level \n    memdbg=2   # is higher or equal memdbg\n```\n\nPlease see also [#memlog](#memlog) and [#debug](#debug).\n\n",
 "memlog": "### memlog\n\n**Alias name:** `mem_log`\n\nThis parameter specifies on which log level the memory statistics will\nbe logged. If memlog is active, Kamailio will log memory statistics on\nshutdown (or if requested via signal SIGUSR1). This can be useful for\ndebugging of memory leaks.\n\nDefault value: L_DBG (memlog=3)\n\nFor example, memlog=2 means that memory statistics dumping is activated\nif the debug level is 2 or higher.\n\n```\n    debug=3    # no memory statistics as debug level \n    memlog=4   # is lower than memlog\n\n    debug=3    # dumping of memory statistics is active as the \n    memlog=2   # debug level is higher or equal memlog\n```\n\nPlease see also [#memdbg](#memdbg) and [#debug](#debug).\n\n",
 "mem_join": "### mem_join\n\nIf set to 1, memory manager (e.g., q_malloc) does join of free fragments.\nIt is effective if MEM_JOIN_FREE compile option is defined.\n\nIt can be set via config reload framework.\n\nDefault is 1 (enabled).\n\n``` c\nmem_join=1\n```\n\nTo change its value at runtime, **kamcmd** needs to be used and the\nmodules **ctl** and **cfg_rpc** loaded. Enabling it can be done with:\n\n```\n    kamctl rpc cfg.set_now_int core mem_join 1\n```\n\nTo disable, set its value to 0.\n\n",
 "mem_safety": "### mem_safety\n\nIf set to `1`, memory free operation does not call `abort()` for double\nfreeing a pointer or freeing an invalid address. The server still prints\nthe alerting log messages. If set to 0, the SIP server stops by calling\n`abort()` to generate a core file.\n\nIt can be set via config reload framework.\n\nDefault is `1` (enabled).\n\n``` c\nmem_safety=0\n```\n\n",
 "mem_status_mode": "### mem_status_mode\n\nIf set to `1`, memory status dump for `qm` allocator will print details\nabout used fragments. If set to `0`, the dump contains only free\nfragments. It can be set at runtime via cfg param framework (e.g., via\n`kamcmd`).\n\nDefault is `0`.\n\n``` c\nmem_status_mode=1\n```\n\n",
 "mem_summary": "### mem_summary\n\nParameter to control printing of memory debugging information displayed\non `exit` or `SIGUSR1`. The value can be composed by following flags:\n\n-   `1` - dump all the pkg used blocks (status)\n-   `2` - dump all the shm used blocks (status)\n-   `4` - summary of pkg used blocks\n-   `8` - summary of shm used blocks\n-   `16` - short status\n\nIf set to `0`, nothing is printed.\n\nDefault value: `12`\n\nExample:\n\n``` c\nmem_summary=15\n```\n\n",
 "mhomed": "### mhomed\n\nSet the server to try to locate outbound interface on multihomed host.\nThis parameter affects the selection of the outgoing socket for\nforwarding requests. By default is off (0) - it is rather time\nconsuming. When deactivated, the incoming socket will be used or the\nfirst one for a different protocol, disregarding the destination\nlocation. When activated, Kamailio will select a socket that can reach\nthe destination (to be able to connect to the remote address). (Kamailio\nopens a UDP socket to the destination, then it retrieves the local IP\nwhich was assigned by the operating system to the new UDP socket. Then\nthis socket will be closed and the retrieved IP address will be used as\nIP address in the Via/Record-Route headers)\n\nExample of usage:\n\n```\n    mhomed=1\n```\n\n",
 "mlock_pages": "### mlock_pages\n\nLocks all Kamailio pages into memory making it unswappable (in general\none doesn't want his SIP proxy swapped out :-))\n\n```\n    mlock_pages = yes |no (default no)\n```\n\n",
 "modinit_delay": "### modinit_delay\n\nNumber of microseconds to wait after initializing a module - useful to\ncope with systems where are rate limits on new connections to database\nor other systems.\n\nDefault value is 0 (no wait).\n\n```\n    modinit_delay=100000\n```\n\n",
 "modparam": "### modparam\n\nThe modparam command will be used to set the options (parameters) for the loaded\nmodules.\n\nPrototypes:\n\n```\nmodparam(\"modname\", \"paramname\", intval)\nmodparam(\"modname\", \"paramname\", \"strval\")\n```\n\nThe first pameter is the name of the module or a list of module names separated\nby `|` (pipe). Actually, the `modname` is enclosed in beteen `^(` and `)$` and\nmatched with the names of the loaded modules using POSIX regexp operation. For example,\nwhen `auth` is given, then the module name is matched with `^(auth)$`; when\n`acc|auth` is given, then the module name is matched with `^(acc|auth)$`. While\nusing only `|` between the names of the modules is recommended for clarity, any\nvalue that can construct a valid regular expression can be used. Note also that\n`modparam` throws error only when no module name is matched and no parameter is\nset. If the list of modules in `modname` includes a wrong name, Kamailio starts.\nFor example setting `modname` to `msilo|notamodule` does not result in a startup\nerror if `msilo` module is loaded. Be also careful with expressions than can\nmatch more module names than wanted, for example setting `modname` to `a|b` can\nresult in matching all module names that include either `a` or `b`.\n\nThe second parameter of `modparam` is the name of the module parameter.\n\nThe third parameter of `modparam` has to be either an interger or a string value,\na matter of what the module parameter expects, as documented in the README of the\nmodule.\n\nExample:\n\n```\n    modparam(\"usrloc\", \"db_mode\", 2)\n    modparam(\"usrloc\", \"nat_bflag\", 6)\n    modparam(\"auth_db|msilo|usrloc\", \"db_url\",\n        \"mysql://kamailio:kamailiorw@localhost/kamailio\")\n```\n\nSee the documenation of the respective module to find out the available\noptions.\n\n",
 "modparamx": "### modparamx\n\nSimilar to **modparam**, with ability to evaluate the variables in its\nparameters.\n\n",
 "onsend_route_reply": "### onsend_route_reply\n\nIf set to 1 (yes, on), onsend_route block is executed for received\nreplies that are sent out. Default is 0.\n\n```\n    onsend_route_reply=yes\n```\n\n",
 "open_files_limit": "### open_files_limit\n\nIf set and bigger than the current open file limit, Kamailio will try to\nincrease its open file limit to this number. Note: Kamailio must be\nstarted as root to be able to increase a limit past the hard limit\n(which, for open files, is `1024` on most systems). \"Files\" include\nnetwork sockets, so you need one for every concurrent session\n(especially if you use connection-oriented transports, like TCP/TLS).\n\nExample of usage:\n\n```\n    open_files_limit=2048\n```\n\n",
 "phone": "### phone2tel\n\nBy enabling this feature, Kamailio internally treats SIP URIs with\nuser=phone parameter as TEL URIs. If you do not want this behavior, you\nhave to turn it off.\n\nDefault value: `1` (enabled)\n\n```\n    phone2tel = 0\n```\n\n",
 "pmtu_discovery": "### pmtu_discovery\n\nIf set to 1, the don't-fragment (DF) bit will be set in outbound IP\npackets, but no fragmentation from the kernel will be done for IPv4\nand IPv6. This means that packets might be dropped and it is up to\nthe user to reduce the packet size and try again.\n\nIf set to 2, the kernel will will fragment a packet if needed\naccording to the path MTU, or will set the don't-fragment flag\notherwise. For IPv6 the kernel will fragment a packet if needed\naccording to the path MTU. The kernel keeps track of the path MTU\nper destination host.\n\nThe default is 0, do not set the don't-fragment bit or fragment\npackets for IPv4 and IPv6.\n\n```\n    pmtu_discovery = 0 | 1 | 2 (default 0)\n```\n\n",
 "port": "### port\n\nThe port the SIP server listens to. The default value for it is 5060.\n\nExample of usage:\n\n```\n    port=5080\n```\n\n",
 "pv_buffer_size": "### pv_buffer_size\n\nThe size in bytes of internal buffer to print dynamic strings with\npseudo-variables inside. The default value is 8192 (8kB). Please keep in\nmind that for xlog messages, there is a dedicated module parameter to\nset the internal buffer size.\n\nExample of usage:\n\n```\n    pv_buffer_size=2048\n```\n\n",
 "pv_buffer_slots": "### pv_buffer_slots\n\nThe number of internal buffer slots to print dynamic strings with\npseudo-variables inside. The default value is 10.\n\nExample of usage:\n\n```\n    pv_buffer_slots=12\n```\n\n",
 "pv_cache_limit": "### pv_cache_limit\n\nThe limit how many pv declarations in the cache after which an action is\ntaken. Default value is 2048.\n\n```\n    pv_cache_limit=1024\n```\n\n",
 "pv_cache_action": "### pv_cache_action\n\nSpecify what action to be done when the size of pv cache is exceeded. If\n`0`, print a warning log message when the limit is exceeded. If `1`,\nwarning log messages is printed and the cache systems tries to drop a\n`$sht(...)` declaration. Default is `0`.\n\n    pv_cache_action=1\n\n",
 "rpc_exec_delta": "### rpc_exec_delta\n\nSpecify the time interval (in seconds) required to wait before executing again\nan RPC command exported with the flag `RPC_EXEC_DELTA`. Practically it enables\nan execution rate limit for such command. The rate limiting is per RPC command.\n\nSuch RPC commands can be those related to reload of data records or config options\nfrom backends such as database or hard drive. For them, executing the RPC command\ntoo ofter can result in compromizing the internal structures (e.g., previous reload\nof data was not finished when next reload is triggered).\n\nDefault value: `0` (no rate limiting)\n\nExample:\n\n```\nrpc_exec_delta=5\n```\n\n",
 "rundir": "### rundir\n\nAlias: run_dir\n\nSet the folder for creating runtime files such as MI fifo or CTL\nunixsocket.\n\nDefault: `/var/run/kamailio`\n\nExample of usage:\n\n```\n    rundir=\"/tmp\"\n```\n\n",
 "received_route_mode": "### received_route_mode\n\nEnable or disable the execution of `event_route[core:msg-received]`\nrouting block or its corresponding Kemi callback.\n\nDefault value: `0` (disabled)\n\nExample of usage:\n\n``` c\nreceived_route_mode=1\n```\n\n",
 "reply_to_via": "### reply_to_via\n\nIf it is set to 1, any local reply is sent to the IP address advertised\nin top most Via of the request instead of the IP address from which the\nrequest was received. Default value is 0 (off).\n\nExample of usage:\n\n```\n    reply_to_via=0\n```\n\n",
 "route_locks_size": "### route_locks_size\n\nSet the number of mutex locks to be used for synchronizing the execution\nof config script for messages sharing the same `Call-Id`. In other words,\nenables Kamailio to execute the config script sequentially for the\nrequests and replies received within the same dialog -- a new message\nreceived within the same dialog waits until the previous one is routed\nout.\n\nFor smaller impact on parallel processing, its value it should be at\nleast twice the number of Kamailio processes (all children processes).\n\nExample:\n\n``` c\nroute_locks_size = 256\n```\n\nNote that ordering of the SIP messages can still be changed by network\ntransmission (quite likely for UDP, especially on long distance paths)\nor CPU allocation for processes when executing pre-config and\npost-config tasks (very low chance, but not to be ruled out completely).\n\n",
 "server_id": "### server_id\n\nA configurable unique server id that can be used to discriminate server\ninstances within a cluster of servers when all other information, such\nas IP addresses are the same.\n\n``` c\n  server_id = number\n```\n\n",
 "server_header": "### server_header\n\nSet the value of Server header for replies generated by Kamailio. It\nmust contain the header name, but not the ending `CRLF`.\n\nExample of usage:\n\n``` c\nserver_header=\"Server: My Super SIP Server\"\n```\n\n",
 "server_signature": "### server_signature\n\nThis parameter controls the \"Server\" header in any locally generated\nmessage.\n\nExample of usage:\n\n```\n    server_signature=no\n```\n\nIf it is enabled (default=yes) a header is generated as in the following\nexample:\n\n```\n    Server: Kamailio (<version> (<arch>/<os>))\n```\n\n",
 "shm_force_alloc": "### shm_force_alloc\n\nTries to pre-fault all the shared memory, before starting. When \"on\",\nstart time will increase, but combined with mlock_pages will guarantee\nKamailio will get all its memory from the beginning (no more kswapd slow\ndowns)\n\n```\nshm_force_alloc = yes | no (default no)\n```\n\n",
 "shm_mem_size": "### shm_mem_size\n\nSet shared memory size (in Mb).\n\n```\nshm_mem_size = 64 (default 64)\n```\n\n",
 "sip_parser_log": "### sip_parser_log\n\nLog level for printing debug messages for some of the SIP parsing\nerrors.\n\nDefault: `0` (`L_WARN`)\n\n``` c\nsip_parser_log = 1\n```\n\n",
 "sip_parser_mode": "### sip_parser_mode\n\nControl sip parser behaviour.\n\nIf set to `1`, the parser is more strict in accepting messages that have\ninvalid headers (e.g., duplicate To or From). It can make the system\nsafer, but loses the flexibility to be able to fix invalid messages with\nconfig operations.\n\nIf set to `0`, the parser is less strict on checking validity of headers.\n\nDefault: `1`\n\n``` c\nsip_parser_mode = 0\n```\n\n",
 "sip_warning": "### sip_warning (noisy feedback)\n\nCan be `0` or `1`. If set to `1` (default value is `0`) a 'Warning' header is\nadded to each reply generated by Kamailio. The header contains several\ndetails that help troubleshooting using the network traffic dumps, but\nmight reveal details of your network infrastructure and internal SIP\nrouting.\n\nExample of usage:\n\n```\n    sip_warning=0\n```\n\n",
 "socket": "### socket\n\nSpecify an address to listen (bind) to, a simplified alternative to `listen`\nparamter that allows specifying the attributes using a structure style.\n\nPrototype:\n\n```\nsocket = {\n    attr1 = value1;\n    ...\n    attrN = valueN;\n}\n```\n\nThe attributes are:\n\n  - `bind` - the address to listen on in format `[proto:]address[:port]`\n  - `advertise` - the address to advertise in SIP headers in format `address[:port]`\n  - `name` - name of the socket to be referenced in configuration file\n  - `virtual` - set to `yes/no` to indicate if the IP has to be considered virtual or not\n\nThe attribute `bind` is mandatory and has to provide at list the address to listen on.\n\nExample:\n\n```\nsocket = {\n\tbind = udp:10.10.10.10:5060;\n\tadvertise = 11.11.11.11:5060;\n\tname = \"s0\";\n    virtual = yes;\n}\n```\n\nThe above is the equivalent of:\n\n```\nlisten=udp:10.10.10.10:5060 advertise 11.11.11.11:5060 name \"s0\" virtual\n```\n\n",
 "socket_workers": "### socket_workers\n\nNumber of workers to process SIP traffic per listen socket - typical use\nis before a **listen** global parameter.\n\n-   when used before **listen** on UDP or SCTP socket, it overwrites\n    **children** or **sctp_children** value for that socket.\n-   when used before **listen** on TCP or TLS socket, it adds extra tcp\n    workers, these handling traffic only on that socket.\n\nThe value of **socket_workers** is reset with next **listen** socket\ndefinition that is added, thus use it for each **listen** socket where\nyou want custom number of workers.\n\nIf this parameter is not used at all, the values for **children**,\n**tcp_children** and **sctp_children** are used as usually.\n\nExample for udp sockets:\n\n``` c\nchildren=4\nsocket_workers=2\nlisten=udp:127.0.0.1:5080\nlisten=udp:127.0.0.1:5070\nlisten=udp:127.0.0.1:5060\n```\n\n-   it will start 2 workers to handle traffic on <udp:127.0.0.1:5080>\n    and 4 for each of <udp:127.0.0.1:5070> and <udp:127.0.0.1:5060>. In\n    total there are 10 worker processes\n\nExample for tcp sockets:\n\n``` c\nchildren=4\nsocket_workers=2\nlisten=tcp:127.0.0.1:5080\nlisten=tcp:127.0.0.1:5070\nlisten=tcp:127.0.0.1:5060\n```\n\n-   it will start 2 workers to handle traffic on tcp:127.0.0.1:5080 and\n    4 to handle traffic on both tcp:127.0.0.1:5070 and\n    tcp:127.0.0.1:5060. In total there are 6 worker processes\n\n",
 "sql_buffer_size": "### sql_buffer_size\n\nThe size in bytes of the SQL buffer created for data base queries. For\ndatabase drivers that use the core db_query library, this will be\nmaximum size object that can be written or read from a database. Default\nvalue is 65535.\n\nExample of usage:\n\n```\n    sql_buffer_size=131070\n```\n\n",
 "statistics": "### statistics\n\nKamailio has built-in support for statistics counter. This means, these\ncounters can be increased, decreased, read and cleared. The statistics\ncounter are defined either by the core (e.g. tcp counters), by modules\n(e.g. 2xx_transactions by \"tmx\" module) or by the script writer using\nthe \"statistics\" module.\n\nThe statistics counters are read/updated either automatically by\nKamailio internally (e.g. tcp counters), by the script writer via the\nmodule functions of the \"statistics\" module, by the script writer using\nthe `$stat()` pseudo variable (read-only), or via MI commands.\n\nFollowing are some examples how to access statistics variables:\n\n**script**:\n\n```\n    modparam(\"statistics\", \"variable\", \"NOTIFY\")\n\n    (if method == \"NOTIFY\") {\n      update_stat(\"NOTIFY\", \"+1\");\n    }\n\n    xlog(\"Number of received NOTIFYs: $stat(NOTIFY)\");\n```\n\n**RPC**:\n\n```\n    # get counter value\n    kamctl rpc stats.get_statistics NOTIFY\n    # set counter to zero\n    kamctl rpc stats.reset_statistics NOTIFY\n    # get counter value and then set it to zero\n    kamctl rpc stats.clear_statistics NOTIFY\n\n    # or use the kamcmd tool\n    kamcmd stats.get_statistics 1xx_replies\n```\n\n",
 "stats_name_separator": "### stats_name_separator\n\nSpecify the character used as a separator for the internal statistics'\nnames. Default value is `_`.\n\nExample of usage:\n\n```\n    stats_name_separator = \"-\"\n```\n\n",
 "tos": "### tos\n\nThe TOS (Type Of Service) to be used for the sent IP packages (both TCP\nand UDP).\n\nExample of usage:\n\n```\n    tos=IPTOS_LOWDELAY\n    tos=0x10\n    tos=IPTOS_RELIABILITY\n```\n\n",
 "udp_mtu": "### udp_mtu\n\nFallback to another protocol (`udp_mtu_try_proto` must be set also either\nglobally or per packet) if the constructed request size is greater than\nudp_mtu.\n\nRFC 3261 specified size: `1300`. Default: `0` (off).\n\n```\n    udp_mtu = number\n```\n\n",
 "udp_mtu_try_proto": "### udp_mtu_try_proto\n\nIf `udp_mtu != 0` and udp forwarded request size (after adding all the\n\"local\" headers) `> udp_mtu`, use this protocol instead of udp. Only the\nVia header will be updated (e.g. The Record-Route will be the one built\nfor udp).\n\n**Warning:** Although RFC3261 mandates automatic transport protocol\nchanging, enabling this feature can lead to problems with clients which\ndo not support other protocols or are behind a firewall or NAT. Use this\nonly when you know what you do!\n\nSee also `udp_mtu_try_proto(proto)` function.\n\nDefault: `UDP` (`off`). Recommended: `TCP`.\n\n```\n    udp_mtu_try_proto = TCP|TLS|SCTP|UDP\n```\n\n### udp_mtu_try_proto(proto)\n\n-   proto - `TCP|TLS|SCTP|UDP` - like `udp_mtu_try_proto` global\n    parameter but works on a per packet basis and not globally.\n\nExample:\n\n    if($rd==\"10.10.10.10\")\n        udp_mtu_try_proto(SCTP);\n\n",
 "uri_host_extra_chars": "### uri_host_extra_chars\n\nSpecify additional chars that should be allowed in the host part of URI.\n\n``` c\nuri_host_extra_chars = \"_\"\n```\n\n",
 "user": "### user\n\n**Alias name: uid**\n\nThe user id to run Kamailio (Kamailio will suid to it).\n\nExample of usage:\n\n``` c\n    user=\"kamailio\"\n```\n\n",
 "user_agent_header": "### user_agent_header\n\nSet the value of User-Agent header for requests generated by Kamailio.\nIt must contain header name as well, but not the ending CRLF.\n\n``` c\nuser_agent_header=\"User-Agent: My Super SIP Server\"\n```\n\n",
 "verbose_startup": "### verbose_startup\n\nControl if printing routing tree and udp probing buffer debug messages\nshould be printed at startup.\n\nDefault is 0 (don't print); set to 1 to get those debug messages.\n\nExample of usage:\n\n``` c\n   verbose_startup=1\n```\n\n",
 "version_table": "### version_table\n\nSet the name of the table holding the table version. Useful if the proxy\nis sharing a database within a project and during upgrades. Default\nvalue is \"version\".\n\nExample of usage:\n\n``` c\n   version_table=\"version44\"\n```\n\n",
 "wait_worker": "### wait_worker1_mode\n\nEnable waiting for child SIP worker one to complete initialization, then\ncreate the other child worker processes.\n\nDefault: 0 (do not wait for child worker one to complete\ninitialization).\n\nExample:\n\n``` c\nwait_worker1_mode = 1\n```\n\n### wait_worker1_time\n\nHow long to wait for child worker one to complete the initialization. In\nmicro-seconds.\n\nDefault: 4000000 (micro-seconds = 4 seconds).\n\nExample:\n\n``` c\nwait_worker1_time = 1000000\n```\n\n### wait_worker1_usleep\n\nHow long to wait for child worker one to complete the initialization. In\nmicro-seconds.\n\nDefault: 100000 (micro-seconds = 0.1 seconds).\n\nExample:\n\n``` c\nwait_worker1_usleep = 50000\n```\n\n",
 "workdir": "### workdir\n\n**Alias name: wdir**\n\nThe working directory used by Kamailio at runtime. You might find it\nuseful when it comes to generating core files :)\n\nExample of usage:\n\n```\n    wdir=\"/usr/local/kamailio\"\n    # or\n    wdir=/usr/kamwd\n```\n\n",
 "xavp_via_params": "### xavp_via_params\n\nSet the name of the XAVP of which subfields will be added as local `Via`\n-header parameters.\n\nIf not set, `XAVP` to `Via` header parameter manipulation is not applied\n(default behaviour).\n\nIf set, local `Via` header gets additional parameters from defined `XAVP`.\nCore flag `FL_ADD_XAVP_VIA_PARAMS` needs to be set\u00b9.\n\nExample:\n\n```\n    xavp_via_params=\"via\"\n```\n\n`[1]` See function `via_add_xavp_params()` from \"corex\" module.\n\n",
 "xavp_via_fields": "### xavp_via_fields\n\nSet the name of xavp from where to take Via header field: address and\nport. Use them to build local Via header.\n\nExample:\n\n``` c\nxavp_via_fields=\"customvia\"\n\nrequest_route {\n  ...\n  $xavp(customvia=>address) = \"1.2.3.4\";\n  $xavp(customvia[0]=>port) = \"5080\";  # must be string\n  via_use_xavp_fields(\"1\");\n  t_relay();\n}\n```\n\nSee function `via_use_xavp_fields()` from \"corex\" module.\n\n",
 "dns": "### dns\n\nThis parameter controls if the SIP server will try doing a DNS lookup on\nthe address in the Via header of a received sip request to decide if\nadding a `received=src_ip` parameter to the Via is necessary. Note that\nVias containing DNS names (instead of IPs) should have `received=` added,\nso turning dns to yes is not recommended.\n\nDefault is `no`.\n\n",
 "rev_dns": "### rev_dns\n\n**Alias Name: dns_rev_via**\n\nThis parameter controls if the SIP server will try doing a reverse DNS\nlookup on the source IP of a sip request to decide if adding a\n`received=src_ip` parameter to the Via is necessary (if the Via\ncontains a DNS name instead of an IP address, the result of the reverse\ndns on the source IP will be compared with the DNS name in the Via). See\nalso dns (the effect is cumulative, both can be turned on and in that\ncase if the DNS lookup test fails the reverse DNS test will be tried).\nNote that Vias containing DNS names (instead of IPs) should have\n`received=` added, so turning rev_dns to yes is not recommended.\n\nDefault is `no`.\n\n",
 "dns_cache_del_nonexp": "### dns_cache_del_nonexp\n\n**Alias name: dns_cache_delete_nonexpired**\n\n```\n    dns_cache_del_nonexp = yes | no (default: no)\n```\n\n      allow deletion of non-expired records from the cache when there is no more space\n      left for new ones. The last-recently used entries are deleted first.\n\n",
 "dns_cache_rec_pref": "### dns_cache_rec_pref\n\n```\n    dns_cache_rec_pref = number (default 0)\n```\n\n      dns cache record preference, determines how new DNS records are stored internally in relation to existing entries.\n      Possible values:\n        0 - do not check duplicates\n        1 - prefer old records\n        2 - prefer new records\n        3 - prefer records with longer lifetime\n\n",
 "dns_cache_flags": "### dns_cache_flags\n\n```\n    dns_cache_flags = number (default 0)\n```\n\n      dns cache specific resolver flags, used for overriding the default behaviour (low level).\n      Possible values:\n        1 - ipv4 only: only DNS A requests are performed, even if Kamailio also listens on ipv6 addresses.\n        2 - ipv6 only: only DNS AAAA requests are performed. Ignored if dns_try_ipv6 is off or Kamailio \n            doesn't listen on any ipv6 address.\n        4 - prefer ipv6: try first to resolve a host name to an ipv6 address (DNS AAAA request) and only\n            if this fails try an ipv4 address (DNS A request). By default the ipv4 addresses are preferred.\n\n",
 "dns_cache_gc_interval": "### dns_cache_gc_interval\n\nInterval in seconds after which the dns cache is garbage collected\n(default: 120 s)\n\n```\n    dns_cache_gc_interval = number\n```\n\n",
 "dns_cache_init": "### dns_cache_init\n\nIf off, the dns cache is not initialized at startup and cannot be\nenabled at runtime, this saves some memory.\n\n```\n    dns_cache_init = on | off (default on)\n```\n\n",
 "dns_cache_max_ttl": "### dns_cache_max_ttl\n\n```\n    dns_cache_max_ttl = time in seconds (default MAXINT)\n```\n\n",
 "dns_cache_mem": "### dns_cache_mem\n\nMaximum memory used for the dns cache in KB (default 500 K)\n\n```\n    dns_cache_mem = number\n```\n\n",
 "dns_cache_min_ttl": "### dns_cache_min_ttl\n\n```\n    dns_cache_min_ttl = time in seconds (default 0)\n```\n\n",
 "dns_cache_negative_ttl": "### dns_cache_negative_ttl\n\nTells how long to keep negative DNS responses in cache. If set to 0,\ndisables caching of negative responses. Default is 60 (seconds).\n\n",
 "dns_naptr_ignore_rfc": "### dns_naptr_ignore_rfc\n\nIf the DNS lookup should ignore the remote side's protocol preferences,\nas indicated by the Order field in the NAPTR records and mandated by RFC\n2915.\n\n```\n      dns_naptr_ignore_rfc = yes | no (default yes)\n```\n\n",
 "dns_retr_no": "### dns_retr_no\n\nNumber of dns retransmissions before giving up. Default value is system\nspecific, depends also on the '/etc/resolv.conf' content (usually 4).\n\nExample of usage:\n\n```\n    dns_retr_no=3\n```\n\n",
 "dns_retr_time": "### dns_retr_time\n\nTime in seconds before retrying a dns request. Default value is system\nspecific, depends also on the '/etc/resolv.conf' content (usually 5s).\n\nExample of usage:\n\n```\n    dns_retr_time=3\n```\n\n",
 "dns_search_full_match": "### dns_search_full_match\n\nWhen name was resolved using dns search list, check the domain added in\nthe answer matches with one from the search list (small performance hit,\nbut more safe)\n\n```\n    dns_search_full_match = yes | no (default yes)\n```\n\n",
 "dns_servers_no": "### dns_servers_no\n\nHow many dns servers from the ones defined in '/etc/resolv.conf' will be\nused. Default value is to use all of them.\n\nExample of usage:\n\n```\n    dns_servers_no=2\n```\n\n",
 "dns_srv_lb": "### dns_srv_lb\n\n**Alias name: dns_srv_loadbalancing**\n\nEnable dns srv weight based load balancing (see doc/tutorials/dns.txt)\n\n```\n    dns_srv_lb = yes | no (default no)\n```\n\n",
 "dns_try_ipv": "### dns_try_ipv6\n\nCan be 'yes' or 'no'. If it is set to 'yes' and a DNS lookup fails, it\nwill retry it for ipv6 (AAAA record). Default value is 'no'.\n\nNote: If dns_try_ipv6 is off, no hostname resolving that would result in\nan ipv6 address would succeed - it doesn't matter if an actual DNS\nlookup is to be performed or the host is already an ip address. Thus, if\nthe proxy should forward requests to IPv6 targets, this option must be\nturned on!\n\nExample of usage:\n\n```\n    dns_try_ipv6=yes\n```\n\n",
 "dns_try_naptr": "### dns_try_naptr\n\nEnable NAPTR support according to RFC 3263 (see doc/tutorials/dns.txt\nfor more info)\n\n```\n    dns_try_naptr = yes | no (default no)\n```\n\n",
 "dns_sctp_pref": "### dns_sctp_pref, dns_tcp_pref, dns_tls_pref, dns_udp_pref\n\n**Alias name: dns_sctp_preference, dns_tcp_preference,\ndns_tls_preference, dns_udp_preference**\n\nSet preference for each protocol when doing naptr lookups. By default\ndns_udp_pref=30, dns_tcp_pref=20, dns_tls_pref=10 and dns_sctp_pref=20.\nTo use the remote site preferences set all dns\\_\\*\\_pref to the same\npositive value (e.g. dns_udp_pref=1, dns_tcp_pref=1, dns_tls_pref=1,\ndns_sctp_pref=1). To completely ignore NAPTR records for a specific\nprotocol, set the corresponding protocol preference to -1 (or any other\nnegative number). (see doc/tutorials/dns.txt for more info)\n\n```\n    dns_{udp,tcp,tls,sctp}_pref = number\n```\n\n",
 "dns_use_search_list": "### dns_use_search_list\n\nCan be 'yes' or 'no'. If set to 'no', the search list in\n'/etc/resolv.conf' will be ignored (=> fewer lookups => gives up\nfaster). Default value is 'yes'.\n\nHINT: even if you don't have a search list defined, setting this option\nto 'no' will still be \"faster\", because an empty search list is in fact\nsearch \"\" (so even if the search list is empty/missing there will still\nbe 2 dns queries, eg. foo+'.' and foo+\"\"+'.')\n\nExample of usage:\n\n```\n    dns_use_search_list=no\n```\n\n",
 "use_dns_cache": "### use_dns_cache\n\n**Alias name: dns_use_cache**\n\nTells if DNS responses are cached - this means that the internal DNS\nresolver (instead of the system's stub resolver) will be used. If set to\n\"off\", disables caching of DNS responses and, as side effect, DNS\nfailover. Default is \"on\". Settings can be changed also during runtime\n(switch from internal to system resolver and back).\n\n",
 "use_dns_failover": "### use_dns_failover\n\n**Alias name: dns_use_failover**\n\n```\nuse_dns_failover = on | off (default off)\n```\n\nIf `on` and sending a request fails (due to not being allowed from an `onsend_route`,\nsend failure, blocklisted destination or, when using tm, invite timeout), and the\ndestination resolves to multiple ip addresses and/or multiple `SRV` records, the send\nwill be re-tried using the next ip/record. In `tm` case, a new branch will be\ncreated for each new send attempt.\n\n",
 "disable_tcp": "### disable_tcp\n\nGlobal parameter to disable TCP support in the SIP server. Default value\nis `no`.\n\nExample of usage:\n\n```\n    disable_tcp=yes\n```\n\n",
 "tcp_accept_aliases": "### tcp_accept_aliases\n\nIf a message received over a tcp connection has \"alias\" in its via a new\ntcp alias port will be created for the connection the message came from\n(the alias port will be set to the via one).\n\nBased on `draft-ietf-sip-connect-reuse-00.txt`, but using only the port\n(host aliases are dangerous, involve extra DNS lookups and the need for\nthem is questionable)\n\nSee `force_tcp_alias` for more details.\n\nNote: For NAT traversal of TCP clients it is better to not use\ntcp_accept_aliases but just use nathelper module and\n`fix_nated_[contact|register]()` functions.\n\nDefault is `no` (`off`)\n\n```\n    tcp_accept_aliases= yes|no\n```\n\n",
 "tcp_accept_haproxy": "### tcp_accept_haproxy\n\nEnable the internal TCP stack to expect a PROXY-protocol-formatted\nheader as the first message of the connection. Both the human-readable\n(v1) and binary-encoded (v2) variants of the protocol are supported.\nThis option is typically useful if you are behind a TCP load-balancer,\nsuch as HAProxy or an AWS' ELB, and allows the load-balancer to provide\nconnection information regarding the upstream client. This enables the\nuse of IP-based ACLs, even behind a load-balancer.\n\nPlease note that enabling this option will reject any inbound TCP\nconnection that does not conform to the PROXY-protocol spec.\n\nFor reference - the PROXY protocol:\n\n  - [https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt](https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt)\n\nDefault value is **no**.\n\n``` c\ntcp_accept_haproxy=yes\n```\n\n",
 "tcp_accept_hep": "### tcp_accept_hep3\n\nEnable internal TCP receiving stack to accept HEP3 packets. This option\nhas to be set to **yes** on a Kamailio instance acting as Homer\nSIPCapture server that is supposed to receive HEP3 packets over TCP/TLS.\n\nDefault value is **no**.\n\n``` c\ntcp_accept_hep3=yes\n```\n\n",
 "tcp_accept_no_cl": "### tcp_accept_no_cl\n\nControl whether to throw or not error when there is no Content-Length\nheader for requests received over TCP. It is required to be set to\n**yes** for XCAP traffic sent over HTTP/1.1 which does not use\nContent-Length header, but splits large bodies in many chunks. The\nmodule **sanity** can be used then to restrict this permission to HTTP\ntraffic only, testing in route block in order to stay RFC3261 compliant\nabout this mandatory header for SIP requests over TCP.\n\nDefault value is **no**.\n\n``` c\ntcp_accept_no_cl=yes\n```\n\n",
 "tcp_accept_unique": "### tcp_accept_unique\n\nIf set to `1`, reject duplicate connections coming from same source IP and\nport.\n\nDefault set to `0`.\n\n``` c\ntcp_accept_unique = 1\n```\n\n",
 "tcp_async": "### tcp_async\n\n**Alias name: tcp_buf_write**\n\nIf enabled, all the tcp writes that would block / wait for connect to\nfinish, will be queued and attempted latter (see also `tcp_conn_wq_max`\nand `tcp_wq_max`).\n\n**Note:** It also applies for TLS.\n\n```\n    tcp_async = yes | no (default yes)\n```\n\n",
 "tcp_children": "### tcp_children\n\nNumber of children processes to be created for reading from TCP\nconnections. If no value is explicitly set, the same number of TCP\nchildren as UDP children (see \"children\" parameter) will be used.\n\nExample of usage:\n\n```\n    tcp_children=4\n```\n\n",
 "tcp_clone_rcvbuf": "### tcp_clone_rcvbuf\n\nControl if the received buffer should be cloned from the TCP stream,\nneeded by functions working inside the SIP message buffer (such as\nmsg_apply_changes()).\n\nDefault is `0` (don't clone), set it to `1` for cloning.\n\nExample of usage:\n\n```\n    tcp_clone_rcvbuf=1\n```\n\n",
 "tcp_connection_lifetime": "### tcp_connection_lifetime\n\nLifetime in seconds for TCP sessions. TCP sessions which are inactive\nfor longer than **tcp_connection_lifetime** will be closed by Kamailio.\nDefault value is defined is `120`. Setting this value to 0 will close the\nTCP connection pretty quick.\n\nNote: As many SIP clients are behind NAT/Firewalls, the SIP proxy should\nnot close the TCP connection as it is not capable of opening a new one.\n\nExample of usage:\n\n```\n    tcp_connection_lifetime=3605\n```\n\n",
 "tcp_connection_match": "### tcp_connection_match\n\nIf set to `1`, try to be more strict in matching outbound TCP connections,\nattempting to lookup first the connection using also local port, not\nonly the local IP and remote IP+port.\n\nDefault is `0`.\n\n``` c\ntcp_connection_match=1\n```\n\n",
 "tcp_connect_timeout": "### tcp_connect_timeout\n\nTime in seconds before an ongoing attempt to establish a new TCP\nconnection will be aborted. Lower this value for faster detection of TCP\nconnection problems. The default value is 10s.\n\nExample of usage:\n\n```\n    tcp_connect_timeout=5\n```\n\n",
 "tcp_conn_wq_max": "### tcp_conn_wq_max\n\nMaximum bytes queued for write allowed per connection. Attempting to\nqueue more bytes would result in an error and in the connection being\nclosed (too slow). If tcp_buf_write is not enabled, it has no effect.\n\n```\n    tcp_conn_wq_max = bytes (default 32 K)\n```\n\n",
 "tcp_crlf_ping": "### tcp_crlf_ping\n\nEnable SIP outbound TCP keep-alive using PING-PONG (CRLFCRLF - CRLF).\n\n```\n    tcp_crlf_ping = yes | no default: yes\n```\n\n",
 "tcp_defer_accept": "### tcp_defer_accept\n\nTcp accepts will be delayed until some data is received (improves\nperformance on proxies with lots of opened tcp connections). See linux\n`tcp(7)` `TCP_DEFER_ACCEPT` or freebsd `ACCF_DATA(0)`. For now linux and\nfreebsd only.\n\nWARNING: the linux `TCP_DEFER_ACCEPT` is buggy (`<=2.6.23`) and doesn't\nwork exactly as expected (if no data is received it will retransmit syn\nacks for `~ 190 s`, irrespective of the set timeout and then it will\nsilently drop the connection without sending a RST or FIN). Try to use\nit together with tcp_syncnt (this way the number of retrans. SYNACKs can\nbe limited => the timeout can be controlled in some way).\n\nOn FreeBSD:\n\n```\n    tcp_defer_accept =  yes | no (default no)\n```\n\nOn Linux:\n\n```\n    tcp_defer_accept =  number of seconds before timeout (default disabled)\n```\n\n",
 "tcp_delayed_ack": "### tcp_delayed_ack\n\nInitial ACK for opened connections will be delayed and sent with the\nfirst data segment (see linux tcp(7) TCP_QUICKACK). For now linux only.\n\n```\n    tcp_delayed_ack  = yes | no (default yes when supported)\n```\n\n",
 "tcp_fd_cache": "### tcp_fd_cache\n\nIf enabled FDs used for sending will be cached inside the process\ncalling tcp_send (performance increase for sending over tcp at the cost\nof slightly slower connection closing and extra FDs kept open)\n\n```\n    tcp_fd_cache = yes | no (default yes)\n```\n\n",
 "tcp_keepalive": "### tcp_keepalive\n\nEnables keepalive for tcp (sets SO_KEEPALIVE socket option)\n\n```\n    tcp_keepalive = yes | no (default yes)\n```\n\n",
 "tcp_keepcnt": "### tcp_keepcnt\n\nNumber of keepalives sent before dropping the connection (TCP_KEEPCNT\nsocket option). Linux only.\n\n```\n    tcp_keepcnt = number (not set by default)\n```\n\n",
 "tcp_keepidle": "### tcp_keepidle\n\nTime before starting to send keepalives, if the connection is idle\n(TCP_KEEPIDLE socket option). Linux only.\n\n```\n    tcp_keepidle  = seconds (not set by default)\n```\n\n",
 "tcp_keepintvl": "### tcp_keepintvl\n\nTime interval between keepalive probes, when the previous probe failed\n(TCP_KEEPINTVL socket option). Linux only.\n\n```\n    tcp_keepintvl = seconds (not set by default)\n```\n\n",
 "tcp_linger": "### tcp_linger2\n\nLifetime of orphaned sockets in FIN_WAIT2 state (overrides\ntcp_fin_timeout on, see linux tcp(7) TCP_LINGER2). Linux only.\n\n```\n    tcp_linger2 = seconds (not set by default)\n```\n\n",
 "tcp_max_connections": "### tcp_max_connections\n\nMaximum number of tcp connections (if the number is exceeded no new tcp\nconnections will be accepted). Default is defined in tcp_init.h: #define\nDEFAULT_TCP_MAX_CONNECTIONS 2048\n\nExample of usage:\n\n```\n    tcp_max_connections=4096\n```\n\n",
 "tcp_no_connect": "### tcp_no_connect\n\nStop outgoing TCP connects (also stops TLS) by setting tcp_no_connect to\nyes.\n\nYou can do this any time, even even if Kamailio is already started (in\nthis case using the command \"kamcmd cfg.set_now_int tcp no_connect 1\").\n\n",
 "tcp_poll_method": "### tcp_poll_method\n\nPoll method used (by default the best one for the current OS is\nselected). For available types see io_wait.c and poll_types.h: none,\npoll, epoll_lt, epoll_et, sigio_rt, select, kqueue, /dev/poll\n\nExample of usage:\n\n```\n    tcp_poll_method=select\n```\n\n",
 "tcp_rd_buf_size": "### tcp_rd_buf_size\n\nBuffer size used for tcp reads. A high buffer size increases performance\non server with few connections and lot of traffic on them, but also\nincreases memory consumption (so for lots of connection is better to use\na low value). Note also that this value limits the maximum message size\n(SIP, HTTP) that can be received over tcp.\n\nThe value is internally limited to 16MByte, for higher values recompile\nKamailio with higher limit in tcp_options.c (search for \"rd_buf_size\"\nand 16777216). Further, you may need to increase the private memory, and\nif you process the message stateful you may also have to increase the\nshared memory.\n\nDefault: 4096, can be changed at runtime.\n\n``` c\ntcp_rd_buf_size=65536\n```\n\n",
 "tcp_reuse_port": "### tcp_reuse_port\n\nAllows reuse of TCP ports. This means, for example, that the same TCP\nports on which Kamailio is listening on, can be used as source ports of\nnew TCP connections when acting as an UAC. Kamailio must have been\ncompiled in a system implementing SO_REUSEPORT (Linux \\> 3.9.0, FreeBSD,\nOpenBSD, NetBSD, MacOSX). This parameter takes effect only if also the\nsystem on which Kamailio is running on supports SO_REUSEPORT.\n\n```\n    tcp_reuse_port = yes (default no)\n```\n\n",
 "tcp_script_mode": "### tcp_script_mode\n\nSpecify if connection should be closed (set to CONN_ERROR) if processing\nthe received message results in error (that can also be due to negative\nreturn code from a configuration script main route block). If set to 1,\nthe processing continues with the connection open.\n\nDefault `0` (close connection)\n\n```\n    tcp_script_mode = 1\n```\n\n",
 "tcp_send_timeout": "### tcp_send_timeout\n\nTime in seconds after a TCP connection will be closed if it is not\navailable for writing in this interval (and Kamailio wants to send\nsomething on it). Lower this value for faster detection of broken TCP\nconnections. The default value is 10s.\n\nExample of usage:\n\n```\n    tcp_send_timeout=3\n```\n\n",
 "tcp_source_ipv": "### tcp_source_ipv4, tcp_source_ipv6\n\nSet the source IP for all outbound TCP connections. If setting of the IP\nfails, the TCP connection will use the default IP address.\n\n```\n    tcp_source_ipv4 = IPv4 address\n    tcp_source_ipv6 = IPv6 address\n```\n\n",
 "tcp_syncnt": "### tcp_syncnt\n\nNumber of SYN retransmissions before aborting a connect attempt (see\nlinux tcp(7) TCP_SYNCNT). Linux only.\n\n```\n    tcp_syncnt = number of syn retr. (default not set)\n```\n\n",
 "tcp_wait_data": "### tcp_wait_data\n\nSpecify how long to wait (in milliseconds) to wait for data on tcp\nconnections in certain cases. Now applies when reading on tcp connection\nfor haproxy protocol.\n\nDefault: `5000ms` (`5secs`)\n\n``` c\ntcp_wait_data = 10000\n```\n\n",
 "tcp_wq_blk_size": "### tcp_wq_blk_size\n\nBlock size used for tcp async writes. It should be big enough to hold a\nfew datagrams. If it's smaller than a datagram (in fact a tcp write())\nsize, it will be rounded up. It has no influenced on the number of\ndatagrams queued (for that see tcp_conn_wq_max or tcp_wq_max). It has\nmostly debugging and testing value (can be ignored).\n\nDefault: `2100` (`~ 2 INVITEs`), can be changed at runtime.\n\n",
 "tcp_wq_max": "### tcp_wq_max\n\nMaximum bytes queued for write allowed globally. It has no effect if\ntcp_buf_write is not enabled.\n\n```\n    tcp_wq_max = bytes (default 10 Mb)\n```\n\n",
 "tls_port_no": "### tls_port_no\n\nThe port the SIP server listens to for TLS connections.\n\nDefault value is `5061`.\n\nExample of usage:\n\n```\n    tls_port_no=6061\n```\n\n",
 "tls_max_connections": "### tls_max_connections\n\nMaximum number of ls connections (if the number is exceeded no new ls\nconnections will be accepted). It cannot exceed tcp_max_connections.\n\nDefault value is `2048`.\n\nExample of usage:\n\n```\n    tls_max_connections=4096\n```\n\n",
 "disable_sctp": "### disable_sctp\n\nGlobal parameter to disable SCTP support in the SIP server. See also\n`enable_sctp`.\n\nDefault value is `auto`.\n\nExample of usage:\n\n```\n    disable_sctp=yes\n```\n\n",
 "enable_sctp": "### enable_sctp\n\n```\n    enable_sctp = 0/1/2  - SCTP disabled (0)/ SCTP enabled (1)/auto (2), \n                           default auto (2)\n```\n\n",
 "sctp_children": "### sctp_children\n\nsctp children no (similar to udp children)\n\n```\n    sctp_children = number \n```\n\n",
 "sctp_socket_rcvbuf": "### sctp_socket_rcvbuf\n\nSize for the sctp socket receive buffer\n\n**Alias name: sctp_socket_receive_buffer**\n\n```\n    sctp_socket_rcvbuf = number \n```\n\n",
 "sctp_socket_sndbuf": "### sctp_socket_sndbuf\n\nSize for the sctp socket send buffer\n\n**Alias name: sctp_socket_send_buffer**\n\n```\n    sctp_socket_sndbuf = number\n```\n\n",
 "sctp_autoclose": "### sctp_autoclose\n\nNumber of seconds before autoclosing an idle association (default: `180`\ns). Can be changed at runtime, but it will affect only new associations.\nE.g.:\n\n```\n    $ kamcmd cfg.seti sctp autoclose 120\n```\n\n```\n    sctp_autoclose = seconds\n```\n\n",
 "sctp_send_ttl": "### sctp_send_ttl\n\nNumber of milliseconds before an unsent message/chunk is dropped\n(default: `32000` ms or `32` s). Can be changed at runtime, e.g.:\n\n```\n    $ kamcmd cfg.seti sctp send_ttl 180000\n```\n\n```\n    sctp_send_ttl = milliseconds - n\n```\n\n",
 "sctp_send_retries": "### sctp_send_retries\n\nHow many times to attempt re-sending a message on a re-opened\nassociation, if the sctp stack did give up sending it (it's not related\nto sctp protocol level retransmission). Useful to improve reliability\nwith peers that reboot/restart or fail over to another machine.\n\nWARNING: use with care and low values (e.g. 1-3) to avoid \"multiplying\"\ntraffic to unresponding hosts (default: 0). Can be changed at runtime.\n\n```\n    sctp_send_retries = 1\n```\n\n",
 "sctp_assoc_tracking": "### sctp_assoc_tracking\n\nControls whether or not sctp associations are tracked inside Kamailio.\nTurning it off would result in less memory being used and slightly\nbetter performance, but it will also disable some other features that\ndepend on it (e.g. `sctp_assoc_reuse`). Default: yes.\n\nCan be changed at runtime (\"kamcmd sctp assoc_tracking 0\"), but changes\nwill be allowed only if all the other features that depend on it are\nturned off (for example it can be turned off only if first\n`sctp_assoc_reuse` was turned off).\n\nNote: turning `sctp_assoc_tracking` on/off will delete all the tracking\ninformation for all the currently tracked associations and might\nintroduce a small temporary delay in the sctp processing if lots of\nassociations were tracked.\n\nConfig options depending on `sctp_assoc_tracking` being on:\n`sctp_assoc_reuse`.\n\n```\n    sctp_assoc_tracking = yes/no\n```\n\n",
 "sctp_assoc_reuse": "### sctp_assoc_reuse\n\nControls sctp association reuse. For now only association reuse for\nreplies is affected by it. Default: `yes`. Depends on `sctp_assoc_tracking`\nbeing on.\n\nNote that even if turned off, if the port in via corresponds to the\nsource port of the association the request was sent on or if rport is\nturned on (`force_rport()` or via containing a rport option), the\nassociation will be automatically reused by the sctp stack. Can be\nchanged at runtime (sctp assoc_reuse), but it can be turned on only if\n`sctp_assoc_tracking` is on.\n\n```\n    sctp_assoc_reuse = yes/no\n```\n\n",
 "sctp_max_assocs": "### sctp_max_assocs\n\nMaximum number of allowed open sctp associations. -1 means maximum\nallowed by the OS. Default: -1. Can be changed at runtime (e.g.:\n`kamcmd cfg.seti sctp max_assocs 10`). When the maximum associations\nnumber is exceeded and a new associations is opened by a remote host,\nthe association will be immediately closed. However it is possible that\nsome SIP packets get through (especially if they are sent early, as part\nof the 4-way handshake).\n\nWhen Kamailio tries to open a new association and the max_assocs is\nexceeded the exact behaviour depends on whether or not\n`sctp_assoc_tracking` is on. If on, the send triggering the active open\nwill gracefully fail, before actually opening the new association and no\npacket will be sent. However if `sctp_assoc_tracking` is off, the\nassociation will first be opened and then immediately closed. In general\nthis means that the initial sip packet will be sent (as part of the\n4-way handshake).\n\n```\n    sctp_max_assocs = number\n```\n\n",
 "sctp_srto_initial": "### sctp_srto_initial\n\nInitial value of the retr. timeout, used in RTO calculations (default:\nOS specific).\n\nCan be changed at runtime (sctp `srto_initial`) but it will affect only\nnew associations.\n\n```\n    sctp_srto_initial = milliseconds\n```\n\n",
 "sctp_srto_max": "### sctp_srto_max\n\nMaximum value of the retransmission timeout (RTO) (default: OS\nspecific).\n\nWARNING: values lower than the sctp `sack_delay` will cause lots of\nretransmissions and connection instability (see sctp_srto_min for more\ndetails).\n\nCan be changed at runtime (sctp `srto_max`) but it will affect only new\nassociations.\n\n```\n    sctp_srto_max = milliseconds\n```\n\n",
 "sctp_srto_min": "### sctp_srto_min\n\nMinimum value of the retransmission timeout (RTO) (default: OS\nspecific).\n\nWARNING: values lower than the sctp `sack_delay` of any peer might cause\nretransmissions and possible interoperability problems. According to the\nstandard the `sack_delay` should be between 200 and 500 ms, so avoid\ntrying values lower than 500 ms unless you control all the possible sctp\npeers and you do make sure their `sack_delay` is higher or their sack_freq\nis 1.\n\nCan be changed at runtime (sctp `srto_min`) but it will affect only new\nassociations.\n\n```\n    sctp_srto_min = milliseconds\n```\n\n",
 "sctp_asocmaxrxt": "### sctp_asocmaxrxt\n\nMaximum retransmissions attempts per association (default: OS specific).\nIt should be set to `sctp_pathmaxrxt` `*` no. of expected paths.\n\nCan be changed at runtime (sctp asocmaxrxt) but it will affect only new\nassociations.\n\n```\n    sctp_asocmaxrxt   = number\n```\n\n",
 "sctp_init_max_attempts": "### sctp_init_max_attempts\n\nMaximum INIT retransmission attempts (default: OS specific).\n\nCan be changed at runtime (sctp init_max_attempts).\n\n```\n    sctp_init_max_attempts = number\n```\n\n",
 "sctp_init_max_timeo": "### sctp_init_max_timeo\n\nMaximum INIT retransmission timeout (RTO max for INIT). Default: OS\nspecific.\n\nCan be changed at runtime (sctp init_max_timeo).\n\n```\n    sctp_init_max_timeo = milliseconds\n```\n\n",
 "sctp_hbinterval": "### sctp_hbinterval\n\nsctp heartbeat interval. Setting it to -1 will disable the heartbeats.\nDefault: OS specific.\n\nCan be changed at runtime (sctp hbinterval) but it will affect only new\nassociations.\n\n```\n    sctp_hbinterval = milliseconds\n```\n\n",
 "sctp_pathmaxrxt": "### sctp_pathmaxrxt\n\nMaximum retransmission attempts per path (see also sctp_asocmaxrxt).\nDefault: OS specific.\n\nCan be changed at runtime (sctp pathmaxrxt) but it will affect only new\nassociations.\n\n```\n    sctp_pathmaxrxt = number\n```\n\n",
 "sctp_sack_delay": "### sctp_sack_delay\n\nDelay until an ACK is generated after receiving a packet. Default: OS\nspecific.\n\nWARNING: a value higher than srto_min can cause a lot of retransmissions\n(and strange problems). A value higher than srto_max will result in very\nhigh connections instability. According to the standard the `sack_delay`\nvalue should be between 200 and 500 ms.\n\nCan be changed at runtime (sctp `sack_delay`) but it will affect only new\nassociations.\n\n```\n    sctp_sack_delay = milliseconds\n```\n\n",
 "sctp_sack_freq": "### sctp_sack_freq\n\nNumber of packets received before an ACK is sent (without waiting for\nthe `sack_delay` to expire). Default: OS specific.\n\nNote: on linux with `lksctp` up to and including 1.0.9 is not possible to\nset this value (having it in the config will produce a warning on\nstartup).\n\nCan be changed at runtime (sctp `sack_freq`) but it will affect only new\nassociations.\n\n```\n    sctp_sack_freq = number\n```\n\n",
 "sctp_max_burst": "### sctp_max_burst\n\nMaximum burst of packets that can be emitted by an association. Default:\nOS specific.\n\nCan be changed at runtime (sctp `max_burst`) but it will affect only new\nassociations.\n\n```\n    sctp_max_burst = number\n```\n\n",
 "udp": "### udp4_raw\n\nEnables raw socket support for sending UDP IPv4 datagrams (40-50%\nperformance increase on linux multi-cpu).\n\nPossible values: `0` - disabled (default), `1` - enabled, `-1` auto.\n\nIn \"auto\" mode it will be enabled if possible (sr started as root or\nwith `CAP_NET_RAW`). `udp4_raw` can be used on Linux and FreeBSD. For other\nBSDs and Darwin one must compile with `-DUSE_RAW_SOCKS`. On Linux one\nshould also set `udp4_raw_mtu` if the MTU on any network interface that\ncould be used for sending is smaller than `1500`.\n\nThe parameter can be set at runtime as long as sr was started with\nenough privileges (`core.udp4_raw`).\n\n```\n    udp4_raw = on\n```\n\n### udp4_raw_mtu\n\nMTU value used for UDP IPv4 packets when udp4_raw is enabled. It should\nbe set to the minimum MTU of all the network interfaces that could be\nused for sending. The default value is 1500. Note that on BSDs it does\nnot need to be set (if set it will be ignored, the proper MTU will be\nused automatically by the kernel). On Linux it should be set.\n\nThe parameter can be set at runtime (`core.udp4_raw_mtu`).\n`\n### udp4_raw_ttl\n\nTTL value used for UDP IPv4 packets when udp4_raw is enabled. By default\nit is set to auto mode (`-1`), meaning that the same TTL will be used as\nfor normal UDP sockets.\n\nThe parameter can be set at runtime (`core.udp4_raw_ttl`).\n\n",
 "dst_blocklist_expire": "### dst_blocklist_expire\n\n**Alias name: dst_blocklist_ttl**\n\nHow much time a blocklisted destination will be kept in the blocklist\n(w/o any update).\n\n```\n    dst_blocklist_expire = time in s (default 60 s)\n```\n\n",
 "dst_blocklist_gc_interval": "### dst_blocklist_gc_interval\n\nHow often the garbage collection will run (eliminating old, expired\nentries).\n\n```\n    dst_blocklist_gc_interval = time in s (default 60 s)\n```\n\n",
 "dst_blocklist_init": "### dst_blocklist_init\n\nIf off, the blocklist is not initialized at startup and cannot be\nenabled at runtime, this saves some memory.\n\n```\n    dst_blocklist_init = on | off (default on)\n```\n\n",
 "dst_blocklist_mem": "### dst_blocklist_mem\n\nMaximum shared memory amount used for keeping the blocklisted\ndestinations.\n\n```\n    dst_blocklist_mem = size in Kb (default 250 Kb)\n```\n\n",
 "use_dst_blocklist": "### use_dst_blocklist\n\nEnable the destination blocklist: Each failed send attempt will cause\nthe destination to be added to the blocklist. Before any send, this\nblocklist will be checked and if a match is found, the send is no longer\nattempted (an error is returned immediately).\n\nNote: using the blocklist incurs a small performance penalty.\n\nSee also `doc/dst_blocklist.txt`.\n\n```\n    use_dst_blocklist = on | off (default off)\n```\n\n",
 "real_time": "### real_time\n\nSets real time priority for all the Kamailio processes, or the timers\n(bitmask).\n\n       Possible values:   0  - off\n                          1  - the \"fast\" timer\n                          2  - the \"slow\" timer\n                          4  - all processes, except the timers\n\nExample: `real_time= 7` => everything switched to real time priority.\n\n```\n    real_time = <int> (flags) (default off)\n```\n\n",
 "rt_policy": "### rt_policy\n\nReal time scheduling policy, `0 = SCHED_OTHER`, `1= SCHED_RR` and\n`2=SCHED_FIFO`\n\n```\n    rt_policy= <0..3> (default 0)\n```\n\n",
 "rt_prio": "### rt_prio\n\nReal time priority used for everything except the timers, if `real_time`\nis enabled.\n\n```\n    rt_prio = <int> (default 0)\n```\n\n",
 "rt_timer": "### rt_timer1_policy\n\n**Alias name: rt_ftimer_policy**\n\nLike `rt_policy` but for the \"fast\" timer.\n\n```\n    rt_timer1_policy=<0..3> (default 0)\n```\n\n### rt_timer1_prio\n\n**Alias name: rt_fast_timer_prio, rt_ftimer_prio**\n\nLike `rt_prio` but for the \"fast\" timer process (if `real_time & 1`).\n\n```\n    rt_timer1_prio=<int> (default 0)\n```\n\n### rt_timer2_policy\n\n**Alias name: rt_stimer_policy**\n\nLike `rt_policy` but for the \"slow\" timer.\n\n```\n    rt_timer2_policy=<0..3> (default 0)\n```\n\n### rt_timer2_prio\n\n**Alias name: rt_stimer_prio**\n\nLike `rt_prio` but for the \"slow\" timer.\n\n```\n    rt_timer2_prio=<int> (default 0)\n```\n\n",
 "add_local_rport": "### add_local_rport\n\nAdd **rport** parameter to local generated Via header -- see RFC3581. In\neffect for forwarded SIP requests.\n\nExample of usage:\n\n``` c\nadd_local_rport();\n```\n\n",
 "avpflags": "### avpflags\n\n",
 "break": "### break\n\n'break' statement can be used to end a 'case' block in a 'switch'\nstatement or exit from a 'while' statement.\n\n",
 "drop": "### drop\n\nStop the execution of the configuration script and alter the implicit\naction which is done afterwards.\n\nIf the function is called in a 'branch_route' then the branch is\ndiscarded (implicit action for 'branch_route' is to forward the\nrequest).\n\nIf the function is called in the default 'onreply_route' then you can\ndrop any response. If the function is called in a named 'onreply_route'\n(transaction stateful) then any provisional reply is discarded.\n(Implicit action for 'onreply_route' is to send the reply upstream\naccording to Via header.)\n\nExample of usage:\n\n```\n    onreply_route {\n        if(status==\"200\") {\n            drop(); # this works\n        }\n    }\n\n    onreply_route[FOOBAR] {\n        if(status==\"200\") {\n            drop(); # this is ignored\n        }\n    }\n```\n\n",
 "exit": "### exit\n\nStop the execution of the configuration script -- it has the same\nbehaviour as return(0). It does not affect the implicit action to be\ntaken after script execution.\n\n```\n    request_route {\n      if (route(ABC)) {\n        xlog(\"L_NOTICE\",\"method $rm is INVITE\\n\");\n      } else {\n        xlog(\"L_NOTICE\",\"method is $rm\\n\");\n      }\n    }\n\n    route[ABC] {\n      if (is_method(\"INVITE\")) {\n        return(1);\n      } else if (is_method(\"REGISTER\")) {\n        return(-1);\n      } else if (is_method(\"MESSAGE\")) {\n        sl_send_reply(\"403\",\"IM not allowed\");\n        exit;\n      }\n    }\n```\n\n",
 "error": "### error\n\n```\nerror(\"p1\", \"p2\");\n```\n\nNot properly implemented yet - prints a log messages with the two string parameters.\n\n",
 "exec": "### exec\n\nBasic implementation of executing an external application with C `system()`\nfunction. Look also at the functions exported by `exec` module.\n\n```\nexec(\"/path/to/app\");\n```\n\n",
 "add_rport": "### add_rport\n\nAlias for force_rport();\n\n",
 "force_send_socket": "### force_send_socket\n\nForce to send the message from the specified socket (it **must** be one\nof the sockets specified with the `listen` directive). If the protocol\ndoesn't match (e.g. UDP message \"forced\" to a TCP socket) the closest\nsocket of the same protocol is used.\n\nThis function does not support pseudo-variables, use the `set_send_socket()`\nfunction from the corex module instead.\n\nExample of usage:\n\n```\n    force_send_socket(10.10.10.10:5060);\n    force_send_socket(udp:10.10.10.10:5060);\n```\n\n",
 "force_tcp_alias": "### force_tcp_alias\n\n**Alias name: add_tcp_alias**\n\n`force_tcp_alias(port)`\n\nadds a tcp port alias for the current connection (if tcp). Useful if you\nwant to send all the traffic to port_alias through the same connection\nthis request came from (it could help for firewall or nat traversal).\nWith no parameters adds the port from the message via as the alias. When\nthe \"aliased\" connection is closed (e.g. it's idle for too much time),\nall the port aliases are removed.\n\n",
 "forward": "### forward\n\nForward in stateless mode the SIP request to destination address set in `$du`\nor `$ru`.\n\nExample of usage:\n\n```\n    $du = \"sip:10.0.0.10:5060;transport=tcp\";\n    forward();\n```\n\n",
 "isavpflagset": "### isavpflagset\n\n",
 "isflagset": "### isflagset\n\nTest if a flag is set for current processed message (if the flag value\nis 1). The value of the parameter can be in range of 0..31.\n\nFor more see:\n- [Kamailio - Flag Operations](../../tutorials/kamailio-flag-operations.md)\n\nExample of usage:\n\n```\n      if(isflagset(3)) {\n          log(\"flag 3 is set\\n\");\n      };\n```\n\nKamailio also supports named flags. They have to be declared at the\nbeginning of the config file with:\n\n     flags  flag1_name[:position],  flag2_name ...\n\nExample:\n\n```\n    flags test, a:1, b:2 ;\n    request_route {\n        setflag(test);\n        if (isflagset(a)){ # equiv. to isflagset(1)\n            ....\n        }\n        resetflag(b);  # equiv. to resetflag(2)\n```\n\n",
 "is_int": "### is_int\n\nChecks if a pseudo variable argument contains integer value.\n\n```\n    if(is_int(\"$avp(foobar)\")) {\n      log(\"foobar contains an integer\\n\");\n    }\n```\n\n",
 "log": "### log\n\nWrite text message to standard error terminal or syslog. You can specify\nthe log level (the integer id) as first parameter.\n\nThe parameters are static values. If you want dynamic parameters with\nvariables, look at `xlog` module.\n\nFor more see:\n\n  - [https://www.kamailio.org/dokuwiki/doku.php/tutorials:debug-syslog-messages](https://www.kamailio.org/dokuwiki/doku.php/tutorials:debug-syslog-messages)\n\nExample of usage:\n\n```\n      log(\"just some text message\\n\");\n      log(1, \"another text message\\n\");\n```\n\n",
 "prefix": "### prefix\n\nAdd the string parameter in front of username in R-URI.\n\nExample of usage:\n\n```\n      prefix(\"00\");\n```\n\n",
 "resetavpflag": "### resetavpflag\n\n",
 "resetflag": "### resetflag\n\n",
 "return": "### return\n\nThe return() function allows you to return any integer value from a\ncalled route() block. You can test the value returned by a route using\n`$retcode` variable (which is same as `$rc` or `$?`).\n\n`return(0)` is same as [`exit()`](devel#exit);\n\nIn logical evaluation expressions:\n\n-   Negative is FALSE\n-   Positive is TRUE\n\nIf no value is specified, or a route reaches its end without executing a\nreturn statement, it returns 1. If return is used in the top level route\nis equivalent with exit `[val]`.\n\nExample usage:\n\n```\n    request_route {\n      if (route(RET)) {\n        xlog(\"L_NOTICE\",\"method $rm is INVITE\\n\");\n      } else {\n        xlog(\"L_NOTICE\",\"method $rm is REGISTER\\n\");\n      };\n    }\n\n    route[RET] {\n      if (is_method(\"INVITE\")) {\n        return(1);\n      } else if (is_method(\"REGISTER\")) {\n        return(-1);\n      } else {\n        return(0);\n      };\n    }\n```\n\nIMPORTANT: do not compare route block or module function execution in a condition\nwith the value of the return code. Next example is showing a wrong use:\n\n```\n    request_route {\n      if (route(RET) == -2) {\n        xinfo(\"return is -2\\n\");\n      } else {\n        xinfo(\"return is not -2\\n\"); ### THIS IS GOING TO BE EXECUTED\n      }\n    }\n\n    route[RET] {\n      return -2;\n    }\n```\n\nSee also the FAQ for how the function return code is evaluated:\n\n-   [Frequently Asked Questions](../tutorials/../../tutorials/faq/main.md#how-is-the-function-return-code-evaluated)\n\nNote: starting with version `5.7.0-dev`, this behaviour can be changed with\n`return_mode` global parameter.\n\n",
 "return_mode": "### return_mode\n\nControl the return code evaluation mode:\n\n  - 0 (default) - evaluation is like so far (negative is false, positive is true)\n  - 1 - propagate return value and evaluation has to be done with `>0` or `<0`, otherwise\n  `value!=0` is evaluated to true no matter is negative or positive\n\n",
 "revert_uri": "### revert_uri\n\nSet the R-URI to the value of the R-URI as it was when the request was\nreceived by server (undo all changes of R-URI).\n\nExample of usage:\n\n      revert_uri();\n\n",
 "rewritehostport": "### rewritehostport\n\n**Alias name: sethostport, sethp**\n\nRewrite the domain part and port of the R-URI with the value of\nfunction's parameter. Other parts of the R-URI like username and URI\nparameters remain unchanged.\n\nExample of usage:\n\n      rewritehostport(\"1.2.3.4:5080\");\n\n",
 "rewritehostporttrans": "### rewritehostporttrans\n\n**Alias name: sethostporttrans, sethpt**\n\nRewrite the domain part and port of the R-URI with the value of\nfunction's parameter. Also allows to specify the transport parameter.\nOther parts of the R-URI like username and URI parameters remain\nunchanged.\n\nExample of usage:\n\n      rewritehostporttrans(\"1.2.3.4:5080\");\n\n",
 "rewritehost": "### rewritehost\n\n**Alias name: sethost, seth**\n\nRewrite the domain part of the R-URI with the value of function's\nparameter. Other parts of the R-URI like username, port and URI\nparameters remain unchanged.\n\nExample of usage:\n\n      rewritehost(\"1.2.3.4\");\n\n",
 "rewriteport": "### rewriteport\n\n**Alias name: setport, setp**\n\nRewrites/sets the port part of the R-URI with the value of function's\nparameter.\n\nExample of usage:\n\n      rewriteport(\"5070\");\n\n",
 "rewriteuri": "### rewriteuri\n\n**Alias name: seturi**\n\nRewrite the request URI.\n\nExample of usage:\n\n      rewriteuri(\"sip:test@kamailio.org\");\n\n",
 "rewriteuserpass": "### rewriteuserpass\n\n**Alias name: setuserpass, setup**\n\nRewrite the password part of the R-URI with the value of function's\nparameter.\n\nExample of usage:\n\n      rewriteuserpass(\"my_secret_passwd\");\n\n",
 "rewriteuser": "### rewriteuser\n\n**Alias name: setuser, setu**\n\nRewrite the user part of the R-URI with the value of function's\nparameter.\n\nExample of usage:\n\n      rewriteuser(\"newuser\");\n\n",
 "route": "### route\n\nExecute route block given in parameter. Parameter may be name of the\nblock or a string valued expression.\n\nExamples of usage:\n\n      route(REGISTER_REQUEST);\n      route(@received.proto + \"_proto_\" + $var(route_set));\n\n### route\n\nThis block is used to define 'sub-routes' - group of actions that can be\nexecuted from another routing block. Originally targeted as being\nexecuted from 'request_route', it can be executed now from all the other\nblocks. Be sure you put there the actions valid for the root routing\nblock executing the sub-route.\n\nThe definition of the sub-route block follows the general rules, with a\nname in between square brackets and actions between curly braces. A\nsub-route can return an integer value back to the routing block that\nexecuted it. The return code can be retrieved via $rc variables.\n\nEvaluation of the return of a subroute is done with following rules:\n\n-   negative value is evaluated as false\n-   0 - is interpreted as **exit**\n-   positive value is evaluated as true\n\n``` c\nrequest_route {\n  if(route(POSITIVE)) {\n    xlog(\"return number is positive\\n\");\n  }\n  if( ! route(NEGATIVE)) {\n    xlog(\"return number is negative\\n\");\n  }\n  if( route(ZERO)) {\n    xlog(\"this log message does not appear\\n\");\n  }\n}\n\nroute[POSITIVE] {\n  return 10;\n}\n\nroute[NEGATIVE] {\n  return -8;\n}\n\nroute[ZERO] {\n  return 0;\n}\n```\n\nA sub-route can execute another sub-route. There is a limit to the\nnumber of recursive levels, avoiding ending up in infinite loops -- see\n**max_recursive_level** global parameter.\n\nThe sub-route blocks allow to make the configuration file modular,\nsimplifying the logic and helping to avoid duplication of actions.\n\n",
 "selval": "### selval\n\nSelect a value based on conditional expression.\n\nPrototype:\n\n``` c\nselval(evalexpr, valexp1, valexpr2)\n```\n\nThis is a core statement that return the 2nd parameter if the 1st\nparameter is evaluated to true, or 3rd parameter if the 1st parameter is\nevaluated to false. It can be considered a core function that is\nequivalent of ternary condition/operator\n\nExample:\n\n``` c\n$var(x) = selval($Ts mod 2, \"true/\" + $ru, \"false/\" + $rd);\n```\n\nThe first parameter is a conditional expression, like those used for IF,\nthe 2nd and 3rd parameters can be expressions like those used in the\nright side of assignments.\n\n",
 "set_advertised_address": "### set_advertised_address\n\nSame as `advertised_address` but it affects only the current message. It\nhas priority if `advertised_address` is also set.\n\nExample of usage:\n\n      set_advertised_address(\"kamailio.org\");\n\n",
 "set_advertised_port": "### set_advertised_port\n\nSame as `advertised_port` but it affects only the current message. It\nhas priority over `advertised_port`.\n\nExample of usage:\n\n      set_advertised_port(5080);\n\n",
 "set_forward_no_connect": "### set_forward_no_connect\n\nThe message will be forwarded only if there is already an existing\nconnection to the destination. It applies only to connection oriented\nprotocols like TCP and TLS (TODO: SCTP), for UDP it will be ignored. The\nbehavior depends in which route block the function is called:\n\n-   normal request route: affects stateless forwards and tm. For tm it\n    affects all the branches and the possible retransmissions (in fact\n    there are no retransmission for TCP/TLS).\n\n<!-- -->\n\n-   `onreply_route[0]` (stateless): equivalent to `set_reply_*()` (it's\n    better to use `set_reply_*` though)\n\n<!-- -->\n\n-   `onreply_route[!=0]` (tm): ignored\n\n<!-- -->\n\n-   branch_route: affects the current branch only (all messages sent on\n    this branch, like possible retransmissions and CANCELs).\n\n<!-- -->\n\n-   onsend_route: like branch route\n\nExample of usage:\n\n      route {\n        ...\n        if (lookup()) {\n          //requests to local users. They are usually behind NAT so it does not make sense to try\n          //to establish a new TCP connection \n          set_forward_no_connect();\n          t_relay();\n        }\n        ...\n      }\n\n",
 "set_forward_close": "### set_forward_close\n\nTry to close the connection (the one on which the message is sent out)\nafter forwarding the current message. Can be used in same route blocks\nas `set_forward_no_connect()`.\n\nNote: Use with care as you might not receive the replies anymore as the\nconnection is closed.\n\n",
 "set_reply_no_connect": "### set_reply_no_connect\n\nLike `set_forward_no_connect()`, but for replies to the current message\n(local generated replies and replies forwarded by tm). The behavior\ndepends in which route block the function is called:\n\n-   normal request route: affects all replies sent back on the\n    transaction (either local or forwarded) and all local stateless\n    replies (`sl_reply()`).\n\n<!-- -->\n\n-   `onreply_route`: affects the current reply (so the send_flags set in\n    the `onreply_route` will be used if the reply for which they were set\n    is the winning final reply or it's a provisional reply that is\n    forwarded)\n\n<!-- -->\n\n-   branch_route: ignored.\n\n<!-- -->\n\n-   onsend_route: ignored\n\nExample of usage:\n\n      route[4] {\n        //requests from local users. There are usually behind NAT so it does not make sense to try\n        //to establish a new TCP connection for the replies\n        set_reply_no_connect();\n        // do authentication and call routing\n        ...\n      }\n\n",
 "set_reply_close": "### set_reply_close\n\nLike `set_reply_no_connect`, but closes the TCP connection after sending.\nCan be used in same route blocks as `set_reply_no_connect`.\n\nExample of usage:\n\n      route {\n        ...\n        if (...caller-is-not-registered...) {\n          // reject unregistered client\n          // if request was received via TCP/TLS close the connection, as\n          // this may trigger re-registration of the client.\n          set_reply_close();\n          sl_send_reply(\"403\",\"REGISTER first\");\n          exit;\n        }\n        ...\n      }\n\n",
 "setavpflag": "### setavpflag\n\n",
 "setflag": "### setflag\n\nSet a flag for current processed message. The value of the parameter can\nbe in range of 0..31. The flags are used to mark the message for special\nprocessing (e.g., accounting) or to keep some state (e.g., message\nauthenticated).\n\nFor more see:\n- [Kamailio - Flag Operations](../../tutorials/kamailio-flag-operations.md)\n\nExample of usage:\n\n      setflag(3);\n\n",
 "strip": "### strip\n\nStrip the first N-th characters from username of R-URI (N is the value\nof the parameter).\n\nExample of usage:\n\n      strip(3);\n\n",
 "strip_tail": "### strip_tail\n\nStrip the last N-th characters from username of R-URI (N is the value of\nthe parameter).\n\nExample of usage:\n\n    strip_tail(3);\n\n",
 "userphone": "### userphone\n\nAdd \"user=phone\" parameter to R-URI.\n\n",
 "request_route": "### request_route\n\nRequest routing block - is executed for each SIP request.\n\nIt contains a set of actions to be executed for SIP requests received\nfrom the network. It is the equivalent of `main()` function for\nhandling the SIP requests.\n\n\ud83d\udd25**IMPORTANT**: For backward compatibility reasons, the main request\n`route` block can be identified by `route{...}` or\n`route[0]{...}`'.\n\nThe implicit action after execution of the main route block is to drop\nthe SIP request. To send a reply or forward the request, explicit\nactions (e.g., sl_send_reply(), forward(), t_relay()) must be called\ninside the route block.\n\nExample of usage:\n\n``` c\n    request_route {\n         if(is_method(\"OPTIONS\")) {\n            # send reply for each options request\n            sl_send_reply(\"200\", \"ok\");\n            exit();\n         }\n         route(FWD);\n    }\n    route[FWD] {\n         # forward according to uri\n         forward();\n    }\n```\n\n",
 "branch_route": "### branch_route\n\nRequest's branch routing block. It contains a set of actions to be taken\nfor each branch of a SIP request. It is executed only by TM module after\nit was armed via `t_on_branch(\"branch_route_index\")`.\n\nExample of usage:\n\n``` c\n    request_route {\n        lookup(\"location\");\n        t_on_branch(\"OUT\");\n        if(!t_relay()) {\n            sl_send_reply(\"500\", \"relaying failed\");\n        }\n    }\n    branch_route[OUT] {\n        if(uri=~\"10\\.10\\.10\\.10\") {\n            # discard branches that go to 10.10.10.10\n            drop();\n        }\n    }\n```\n\n",
 "failure_route": "### failure_route\n\nFailed transaction routing block. It contains a set of actions to be\ntaken each transaction that received only negative replies (`>=300`) for\nall branches. The `failure_route` is executed only by TM module after it\nwas armed via `t_on_failure(\"failure_route_index\")`.\n\nNote that in `failure_route` is processed the request that initiated the\ntransaction, not the reply .\n\nExample of usage:\n\n``` c\n    request_route {\n        lookup(\"location\");\n        t_on_failure(\"TOVOICEMAIL\");\n        if(!t_relay()) {\n            sl_send_reply(\"500\", \"relaying failed\");\n        }\n    }\n    failure_route[TOVOICEMAIL] {\n        if(is_method(\"INVITE\")) {\n             # call failed - relay to voice mail\n             t_relay_to_udp(\"voicemail.server.com\",\"5060\");\n        }\n    }\n```\n\n",
 "reply_route": "### reply_route\n\nMain SIP response (reply) handling block - it contains a set of actions\nto be executed for SIP replies. It is executed for all replies received\nfrom the network.\n\nIt does not have a name and it is executed by the core, before any other\nmodule handling the SIP reply. It is triggered only by SIP replies\nreceived on the network.\n\nThere is no network route that can be enforced for a SIP reply - it is\nsent based on Via header, according to SIP RFC3261 - therefore no\ndedicated actions for forwarding the reply must be used in this block.\n\nThis routing block is optional, if missing, the SIP reply is sent to the\naddress in 2nd Via header.\n\nOne can decide to drop a SIP reply by using **drop** action.\n\nExample:\n\n``` c\nreply_route {\n  if(status==\"128\") {\n    drop;\n  }\n}\n```\n\n\ud83d\udd25**IMPORTANT**: Note: for backward compatibility reasons, the main `reply`\nrouting block can be also identified by `onreply_route {...}` or\n`onreply_route[0] {...}`.\n\n",
 "onreply_route": "### onreply_route\n\nSIP reply routing block executed by **tm** module. It contains a set of\nactions to be taken for SIP replies in the context of an active\ntransaction.\n\nThe `onreply_route` must be armed for the SIP requests whose replies\nshould be processed within it, via `t_on_reply`(\"`onreply_route_index`\").\n\nCore 'reply_route' block is executed before a possible **tm**\n'onreply_route' block.\n\n``` c\n  request_route {\n      lookup(\"location\");\n      t_on_reply(\"LOGRPL\");\n      if(!t_relay()) {\n          sl_send_reply(\"500\", \"relaying failed\");\n      }\n  }\n\n  reply_route {\n      if(!t_check_trans()) {\n          drop;\n      }\n  }\n\n  onreply_route[LOGRPL] {\n      if(status=~\"1[0-9][0-9]\") {\n           log(\"provisional response\\n\");\n      }\n  }\n```\n\n",
 "onsend_route": "### onsend_route\n\nThe route is executed in when a SIP request is sent out. Only a limited\nnumber of commands are allowed (`drop`, `if` + all the checks, msg flag\nmanipulations, `send()`, `log()`, `textops::search()`).\n\nIn this route the final destination of the message is available and can\nbe checked (with `snd_ip`, `snd_port`, `to_ip`, `to_port`, `snd_proto`, `snd_af`).\n\nThis route is executed only when forwarding requests - it is not\nexecuted for replies, retransmissions, or locally generated messages\n(e.g. via fifo uac).\n\nExample:\n\n``` c\n  onsend_route {\n    if(to_ip==1.2.3.4 && !isflagset(12)){\n      log(1, \"message blocked\\n\");\n      drop;\n    }\n  }\n```\n\n-   snd_ip, snd_port - behave like src_ip/src_port, but contain the\n    ip/port Kamailio will use to send the message\n-   to_ip, to_port - like above, but contain the ip/port the message\n    will be sent to (not to be confused with dst_ip/dst_port, which are\n    the destination of the original received request: Kamailio's ip and\n    port on which the message was received)\n-   snd_proto, snd_af - behave like proto/af but contain the\n    protocol/address family that Kamailio will use to send the message\n-   msg:len - when used in an onsend_route, msg:len will contain the\n    length of the message on the wire (after all the changes in the\n    script are applied, Vias are added a.s.o) and not the lentgh of the\n    original message.\n\n",
 "event_route": "### event_route\n\nGeneric type of route executed when specific events happen.\n\nPrototype: `event_route[groupid:eventid]`\n\n-   groupid - should be the name of the module that triggers the event\n-   eventid - some meaningful short text describing the event\n\n",
 "if": "### if\n\nIF-ELSE statement\n\nPrototype:\n\n        if(expr) {\n           actions;\n        } else {\n           actions;\n        }\n\nThe `expr` should be a valid logical expression.\n\nThe logical operators that can be used in `expr`:\n\n- `==`:      equal\n- `!=`:      not equal\n- `=~`:      case-insensitive regular expression matching: Note: Posix regular expressions will be used, e.g. use `[[:digit:]]{3}` instead of `\\d\\d\\d`\n- `!~`:      regular expression not-matching (NOT PORTED from Kamailio 1.x, use `!(x =~ y)`)\n- `>`:       greater\n- `>=`:      greater or equal\n- `<`:       less\n- `<=`:      less or equal\n- `&&`:      logical AND\n- `||`:      logical OR\n- `!`:       logical NOT\n\nExample of usage:\n\n      if(is_method(\"INVITE\"))\n      {\n          log(\"this sip message is an invite\\n\");\n      } else {\n          log(\"this sip message is not an invite\\n\");\n      }\n\nSee also the FAQ for how the function return code is evaluated:\n\n-   [How is the function code evaluated](../../tutorials/faq/main.md#how-is-the-function-return-code-evaluated)\n\n",
 "switch": "### switch\n\nSWITCH statement - it can be used to test the value of a\npseudo-variable.\n\nIMPORTANT NOTE: `break` can be used only to mark the end of a `case`\nbranch (as it is in shell scripts). If you are trying to use `break`\noutside a `case` block the script will return error -- you must use\n`return` there.\n\nExample of usage:\n\n        route {\n            route(1);\n            switch($retcode)\n            {\n                case -1:\n                    log(\"process INVITE requests here\\n\");\n                break;\n                case 1:\n                    log(\"process REGISTER requests here\\n\");\n                break;\n                case 2:\n                case 3:\n                    log(\"process SUBSCRIBE and NOTIFY requests here\\n\");\n                break;\n                default:\n                    log(\"process other requests here\\n\");\n           }\n\n            # switch of R-URI username\n            switch($rU)\n            {\n                case \"101\":\n                    log(\"destination number is 101\\n\");\n                break;\n                case \"102\":\n                    log(\"destination number is 102\\n\");\n                break;\n                case \"103\":\n                case \"104\":\n                    log(\"destination number is 103 or 104\\n\");\n                break;\n                # cases with starting slash are regular expressions\n                case /\"\\+49.*\":\n                    log(\"destination number is germany\\n\");\n                break;\n                case /\"\\+33.*\":\n                    log(\"destination number is france\\n\");\n                break;\n                default:\n                    log(\"unknown destination number\\n\");\n           }\n        }\n\n        route[1]{\n            if(is_method(\"INVITE\"))\n            {\n                return(-1);\n            };\n            if(is_method(\"REGISTER\"))\n                return(1);\n            }\n            if(is_method(\"SUBSCRIBE\"))\n                return(2);\n            }\n            if(is_method(\"NOTIFY\"))\n                return(3);\n            }\n            return(-2);\n        }\n\nNOTE: take care while using `return` - `return(0)` stops the execution\nof the script.\n\n",
 "while": "### while\n\nwhile statement\n\nExample of usage:\n\n      $var(i) = 0;\n      while($var(i) < 10)\n      {\n          xlog(\"counter: $var(i)\\n\");\n          $var(i) = $var(i) + 1;\n      }\n\n"
}